{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Watson's Great Outdoors is a leading provider of high-quality outdoor equipment, dedicated to enhancing outdoor experiences for adventure enthusiasts. With a strong emphasis on sales, we offer a diverse range of products tailored to meet the needs of outdoor enthusiasts, including Camping Equipment, Mountaineering Equipment, Personal Accessories, Outdoor Protection, and Golf Equipment. Our commitment to quality ensures that customers can trust in the durability and reliability of our products for their outdoor pursuits. At Watson's Great Outdoors, we strive to be the go-to destination for individuals seeking top-notch outdoor gear, providing unmatched service and expertise to make every outdoor adventure memorable. Info This company is a work of fiction. Any names or characters, businesses or places, events or incidents, are fictitious. Any resemblance to an actual company is purely coincidental.","title":"Home"},{"location":"watsons-architecture/","text":"Architecture and Technology The proposed data lakehouse architecture for Watson's Great Outdoors Company outlines a streamlined structure between the storage, processing, and reporting layers allowing access to enterprise users and applications. Data Lakehouse Architecture Specify the architecture of the proposed data lakehouse, including data storage, processing, and reporting layers. Define the technology stack to be used for each layer of the data lakehouse. Integration with Existing Systems Ensure seamless integration with existing business intelligence applications.","title":"Architecture and Technology"},{"location":"watsons-architecture/#architecture-and-technology","text":"The proposed data lakehouse architecture for Watson's Great Outdoors Company outlines a streamlined structure between the storage, processing, and reporting layers allowing access to enterprise users and applications.","title":"Architecture and Technology"},{"location":"watsons-architecture/#data-lakehouse-architecture","text":"Specify the architecture of the proposed data lakehouse, including data storage, processing, and reporting layers. Define the technology stack to be used for each layer of the data lakehouse.","title":"Data Lakehouse Architecture"},{"location":"watsons-architecture/#integration-with-existing-systems","text":"Ensure seamless integration with existing business intelligence applications.","title":"Integration with Existing Systems"},{"location":"watsons-conclusion/","text":"Conclusion This proof-of-concept requirements document outlines the key components and objectives for migrating workload and data from a data warehouse to a data lakehouse architecture for Watson's Great Outdoors Company. The successful execution of this PoC will pave the way for a comprehensive migration plan and implementation.","title":"Conclusion"},{"location":"watsons-conclusion/#conclusion","text":"This proof-of-concept requirements document outlines the key components and objectives for migrating workload and data from a data warehouse to a data lakehouse architecture for Watson's Great Outdoors Company. The successful execution of this PoC will pave the way for a comprehensive migration plan and implementation.","title":"Conclusion"},{"location":"watsons-database-validation/","text":"Appendix F - Database Validation You can validate that you have the correct number of rows in your database by using the notebook found in the following link: Validation Notebook . Alternatively, you can run the following SQL to check your files sizes. You must replace the {schema} value with the schema that you stored the tables in. WITH TABLES ( TABLE_NAME , EXPECTED_ROWS , ACTUAL_ROWS ) AS ( SELECT 'AGGR_TIME_PROD_OM_FACT' , 1867 , count ( * ) from iceberg_data . { schema } . AGGR_TIME_PROD_OM_FACT UNION ALL SELECT 'BURST_TABLE' , 3 , count ( * ) from iceberg_data . { schema } . BURST_TABLE UNION ALL SELECT 'BURST_TABLE2' , 4 , count ( * ) from iceberg_data . { schema } . BURST_TABLE2 UNION ALL SELECT 'DIST_INVENTORY_FACT' , 53837 , count ( * ) from iceberg_data . { schema } . DIST_INVENTORY_FACT UNION ALL SELECT 'DIST_PRODUCT_FORECAST_FACT' , 129096 , count ( * ) from iceberg_data . { schema } . DIST_PRODUCT_FORECAST_FACT UNION ALL SELECT 'DIST_RETURNED_ITEMS_FACT' , 10249 , count ( * ) from iceberg_data . { schema } . DIST_RETURNED_ITEMS_FACT UNION ALL SELECT 'DIST_RETURN_REASON_DIM' , 5 , count ( * ) from iceberg_data . { schema } . DIST_RETURN_REASON_DIM UNION ALL SELECT 'EMP_EMPLOYEE_DIM' , 972 , count ( * ) from iceberg_data . { schema } . EMP_EMPLOYEE_DIM UNION ALL SELECT 'EMP_EXPENSE_FACT' , 127984 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_FACT UNION ALL SELECT 'EMP_EXPENSE_PLAN_FACT' , 30150 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_PLAN_FACT UNION ALL SELECT 'EMP_EXPENSE_TYPE_DIM' , 39 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_TYPE_DIM UNION ALL SELECT 'EMP_EXPENSE_UNIT_LOOKUP' , 3 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_UNIT_LOOKUP UNION ALL SELECT 'EMP_POSITION_DIM' , 57 , count ( * ) from iceberg_data . { schema } . EMP_POSITION_DIM UNION ALL SELECT 'EMP_POSITION_LOOKUP' , 57 , count ( * ) from iceberg_data . { schema } . EMP_POSITION_LOOKUP UNION ALL SELECT 'EMP_POSITION_SUMMARY_FACT' , 15050 , count ( * ) from iceberg_data . { schema } . EMP_POSITION_SUMMARY_FACT UNION ALL SELECT 'EMP_RANKING_DIM' , 5 , count ( * ) from iceberg_data . { schema } . EMP_RANKING_DIM UNION ALL SELECT 'EMP_RANKING_FACT' , 1897 , count ( * ) from iceberg_data . { schema } . EMP_RANKING_FACT UNION ALL SELECT 'EMP_RECRUITMENT_DIM' , 14 , count ( * ) from iceberg_data . { schema } . EMP_RECRUITMENT_DIM UNION ALL SELECT 'EMP_RECRUITMENT_FACT' , 416 , count ( * ) from iceberg_data . { schema } . EMP_RECRUITMENT_FACT UNION ALL SELECT 'EMP_RECRUITMENT_LEAD_FACT' , 4171 , count ( * ) from iceberg_data . { schema } . EMP_RECRUITMENT_LEAD_FACT UNION ALL SELECT 'EMP_SUCCESSION_FACT' , 181 , count ( * ) from iceberg_data . { schema } . EMP_SUCCESSION_FACT UNION ALL SELECT 'EMP_SUCCESSION_STATUS_DIM' , 5 , count ( * ) from iceberg_data . { schema } . EMP_SUCCESSION_STATUS_DIM UNION ALL SELECT 'EMP_SUMMARY_FACT' , 24233 , count ( * ) from iceberg_data . { schema } . EMP_SUMMARY_FACT UNION ALL SELECT 'EMP_SURVEY_FACT' , 5725 , count ( * ) from iceberg_data . { schema } . EMP_SURVEY_FACT UNION ALL SELECT 'EMP_SURVEY_TARG_FACT' , 20 , count ( * ) from iceberg_data . { schema } . EMP_SURVEY_TARG_FACT UNION ALL SELECT 'EMP_SURVEY_TOPIC_DIM' , 5 , count ( * ) from iceberg_data . { schema } . EMP_SURVEY_TOPIC_DIM UNION ALL SELECT 'EMP_TERMINATION_LOOKUP' , 6 , count ( * ) from iceberg_data . { schema } . EMP_TERMINATION_LOOKUP UNION ALL SELECT 'EMP_TRAINING_DIM' , 42 , count ( * ) from iceberg_data . { schema } . EMP_TRAINING_DIM UNION ALL SELECT 'EMP_TRAINING_FACT' , 4465 , count ( * ) from iceberg_data . { schema } . EMP_TRAINING_FACT UNION ALL SELECT 'FIN_ACCOUNT_CLASS_LOOKUP' , 5 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_CLASS_LOOKUP UNION ALL SELECT 'FIN_ACCOUNT_DIM' , 242 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_DIM UNION ALL SELECT 'FIN_ACCOUNT_NAME_LOOKUP' , 242 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_NAME_LOOKUP UNION ALL SELECT 'FIN_ACCOUNT_TYPE_LOOKUP' , 4 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_TYPE_LOOKUP UNION ALL SELECT 'FIN_FINANCE_FACT' , 164132 , count ( * ) from iceberg_data . { schema } . FIN_FINANCE_FACT UNION ALL SELECT 'FIN_SUBM_CURRENCY_LOOKUP' , 7 , count ( * ) from iceberg_data . { schema } . FIN_SUBM_CURRENCY_LOOKUP UNION ALL SELECT 'FIN_SUBM_DIM' , 52 , count ( * ) from iceberg_data . { schema } . FIN_SUBM_DIM UNION ALL SELECT 'FIN_SUBM_TYPE_LOOKUP' , 3 , count ( * ) from iceberg_data . { schema } . FIN_SUBM_TYPE_LOOKUP UNION ALL SELECT 'GO_BRANCH_DIM' , 29 , count ( * ) from iceberg_data . { schema } . GO_BRANCH_DIM UNION ALL SELECT 'GO_GENDER_LOOKUP' , 2 , count ( * ) from iceberg_data . { schema } . GO_GENDER_LOOKUP UNION ALL SELECT 'GO_ORG_DIM' , 123 , count ( * ) from iceberg_data . { schema } . GO_ORG_DIM UNION ALL SELECT 'GO_ORG_NAME_LOOKUP' , 123 , count ( * ) from iceberg_data . { schema } . GO_ORG_NAME_LOOKUP UNION ALL SELECT 'GO_REGION_DIM' , 21 , count ( * ) from iceberg_data . { schema } . GO_REGION_DIM UNION ALL SELECT 'GO_SATISFACTION_DIM' , 5 , count ( * ) from iceberg_data . { schema } . GO_SATISFACTION_DIM UNION ALL SELECT 'GO_TIME_DIM' , 1465 , count ( * ) from iceberg_data . { schema } . GO_TIME_DIM UNION ALL SELECT 'GO_TIME_QUARTER_LOOKUP' , 20 , count ( * ) from iceberg_data . { schema } . GO_TIME_QUARTER_LOOKUP UNION ALL SELECT 'MRK_ACTIVITY_STATUS_DIM' , 2 , count ( * ) from iceberg_data . { schema } . MRK_ACTIVITY_STATUS_DIM UNION ALL SELECT 'MRK_ADV_FACT' , 576 , count ( * ) from iceberg_data . { schema } . MRK_ADV_FACT UNION ALL SELECT 'MRK_BUNDLE_GROUP_LOOKUP' , 15 , count ( * ) from iceberg_data . { schema } . MRK_BUNDLE_GROUP_LOOKUP UNION ALL SELECT 'MRK_CAMPAIGN_LOOKUP' , 12 , count ( * ) from iceberg_data . { schema } . MRK_CAMPAIGN_LOOKUP UNION ALL SELECT 'MRK_PRODUCT_SURVEY_DIM' , 7 , count ( * ) from iceberg_data . { schema } . MRK_PRODUCT_SURVEY_DIM UNION ALL SELECT 'MRK_PRODUCT_SURVEY_FACT' , 165074 , count ( * ) from iceberg_data . { schema } . MRK_PRODUCT_SURVEY_FACT UNION ALL SELECT 'MRK_PROD_SURVEY_TARG_FACT' , 5824 , count ( * ) from iceberg_data . { schema } . MRK_PROD_SURVEY_TARG_FACT UNION ALL SELECT 'MRK_PROMOTION_DIM' , 112 , count ( * ) from iceberg_data . { schema } . MRK_PROMOTION_DIM UNION ALL SELECT 'MRK_PROMOTION_FACT' , 11034 , count ( * ) from iceberg_data . { schema } . MRK_PROMOTION_FACT UNION ALL SELECT 'MRK_PROMOTION_PLAN_FACT' , 8652 , count ( * ) from iceberg_data . { schema } . MRK_PROMOTION_PLAN_FACT UNION ALL SELECT 'MRK_RTL_SURVEY_DIM' , 9 , count ( * ) from iceberg_data . { schema } . MRK_RTL_SURVEY_DIM UNION ALL SELECT 'MRK_RTL_SURVEY_FACT' , 22508 , count ( * ) from iceberg_data . { schema } . MRK_RTL_SURVEY_FACT UNION ALL SELECT 'MRK_RTL_SURVEY_TARG_FACT' , 64 , count ( * ) from iceberg_data . { schema } . MRK_RTL_SURVEY_TARG_FACT UNION ALL SELECT 'SLS_ORDER_METHOD_DIM' , 7 , count ( * ) from iceberg_data . { schema } . SLS_ORDER_METHOD_DIM UNION ALL SELECT 'SLS_PRODUCT_BRAND_LOOKUP' , 28 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_BRAND_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_COLOR_LOOKUP' , 27 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_COLOR_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_DIM' , 274 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_DIM UNION ALL SELECT 'SLS_PRODUCT_LINE_LOOKUP' , 5 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_LINE_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_LOOKUP' , 7946 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_SIZE_LOOKUP' , 55 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_SIZE_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_TYPE_LOOKUP' , 21 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_TYPE_LOOKUP UNION ALL SELECT 'SLS_RTL_DIM' , 847 , count ( * ) from iceberg_data . { schema } . SLS_RTL_DIM UNION ALL SELECT 'SLS_SALES_FACT' , 446023 , count ( * ) from iceberg_data . { schema } . SLS_SALES_FACT UNION ALL SELECT 'SLS_SALES_ORDER_DIM' , 446023 , count ( * ) from iceberg_data . { schema } . SLS_SALES_ORDER_DIM UNION ALL SELECT 'SLS_SALES_TARG_FACT' , 233625 , count ( * ) from iceberg_data . { schema } . SLS_SALES_TARG_FACT UNION ALL SELECT 'XGOREVDW' , 58 , count ( * ) from iceberg_data . { schema } . XGOREVDW ) SELECT TABLE_NAME , IF ( EXPECTED_ROWS - ACTUAL_ROWS = 0 , 'OK' , 'ERROR' ) AS STATUS , EXPECTED_ROWS , ACTUAL_ROWS FROM TABLES ORDER BY TABLE_NAME ASC ;","title":"Database Validation"},{"location":"watsons-database-validation/#appendix-f-database-validation","text":"You can validate that you have the correct number of rows in your database by using the notebook found in the following link: Validation Notebook . Alternatively, you can run the following SQL to check your files sizes. You must replace the {schema} value with the schema that you stored the tables in. WITH TABLES ( TABLE_NAME , EXPECTED_ROWS , ACTUAL_ROWS ) AS ( SELECT 'AGGR_TIME_PROD_OM_FACT' , 1867 , count ( * ) from iceberg_data . { schema } . AGGR_TIME_PROD_OM_FACT UNION ALL SELECT 'BURST_TABLE' , 3 , count ( * ) from iceberg_data . { schema } . BURST_TABLE UNION ALL SELECT 'BURST_TABLE2' , 4 , count ( * ) from iceberg_data . { schema } . BURST_TABLE2 UNION ALL SELECT 'DIST_INVENTORY_FACT' , 53837 , count ( * ) from iceberg_data . { schema } . DIST_INVENTORY_FACT UNION ALL SELECT 'DIST_PRODUCT_FORECAST_FACT' , 129096 , count ( * ) from iceberg_data . { schema } . DIST_PRODUCT_FORECAST_FACT UNION ALL SELECT 'DIST_RETURNED_ITEMS_FACT' , 10249 , count ( * ) from iceberg_data . { schema } . DIST_RETURNED_ITEMS_FACT UNION ALL SELECT 'DIST_RETURN_REASON_DIM' , 5 , count ( * ) from iceberg_data . { schema } . DIST_RETURN_REASON_DIM UNION ALL SELECT 'EMP_EMPLOYEE_DIM' , 972 , count ( * ) from iceberg_data . { schema } . EMP_EMPLOYEE_DIM UNION ALL SELECT 'EMP_EXPENSE_FACT' , 127984 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_FACT UNION ALL SELECT 'EMP_EXPENSE_PLAN_FACT' , 30150 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_PLAN_FACT UNION ALL SELECT 'EMP_EXPENSE_TYPE_DIM' , 39 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_TYPE_DIM UNION ALL SELECT 'EMP_EXPENSE_UNIT_LOOKUP' , 3 , count ( * ) from iceberg_data . { schema } . EMP_EXPENSE_UNIT_LOOKUP UNION ALL SELECT 'EMP_POSITION_DIM' , 57 , count ( * ) from iceberg_data . { schema } . EMP_POSITION_DIM UNION ALL SELECT 'EMP_POSITION_LOOKUP' , 57 , count ( * ) from iceberg_data . { schema } . EMP_POSITION_LOOKUP UNION ALL SELECT 'EMP_POSITION_SUMMARY_FACT' , 15050 , count ( * ) from iceberg_data . { schema } . EMP_POSITION_SUMMARY_FACT UNION ALL SELECT 'EMP_RANKING_DIM' , 5 , count ( * ) from iceberg_data . { schema } . EMP_RANKING_DIM UNION ALL SELECT 'EMP_RANKING_FACT' , 1897 , count ( * ) from iceberg_data . { schema } . EMP_RANKING_FACT UNION ALL SELECT 'EMP_RECRUITMENT_DIM' , 14 , count ( * ) from iceberg_data . { schema } . EMP_RECRUITMENT_DIM UNION ALL SELECT 'EMP_RECRUITMENT_FACT' , 416 , count ( * ) from iceberg_data . { schema } . EMP_RECRUITMENT_FACT UNION ALL SELECT 'EMP_RECRUITMENT_LEAD_FACT' , 4171 , count ( * ) from iceberg_data . { schema } . EMP_RECRUITMENT_LEAD_FACT UNION ALL SELECT 'EMP_SUCCESSION_FACT' , 181 , count ( * ) from iceberg_data . { schema } . EMP_SUCCESSION_FACT UNION ALL SELECT 'EMP_SUCCESSION_STATUS_DIM' , 5 , count ( * ) from iceberg_data . { schema } . EMP_SUCCESSION_STATUS_DIM UNION ALL SELECT 'EMP_SUMMARY_FACT' , 24233 , count ( * ) from iceberg_data . { schema } . EMP_SUMMARY_FACT UNION ALL SELECT 'EMP_SURVEY_FACT' , 5725 , count ( * ) from iceberg_data . { schema } . EMP_SURVEY_FACT UNION ALL SELECT 'EMP_SURVEY_TARG_FACT' , 20 , count ( * ) from iceberg_data . { schema } . EMP_SURVEY_TARG_FACT UNION ALL SELECT 'EMP_SURVEY_TOPIC_DIM' , 5 , count ( * ) from iceberg_data . { schema } . EMP_SURVEY_TOPIC_DIM UNION ALL SELECT 'EMP_TERMINATION_LOOKUP' , 6 , count ( * ) from iceberg_data . { schema } . EMP_TERMINATION_LOOKUP UNION ALL SELECT 'EMP_TRAINING_DIM' , 42 , count ( * ) from iceberg_data . { schema } . EMP_TRAINING_DIM UNION ALL SELECT 'EMP_TRAINING_FACT' , 4465 , count ( * ) from iceberg_data . { schema } . EMP_TRAINING_FACT UNION ALL SELECT 'FIN_ACCOUNT_CLASS_LOOKUP' , 5 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_CLASS_LOOKUP UNION ALL SELECT 'FIN_ACCOUNT_DIM' , 242 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_DIM UNION ALL SELECT 'FIN_ACCOUNT_NAME_LOOKUP' , 242 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_NAME_LOOKUP UNION ALL SELECT 'FIN_ACCOUNT_TYPE_LOOKUP' , 4 , count ( * ) from iceberg_data . { schema } . FIN_ACCOUNT_TYPE_LOOKUP UNION ALL SELECT 'FIN_FINANCE_FACT' , 164132 , count ( * ) from iceberg_data . { schema } . FIN_FINANCE_FACT UNION ALL SELECT 'FIN_SUBM_CURRENCY_LOOKUP' , 7 , count ( * ) from iceberg_data . { schema } . FIN_SUBM_CURRENCY_LOOKUP UNION ALL SELECT 'FIN_SUBM_DIM' , 52 , count ( * ) from iceberg_data . { schema } . FIN_SUBM_DIM UNION ALL SELECT 'FIN_SUBM_TYPE_LOOKUP' , 3 , count ( * ) from iceberg_data . { schema } . FIN_SUBM_TYPE_LOOKUP UNION ALL SELECT 'GO_BRANCH_DIM' , 29 , count ( * ) from iceberg_data . { schema } . GO_BRANCH_DIM UNION ALL SELECT 'GO_GENDER_LOOKUP' , 2 , count ( * ) from iceberg_data . { schema } . GO_GENDER_LOOKUP UNION ALL SELECT 'GO_ORG_DIM' , 123 , count ( * ) from iceberg_data . { schema } . GO_ORG_DIM UNION ALL SELECT 'GO_ORG_NAME_LOOKUP' , 123 , count ( * ) from iceberg_data . { schema } . GO_ORG_NAME_LOOKUP UNION ALL SELECT 'GO_REGION_DIM' , 21 , count ( * ) from iceberg_data . { schema } . GO_REGION_DIM UNION ALL SELECT 'GO_SATISFACTION_DIM' , 5 , count ( * ) from iceberg_data . { schema } . GO_SATISFACTION_DIM UNION ALL SELECT 'GO_TIME_DIM' , 1465 , count ( * ) from iceberg_data . { schema } . GO_TIME_DIM UNION ALL SELECT 'GO_TIME_QUARTER_LOOKUP' , 20 , count ( * ) from iceberg_data . { schema } . GO_TIME_QUARTER_LOOKUP UNION ALL SELECT 'MRK_ACTIVITY_STATUS_DIM' , 2 , count ( * ) from iceberg_data . { schema } . MRK_ACTIVITY_STATUS_DIM UNION ALL SELECT 'MRK_ADV_FACT' , 576 , count ( * ) from iceberg_data . { schema } . MRK_ADV_FACT UNION ALL SELECT 'MRK_BUNDLE_GROUP_LOOKUP' , 15 , count ( * ) from iceberg_data . { schema } . MRK_BUNDLE_GROUP_LOOKUP UNION ALL SELECT 'MRK_CAMPAIGN_LOOKUP' , 12 , count ( * ) from iceberg_data . { schema } . MRK_CAMPAIGN_LOOKUP UNION ALL SELECT 'MRK_PRODUCT_SURVEY_DIM' , 7 , count ( * ) from iceberg_data . { schema } . MRK_PRODUCT_SURVEY_DIM UNION ALL SELECT 'MRK_PRODUCT_SURVEY_FACT' , 165074 , count ( * ) from iceberg_data . { schema } . MRK_PRODUCT_SURVEY_FACT UNION ALL SELECT 'MRK_PROD_SURVEY_TARG_FACT' , 5824 , count ( * ) from iceberg_data . { schema } . MRK_PROD_SURVEY_TARG_FACT UNION ALL SELECT 'MRK_PROMOTION_DIM' , 112 , count ( * ) from iceberg_data . { schema } . MRK_PROMOTION_DIM UNION ALL SELECT 'MRK_PROMOTION_FACT' , 11034 , count ( * ) from iceberg_data . { schema } . MRK_PROMOTION_FACT UNION ALL SELECT 'MRK_PROMOTION_PLAN_FACT' , 8652 , count ( * ) from iceberg_data . { schema } . MRK_PROMOTION_PLAN_FACT UNION ALL SELECT 'MRK_RTL_SURVEY_DIM' , 9 , count ( * ) from iceberg_data . { schema } . MRK_RTL_SURVEY_DIM UNION ALL SELECT 'MRK_RTL_SURVEY_FACT' , 22508 , count ( * ) from iceberg_data . { schema } . MRK_RTL_SURVEY_FACT UNION ALL SELECT 'MRK_RTL_SURVEY_TARG_FACT' , 64 , count ( * ) from iceberg_data . { schema } . MRK_RTL_SURVEY_TARG_FACT UNION ALL SELECT 'SLS_ORDER_METHOD_DIM' , 7 , count ( * ) from iceberg_data . { schema } . SLS_ORDER_METHOD_DIM UNION ALL SELECT 'SLS_PRODUCT_BRAND_LOOKUP' , 28 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_BRAND_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_COLOR_LOOKUP' , 27 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_COLOR_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_DIM' , 274 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_DIM UNION ALL SELECT 'SLS_PRODUCT_LINE_LOOKUP' , 5 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_LINE_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_LOOKUP' , 7946 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_SIZE_LOOKUP' , 55 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_SIZE_LOOKUP UNION ALL SELECT 'SLS_PRODUCT_TYPE_LOOKUP' , 21 , count ( * ) from iceberg_data . { schema } . SLS_PRODUCT_TYPE_LOOKUP UNION ALL SELECT 'SLS_RTL_DIM' , 847 , count ( * ) from iceberg_data . { schema } . SLS_RTL_DIM UNION ALL SELECT 'SLS_SALES_FACT' , 446023 , count ( * ) from iceberg_data . { schema } . SLS_SALES_FACT UNION ALL SELECT 'SLS_SALES_ORDER_DIM' , 446023 , count ( * ) from iceberg_data . { schema } . SLS_SALES_ORDER_DIM UNION ALL SELECT 'SLS_SALES_TARG_FACT' , 233625 , count ( * ) from iceberg_data . { schema } . SLS_SALES_TARG_FACT UNION ALL SELECT 'XGOREVDW' , 58 , count ( * ) from iceberg_data . { schema } . XGOREVDW ) SELECT TABLE_NAME , IF ( EXPECTED_ROWS - ACTUAL_ROWS = 0 , 'OK' , 'ERROR' ) AS STATUS , EXPECTED_ROWS , ACTUAL_ROWS FROM TABLES ORDER BY TABLE_NAME ASC ;","title":"Appendix F - Database Validation"},{"location":"watsons-database/","text":"Appendix B - Database and Table Size Information The storage used in the current data warehouse environment reports below. Database Size | Bytes | KB | MB -----------+----------------------------------+---------------------- total size | 605,290,496 | 591,104 | 577 Table Sizes Name | Bytes | KB | MB -------------------------------+----------------+-------------+------- AGGR_TIME_PROD_OM_FACT | 15,728,640 | 15,360 | 15 BURST_TABLE | 393,216 | 384 | 0 BURST_TABLE2 | 524,288 | 512 | 1 DIST_INVENTORY_FACT | 15,728,640 | 15,360 | 15 DIST_PRODUCT_FORECAST_FACT | 15,728,640 | 15,360 | 15 DIST_RETURNED_ITEMS_FACT | 15,728,640 | 15,360 | 15 DIST_RETURN_REASON_DIM | 655,360 | 640 | 1 EMP_EMPLOYEE_DIM | 15,728,640 | 15,360 | 15 EMP_EXPENSE_FACT | 15,728,640 | 15,360 | 15 EMP_EXPENSE_PLAN_FACT | 15,728,640 | 15,360 | 15 EMP_EXPENSE_TYPE_DIM | 4,456,448 | 4,352 | 4 EMP_EXPENSE_UNIT_LOOKUP | 393,216 | 384 | 0 EMP_POSITION_DIM | 6,422,528 | 6,272 | 6 EMP_POSITION_LOOKUP | 5,636,096 | 5,504 | 5 EMP_POSITION_SUMMARY_FACT | 15,728,640 | 15,360 | 15 EMP_RANKING_DIM | 655,360 | 640 | 1 EMP_RANKING_FACT | 15,728,640 | 15,360 | 15 EMP_RECRUITMENT_DIM | 1,835,008 | 1,792 | 2 EMP_RECRUITMENT_FACT | 15,204,352 | 14,848 | 15 EMP_RECRUITMENT_LEAD_FACT | 15,728,640 | 15,360 | 15 EMP_SUCCESSION_FACT | 11,141,120 | 10,880 | 11 EMP_SUCCESSION_STATUS_DIM | 655,360 | 640 | 1 EMP_SUMMARY_FACT | 15,728,640 | 15,360 | 15 EMP_SURVEY_FACT | 15,728,640 | 15,360 | 15 EMP_SURVEY_TARG_FACT | 2,490,368 | 2,432 | 2 EMP_SURVEY_TOPIC_DIM | 524,288 | 512 | 1 EMP_TERMINATION_LOOKUP | 786,432 | 768 | 1 EMP_TRAINING_DIM | 4,980,736 | 4,864 | 5 EMP_TRAINING_FACT | 15,728,640 | 15,360 | 15 FIN_ACCOUNT_CLASS_LOOKUP | 655,360 | 640 | 1 FIN_ACCOUNT_DIM | 13,631,488 | 13,312 | 13 FIN_ACCOUNT_NAME_LOOKUP | 13,762,560 | 13,440 | 13 FIN_ACCOUNT_TYPE_LOOKUP | 524,288 | 512 | 1 FIN_FINANCE_FACT | 15,728,640 | 15,360 | 15 FIN_SUBM_CURRENCY_LOOKUP | 917,504 | 896 | 1 FIN_SUBM_DIM | 5,242,880 | 5,120 | 5 FIN_SUBM_TYPE_LOOKUP | 393,216 | 384 | 0 GO_BRANCH_DIM | 3,145,728 | 3,072 | 3 GO_GENDER_LOOKUP | 262,144 | 256 | 0 GO_ORG_DIM | 10,223,616 | 9,984 | 10 GO_ORG_NAME_LOOKUP | 10,354,688 | 10,112 | 10 GO_REGION_DIM | 2,752,512 | 2,688 | 3 GO_SATISFACTION_DIM | 655,360 | 640 | 1 GO_TIME_DIM | 15,728,640 | 15,360 | 15 GO_TIME_QUARTER_LOOKUP | 2,359,296 | 2,304 | 2 MRK_ACTIVITY_STATUS_DIM | 262,144 | 256 | 0 MRK_ADV_FACT | 15,728,640 | 15,360 | 15 MRK_BUNDLE_GROUP_LOOKUP | 1,835,008 | 1,792 | 2 MRK_CAMPAIGN_LOOKUP | 1,441,792 | 1,408 | 1 MRK_PRODUCT_SURVEY_DIM | 917,504 | 896 | 1 MRK_PRODUCT_SURVEY_FACT | 15,728,640 | 15,360 | 15 MRK_PROD_SURVEY_TARG_FACT | 15,728,640 | 15,360 | 15 MRK_PROMOTION_DIM | 9,961,472 | 9,728 | 10 MRK_PROMOTION_FACT | 15,728,640 | 15,360 | 15 MRK_PROMOTION_PLAN_FACT | 15,728,640 | 15,360 | 15 MRK_RTL_SURVEY_DIM | 1,179,648 | 1,152 | 1 MRK_RTL_SURVEY_FACT | 15,728,640 | 15,360 | 15 MRK_RTL_SURVEY_TARG_FACT | 6,160,384 | 6,016 | 6 SLS_ORDER_METHOD_DIM | 917,504 | 896 | 1 SLS_PRODUCT_BRAND_LOOKUP | 3,145,728 | 3,072 | 3 SLS_PRODUCT_COLOR_LOOKUP | 3,014,656 | 2,944 | 3 SLS_PRODUCT_DIM | 14,811,136 | 14,464 | 14 SLS_PRODUCT_LINE_LOOKUP | 655,360 | 640 | 1 SLS_PRODUCT_LOOKUP | 15,728,640 | 15,360 | 15 SLS_PRODUCT_SIZE_LOOKUP | 5,767,168 | 5,632 | 6 SLS_PRODUCT_TYPE_LOOKUP | 2,752,512 | 2,688 | 3 SLS_RTL_DIM | 15,728,640 | 15,360 | 15 SLS_SALES_FACT | 31,457,280 | 30,720 | 30 SLS_SALES_ORDER_DIM | 15,728,640 | 15,360 | 15 SLS_SALES_TARG_FACT | 15,728,640 | 15,360 | 15 XGOREVDW | 6,160,384 | 6,016 | 6","title":"Database and Table Sizes"},{"location":"watsons-database/#appendix-b-database-and-table-size-information","text":"The storage used in the current data warehouse environment reports below.","title":"Appendix B - Database and Table Size Information"},{"location":"watsons-database/#database-size","text":"| Bytes | KB | MB -----------+----------------------------------+---------------------- total size | 605,290,496 | 591,104 | 577","title":"Database Size"},{"location":"watsons-database/#table-sizes","text":"Name | Bytes | KB | MB -------------------------------+----------------+-------------+------- AGGR_TIME_PROD_OM_FACT | 15,728,640 | 15,360 | 15 BURST_TABLE | 393,216 | 384 | 0 BURST_TABLE2 | 524,288 | 512 | 1 DIST_INVENTORY_FACT | 15,728,640 | 15,360 | 15 DIST_PRODUCT_FORECAST_FACT | 15,728,640 | 15,360 | 15 DIST_RETURNED_ITEMS_FACT | 15,728,640 | 15,360 | 15 DIST_RETURN_REASON_DIM | 655,360 | 640 | 1 EMP_EMPLOYEE_DIM | 15,728,640 | 15,360 | 15 EMP_EXPENSE_FACT | 15,728,640 | 15,360 | 15 EMP_EXPENSE_PLAN_FACT | 15,728,640 | 15,360 | 15 EMP_EXPENSE_TYPE_DIM | 4,456,448 | 4,352 | 4 EMP_EXPENSE_UNIT_LOOKUP | 393,216 | 384 | 0 EMP_POSITION_DIM | 6,422,528 | 6,272 | 6 EMP_POSITION_LOOKUP | 5,636,096 | 5,504 | 5 EMP_POSITION_SUMMARY_FACT | 15,728,640 | 15,360 | 15 EMP_RANKING_DIM | 655,360 | 640 | 1 EMP_RANKING_FACT | 15,728,640 | 15,360 | 15 EMP_RECRUITMENT_DIM | 1,835,008 | 1,792 | 2 EMP_RECRUITMENT_FACT | 15,204,352 | 14,848 | 15 EMP_RECRUITMENT_LEAD_FACT | 15,728,640 | 15,360 | 15 EMP_SUCCESSION_FACT | 11,141,120 | 10,880 | 11 EMP_SUCCESSION_STATUS_DIM | 655,360 | 640 | 1 EMP_SUMMARY_FACT | 15,728,640 | 15,360 | 15 EMP_SURVEY_FACT | 15,728,640 | 15,360 | 15 EMP_SURVEY_TARG_FACT | 2,490,368 | 2,432 | 2 EMP_SURVEY_TOPIC_DIM | 524,288 | 512 | 1 EMP_TERMINATION_LOOKUP | 786,432 | 768 | 1 EMP_TRAINING_DIM | 4,980,736 | 4,864 | 5 EMP_TRAINING_FACT | 15,728,640 | 15,360 | 15 FIN_ACCOUNT_CLASS_LOOKUP | 655,360 | 640 | 1 FIN_ACCOUNT_DIM | 13,631,488 | 13,312 | 13 FIN_ACCOUNT_NAME_LOOKUP | 13,762,560 | 13,440 | 13 FIN_ACCOUNT_TYPE_LOOKUP | 524,288 | 512 | 1 FIN_FINANCE_FACT | 15,728,640 | 15,360 | 15 FIN_SUBM_CURRENCY_LOOKUP | 917,504 | 896 | 1 FIN_SUBM_DIM | 5,242,880 | 5,120 | 5 FIN_SUBM_TYPE_LOOKUP | 393,216 | 384 | 0 GO_BRANCH_DIM | 3,145,728 | 3,072 | 3 GO_GENDER_LOOKUP | 262,144 | 256 | 0 GO_ORG_DIM | 10,223,616 | 9,984 | 10 GO_ORG_NAME_LOOKUP | 10,354,688 | 10,112 | 10 GO_REGION_DIM | 2,752,512 | 2,688 | 3 GO_SATISFACTION_DIM | 655,360 | 640 | 1 GO_TIME_DIM | 15,728,640 | 15,360 | 15 GO_TIME_QUARTER_LOOKUP | 2,359,296 | 2,304 | 2 MRK_ACTIVITY_STATUS_DIM | 262,144 | 256 | 0 MRK_ADV_FACT | 15,728,640 | 15,360 | 15 MRK_BUNDLE_GROUP_LOOKUP | 1,835,008 | 1,792 | 2 MRK_CAMPAIGN_LOOKUP | 1,441,792 | 1,408 | 1 MRK_PRODUCT_SURVEY_DIM | 917,504 | 896 | 1 MRK_PRODUCT_SURVEY_FACT | 15,728,640 | 15,360 | 15 MRK_PROD_SURVEY_TARG_FACT | 15,728,640 | 15,360 | 15 MRK_PROMOTION_DIM | 9,961,472 | 9,728 | 10 MRK_PROMOTION_FACT | 15,728,640 | 15,360 | 15 MRK_PROMOTION_PLAN_FACT | 15,728,640 | 15,360 | 15 MRK_RTL_SURVEY_DIM | 1,179,648 | 1,152 | 1 MRK_RTL_SURVEY_FACT | 15,728,640 | 15,360 | 15 MRK_RTL_SURVEY_TARG_FACT | 6,160,384 | 6,016 | 6 SLS_ORDER_METHOD_DIM | 917,504 | 896 | 1 SLS_PRODUCT_BRAND_LOOKUP | 3,145,728 | 3,072 | 3 SLS_PRODUCT_COLOR_LOOKUP | 3,014,656 | 2,944 | 3 SLS_PRODUCT_DIM | 14,811,136 | 14,464 | 14 SLS_PRODUCT_LINE_LOOKUP | 655,360 | 640 | 1 SLS_PRODUCT_LOOKUP | 15,728,640 | 15,360 | 15 SLS_PRODUCT_SIZE_LOOKUP | 5,767,168 | 5,632 | 6 SLS_PRODUCT_TYPE_LOOKUP | 2,752,512 | 2,688 | 3 SLS_RTL_DIM | 15,728,640 | 15,360 | 15 SLS_SALES_FACT | 31,457,280 | 30,720 | 30 SLS_SALES_ORDER_DIM | 15,728,640 | 15,360 | 15 SLS_SALES_TARG_FACT | 15,728,640 | 15,360 | 15 XGOREVDW | 6,160,384 | 6,016 | 6","title":"Table Sizes"},{"location":"watsons-fileinfo/","text":"Appendix A - File Information The files to be loaded into the data lakehouse can be accessed from the following Cloud Object Store. File Location The data to load into the tables can also be found in the following URLs: Pipe delimited: Watsons Go Pipe Data CSV delimited: Watsons Go CSV Data If you want to load the data directly in your virtual machine, use either of the following commands in a terminal shell. Change the name of the output file with the -O option. Pipe Delimited wget https://ibm.github.io/watsonx-data-poc/wxd-files/watsons-go-pocdata.tar.gz -O pocdata.tar.gz CSV Delimited wget https://ibm.github.io/watsonx-data-poc/wxd-files/watsons-go-pocdata-csv.tar.gz -O pocdata.tar.gz File Sizes File Name Size Rowcount =============================== ======== ======== AGGR_TIME_PROD_OM_FACT.psv 94024 1,867 BURST_TABLE.psv 64 3 BURST_TABLE2.psv 228 4 DIST_INVENTORY_FACT.psv 4568597 53,837 DIST_PRODUCT_FORECAST_FACT.psv 8895313 129,096 DIST_RETURNED_ITEMS_FACT.psv 564113 10,249 DIST_RETURN_REASON_DIM.psv 3594 5 EMP_EMPLOYEE_DIM.psv 561640 972 EMP_EXPENSE_FACT.psv 10366704 127,984 EMP_EXPENSE_PLAN_FACT.psv 1417050 30,150 EMP_EXPENSE_TYPE_DIM.psv 35556 39 EMP_EXPENSE_UNIT_LOOKUP.psv 994 3 EMP_POSITION_DIM.psv 4266 57 EMP_POSITION_LOOKUP.psv 42286 57 EMP_POSITION_SUMMARY_FACT.psv 466818 15,050 EMP_RANKING_DIM.psv 1601 5 EMP_RANKING_FACT.psv 62601 1,897 EMP_RECRUITMENT_DIM.psv 16258 14 EMP_RECRUITMENT_FACT.psv 46412 416 EMP_RECRUITMENT_LEAD_FACT.psv 138049 4,171 EMP_SUCCESSION_FACT.psv 16109 181 EMP_SUCCESSION_STATUS_DIM.psv 2259 5 EMP_SUMMARY_FACT.psv 3392620 24,233 EMP_SURVEY_FACT.psv 303425 5,725 EMP_SURVEY_TARG_FACT.psv 1160 20 EMP_SURVEY_TOPIC_DIM.psv 3259 5 EMP_TERMINATION_LOOKUP.psv 2987 6 EMP_TRAINING_DIM.psv 33517 42 EMP_TRAINING_FACT.psv 366130 4,465 FIN_ACCOUNT_CLASS_LOOKUP.psv 3434 5 FIN_ACCOUNT_DIM.psv 41231 242 FIN_ACCOUNT_NAME_LOOKUP.psv 272720 242 FIN_ACCOUNT_TYPE_LOOKUP.psv 4915 4 FIN_FINANCE_FACT.psv 10832712 164,132 FIN_SUBM_CURRENCY_LOOKUP.psv 4255 7 FIN_SUBM_DIM.psv 75250 52 FIN_SUBM_TYPE_LOOKUP.psv 1734 3 GO_BRANCH_DIM.psv 2889 29 GO_GENDER_LOOKUP.psv 456 2 GO_ORG_DIM.psv 5682 123 GO_ORG_NAME_LOOKUP.psv 95891 123 GO_REGION_DIM.psv 17402 21 GO_SATISFACTION_DIM.psv 2856 5 GO_TIME_DIM.psv 905124 1,465 GO_TIME_QUARTER_LOOKUP.psv 4836 20 MRK_ACTIVITY_STATUS_DIM.psv 624 2 MRK_ADV_FACT.psv 96336 576 MRK_BUNDLE_GROUP_LOOKUP.psv 9742 15 MRK_CAMPAIGN_LOOKUP.psv 7819 12 MRK_PRODUCT_SURVEY_DIM.psv 3341 7 MRK_PRODUCT_SURVEY_FACT.psv 9574292 165,074 MRK_PROD_SURVEY_TARG_FACT.psv 238784 5,824 MRK_PROMOTION_DIM.psv 103522 112 MRK_PROMOTION_FACT.psv 2049566 11,034 MRK_PROMOTION_PLAN_FACT.psv 1098560 8,652 MRK_RTL_SURVEY_DIM.psv 6115 9 MRK_RTL_SURVEY_FACT.psv 1282956 22,508 MRK_RTL_SURVEY_TARG_FACT.psv 2370 64 SLS_ORDER_METHOD_DIM.psv 2148 7 SLS_PRODUCT_BRAND_LOOKUP.psv 8056 28 SLS_PRODUCT_COLOR_LOOKUP.psv 7867 27 SLS_PRODUCT_DIM.psv 25619 274 SLS_PRODUCT_LINE_LOOKUP.psv 3359 5 SLS_PRODUCT_LOOKUP.psv 1456961 7,946 SLS_PRODUCT_SIZE_LOOKUP.psv 15110 55 SLS_PRODUCT_TYPE_LOOKUP.psv 8618 21 SLS_RTL_DIM.psv 1329296 847 SLS_SALES_FACT.psv 92047785 446,023 SLS_SALES_ORDER_DIM.psv 11133505 446,023 SLS_SALES_TARG_FACT.psv 13783875 233,625 XGOREVDW.psv 10562 58","title":"File Information"},{"location":"watsons-fileinfo/#appendix-a-file-information","text":"The files to be loaded into the data lakehouse can be accessed from the following Cloud Object Store.","title":"Appendix A - File Information"},{"location":"watsons-fileinfo/#file-location","text":"The data to load into the tables can also be found in the following URLs: Pipe delimited: Watsons Go Pipe Data CSV delimited: Watsons Go CSV Data If you want to load the data directly in your virtual machine, use either of the following commands in a terminal shell. Change the name of the output file with the -O option.","title":"File Location"},{"location":"watsons-fileinfo/#pipe-delimited","text":"wget https://ibm.github.io/watsonx-data-poc/wxd-files/watsons-go-pocdata.tar.gz -O pocdata.tar.gz","title":"Pipe Delimited"},{"location":"watsons-fileinfo/#csv-delimited","text":"wget https://ibm.github.io/watsonx-data-poc/wxd-files/watsons-go-pocdata-csv.tar.gz -O pocdata.tar.gz","title":"CSV Delimited"},{"location":"watsons-fileinfo/#file-sizes","text":"File Name Size Rowcount =============================== ======== ======== AGGR_TIME_PROD_OM_FACT.psv 94024 1,867 BURST_TABLE.psv 64 3 BURST_TABLE2.psv 228 4 DIST_INVENTORY_FACT.psv 4568597 53,837 DIST_PRODUCT_FORECAST_FACT.psv 8895313 129,096 DIST_RETURNED_ITEMS_FACT.psv 564113 10,249 DIST_RETURN_REASON_DIM.psv 3594 5 EMP_EMPLOYEE_DIM.psv 561640 972 EMP_EXPENSE_FACT.psv 10366704 127,984 EMP_EXPENSE_PLAN_FACT.psv 1417050 30,150 EMP_EXPENSE_TYPE_DIM.psv 35556 39 EMP_EXPENSE_UNIT_LOOKUP.psv 994 3 EMP_POSITION_DIM.psv 4266 57 EMP_POSITION_LOOKUP.psv 42286 57 EMP_POSITION_SUMMARY_FACT.psv 466818 15,050 EMP_RANKING_DIM.psv 1601 5 EMP_RANKING_FACT.psv 62601 1,897 EMP_RECRUITMENT_DIM.psv 16258 14 EMP_RECRUITMENT_FACT.psv 46412 416 EMP_RECRUITMENT_LEAD_FACT.psv 138049 4,171 EMP_SUCCESSION_FACT.psv 16109 181 EMP_SUCCESSION_STATUS_DIM.psv 2259 5 EMP_SUMMARY_FACT.psv 3392620 24,233 EMP_SURVEY_FACT.psv 303425 5,725 EMP_SURVEY_TARG_FACT.psv 1160 20 EMP_SURVEY_TOPIC_DIM.psv 3259 5 EMP_TERMINATION_LOOKUP.psv 2987 6 EMP_TRAINING_DIM.psv 33517 42 EMP_TRAINING_FACT.psv 366130 4,465 FIN_ACCOUNT_CLASS_LOOKUP.psv 3434 5 FIN_ACCOUNT_DIM.psv 41231 242 FIN_ACCOUNT_NAME_LOOKUP.psv 272720 242 FIN_ACCOUNT_TYPE_LOOKUP.psv 4915 4 FIN_FINANCE_FACT.psv 10832712 164,132 FIN_SUBM_CURRENCY_LOOKUP.psv 4255 7 FIN_SUBM_DIM.psv 75250 52 FIN_SUBM_TYPE_LOOKUP.psv 1734 3 GO_BRANCH_DIM.psv 2889 29 GO_GENDER_LOOKUP.psv 456 2 GO_ORG_DIM.psv 5682 123 GO_ORG_NAME_LOOKUP.psv 95891 123 GO_REGION_DIM.psv 17402 21 GO_SATISFACTION_DIM.psv 2856 5 GO_TIME_DIM.psv 905124 1,465 GO_TIME_QUARTER_LOOKUP.psv 4836 20 MRK_ACTIVITY_STATUS_DIM.psv 624 2 MRK_ADV_FACT.psv 96336 576 MRK_BUNDLE_GROUP_LOOKUP.psv 9742 15 MRK_CAMPAIGN_LOOKUP.psv 7819 12 MRK_PRODUCT_SURVEY_DIM.psv 3341 7 MRK_PRODUCT_SURVEY_FACT.psv 9574292 165,074 MRK_PROD_SURVEY_TARG_FACT.psv 238784 5,824 MRK_PROMOTION_DIM.psv 103522 112 MRK_PROMOTION_FACT.psv 2049566 11,034 MRK_PROMOTION_PLAN_FACT.psv 1098560 8,652 MRK_RTL_SURVEY_DIM.psv 6115 9 MRK_RTL_SURVEY_FACT.psv 1282956 22,508 MRK_RTL_SURVEY_TARG_FACT.psv 2370 64 SLS_ORDER_METHOD_DIM.psv 2148 7 SLS_PRODUCT_BRAND_LOOKUP.psv 8056 28 SLS_PRODUCT_COLOR_LOOKUP.psv 7867 27 SLS_PRODUCT_DIM.psv 25619 274 SLS_PRODUCT_LINE_LOOKUP.psv 3359 5 SLS_PRODUCT_LOOKUP.psv 1456961 7,946 SLS_PRODUCT_SIZE_LOOKUP.psv 15110 55 SLS_PRODUCT_TYPE_LOOKUP.psv 8618 21 SLS_RTL_DIM.psv 1329296 847 SLS_SALES_FACT.psv 92047785 446,023 SLS_SALES_ORDER_DIM.psv 11133505 446,023 SLS_SALES_TARG_FACT.psv 13783875 233,625 XGOREVDW.psv 10562 58","title":"File Sizes"},{"location":"watsons-introduction/","text":"Introduction Purpose The purpose of this document is to outline the requirements for a proof-of-concept (PoC) for migrating workload and data from a traditional data warehouse to a data lakehouse architecture for Watson's Great Outdoors Company. Watson's Great Outdoors Company will be referred to as WGO or GO in this document. Scope This PoC will focus on validating the feasibility and benefits of migrating workload and data from the existing data warehouse to a data lakehouse. The scope includes understanding data migration processes, workload adaptation, and assessing the overall performance and scalability of the proposed solution. Company Information Watson's Great Outdoors is a leading provider of high-quality outdoor equipment, dedicated to enhancing outdoor experiences for adventure enthusiasts. With a strong emphasis on sales, we offer a diverse range of products tailored to meet the needs of outdoor enthusiasts, including Camping Equipment, Mountaineering Equipment, Personal Accessories, Outdoor Protection, and Golf Equipment. Our commitment to quality ensures that customers can trust in the durability and reliability of our products for their outdoor pursuits. At Watson's Great Outdoors, we strive to be the go-to destination for individuals seeking top-notch outdoor gear, providing unmatched service and expertise to make every outdoor adventure memorable. Distinct Product Collection : GO Accessories boasts its own exclusive collection of products, setting itself apart from the other GO companies. This differentiation is achieved through unique brand identities, names, pricing strategies, color variations, and size options, offering customers a diverse and specialized range of outdoor goods. Single Branch Sales : Unlike the regionally based GO companies, GO Accessories operates from a single branch. However, its reach extends beyond regional boundaries, serving customers across all regions and retailers. This strategic approach allows for a centralized point of sale while catering to a broad customer base. Dual Functionality : GO Accessories functions both as an operating company based in Geneva and as a part owner of three GO subsidiaries in Europe. This dual role positions GO Accessories as a key player in the overall operations of The Sample Outdoors Company, contributing not only to its own success but also playing a significant role in the success of the European subsidiaries. This structure reflects the versatility and strategic positioning of GO Accessories within the larger framework of Watson's Great Outdoors Company. By offering a unique product line, operating from a centralized location, and participating in ownership stakes across regions, GO Accessories plays a pivotal role in the company's overall revenue generation and market presence. The following diagram illustrates the consolidated corporate structure of Watson's Great Outdoors Company. The diagram also includes the percentage changes in ownership for GO Central Europe, and the reporting currency and GL (general ledger) prefix for each subsidiary. In year 1, GO Asia Pacific owns 60% of GO Central Europe, and in year 3, its ownership decreases to 50%. In year 1, GO Accessories owns 40% of GO Central Europe, and in year 3 its ownership increases to 50%. Each corporation in Watson's Great Outdoors Company has the same departmental structure and the same general ledger (GL) structure, as shown in the following table. Divisions may not report in the same currencies. For example, the Americas subsidiary reports in US dollars, but the corporate division local currency reports in Canadian dollars, and the Operations division local currency is pesos. Division (GL) Department (GL) Corporate (1700) Sales (1720) Marketing (1750) IS&T (1760) Human Resources (1730) Finance (1740) Procurement (1710) Operations (1800) Production and Distribution (1820) Customer Service (1820) Table 1. Departmental structure Each corporation has a complete chart of accounts. Most of the accounts, such as those under non-personnel expenses, are at the department level, and contain only summary amounts. For example, although each marketing department has expenses, the cost is unspecified at the transaction level where marketing promotions occur.","title":"Introduction"},{"location":"watsons-introduction/#introduction","text":"","title":"Introduction"},{"location":"watsons-introduction/#purpose","text":"The purpose of this document is to outline the requirements for a proof-of-concept (PoC) for migrating workload and data from a traditional data warehouse to a data lakehouse architecture for Watson's Great Outdoors Company. Watson's Great Outdoors Company will be referred to as WGO or GO in this document.","title":"Purpose"},{"location":"watsons-introduction/#scope","text":"This PoC will focus on validating the feasibility and benefits of migrating workload and data from the existing data warehouse to a data lakehouse. The scope includes understanding data migration processes, workload adaptation, and assessing the overall performance and scalability of the proposed solution.","title":"Scope"},{"location":"watsons-introduction/#company-information","text":"Watson's Great Outdoors is a leading provider of high-quality outdoor equipment, dedicated to enhancing outdoor experiences for adventure enthusiasts. With a strong emphasis on sales, we offer a diverse range of products tailored to meet the needs of outdoor enthusiasts, including Camping Equipment, Mountaineering Equipment, Personal Accessories, Outdoor Protection, and Golf Equipment. Our commitment to quality ensures that customers can trust in the durability and reliability of our products for their outdoor pursuits. At Watson's Great Outdoors, we strive to be the go-to destination for individuals seeking top-notch outdoor gear, providing unmatched service and expertise to make every outdoor adventure memorable. Distinct Product Collection : GO Accessories boasts its own exclusive collection of products, setting itself apart from the other GO companies. This differentiation is achieved through unique brand identities, names, pricing strategies, color variations, and size options, offering customers a diverse and specialized range of outdoor goods. Single Branch Sales : Unlike the regionally based GO companies, GO Accessories operates from a single branch. However, its reach extends beyond regional boundaries, serving customers across all regions and retailers. This strategic approach allows for a centralized point of sale while catering to a broad customer base. Dual Functionality : GO Accessories functions both as an operating company based in Geneva and as a part owner of three GO subsidiaries in Europe. This dual role positions GO Accessories as a key player in the overall operations of The Sample Outdoors Company, contributing not only to its own success but also playing a significant role in the success of the European subsidiaries. This structure reflects the versatility and strategic positioning of GO Accessories within the larger framework of Watson's Great Outdoors Company. By offering a unique product line, operating from a centralized location, and participating in ownership stakes across regions, GO Accessories plays a pivotal role in the company's overall revenue generation and market presence. The following diagram illustrates the consolidated corporate structure of Watson's Great Outdoors Company. The diagram also includes the percentage changes in ownership for GO Central Europe, and the reporting currency and GL (general ledger) prefix for each subsidiary. In year 1, GO Asia Pacific owns 60% of GO Central Europe, and in year 3, its ownership decreases to 50%. In year 1, GO Accessories owns 40% of GO Central Europe, and in year 3 its ownership increases to 50%. Each corporation in Watson's Great Outdoors Company has the same departmental structure and the same general ledger (GL) structure, as shown in the following table. Divisions may not report in the same currencies. For example, the Americas subsidiary reports in US dollars, but the corporate division local currency reports in Canadian dollars, and the Operations division local currency is pesos. Division (GL) Department (GL) Corporate (1700) Sales (1720) Marketing (1750) IS&T (1760) Human Resources (1730) Finance (1740) Procurement (1710) Operations (1800) Production and Distribution (1820) Customer Service (1820) Table 1. Departmental structure Each corporation has a complete chart of accounts. Most of the accounts, such as those under non-personnel expenses, are at the department level, and contain only summary amounts. For example, although each marketing department has expenses, the cost is unspecified at the transaction level where marketing promotions occur.","title":"Company Information"},{"location":"watsons-jmeter/","text":"Appendix G - JMeter Test Plans The following control files contain the information required to run JMeter tests for the scenarios outlined in the POC document. Info The settings in the testplans below were built for the original data warehouse. You will need to modify the values in the test plan to match your watsonx.data configuration. JMeter Serial Testplan Jmeter Concurrent Testplan","title":"JMeter Test Plan"},{"location":"watsons-jmeter/#appendix-g-jmeter-test-plans","text":"The following control files contain the information required to run JMeter tests for the scenarios outlined in the POC document. Info The settings in the testplans below were built for the original data warehouse. You will need to modify the values in the test plan to match your watsonx.data configuration. JMeter Serial Testplan Jmeter Concurrent Testplan","title":"Appendix G - JMeter Test Plans"},{"location":"watsons-migration/","text":"Migration Requirements The proof-of-concept for this data warehouse modernization has the goal of assessing and demonstrating the feasibility of smoothly migrating data and SQL workloads to a new environment. Schema Migration Schema from existing warehouse will be provided as-is. Convert the data warehouse schema to data lakehouse objects. Provide a copy of the DDL used to build the data lakehouse and document any changes made to the table definitions. Schema Information, Appendix C \u2013 Object Definitions . Data Ingestion Data extracted from existing warehouse tables in the form of comma-separated values file (CSV) will be provided. Establish and document procedures for initial data loading data and demonstrated the methods used. Record the time to load each CSV into the data lakehouse and compare the size of the tables in the lakehouse to the raw files and to the size stored in the existing database. Verify that the number of rows aligns with the information outlined. File information: Appendix A \u2013 File Information . Workload Migration Modify or adapt a set of existing SQL queries to run in the data lakehouse. Ensure compatibility of the provided SQL with the data lakehouse. Document all changes to the SQL. SQL information: Appendix D \u2013 Query Definitions and Timings . Performance Testing Run each query serially and record the time to execute. Concurrency tests to include running multiple query classes in parallel for a duration of time. Additional details in the Testing section .","title":"Migration Requirements"},{"location":"watsons-migration/#migration-requirements","text":"The proof-of-concept for this data warehouse modernization has the goal of assessing and demonstrating the feasibility of smoothly migrating data and SQL workloads to a new environment.","title":"Migration Requirements"},{"location":"watsons-migration/#schema-migration","text":"Schema from existing warehouse will be provided as-is. Convert the data warehouse schema to data lakehouse objects. Provide a copy of the DDL used to build the data lakehouse and document any changes made to the table definitions. Schema Information, Appendix C \u2013 Object Definitions .","title":"Schema Migration"},{"location":"watsons-migration/#data-ingestion","text":"Data extracted from existing warehouse tables in the form of comma-separated values file (CSV) will be provided. Establish and document procedures for initial data loading data and demonstrated the methods used. Record the time to load each CSV into the data lakehouse and compare the size of the tables in the lakehouse to the raw files and to the size stored in the existing database. Verify that the number of rows aligns with the information outlined. File information: Appendix A \u2013 File Information .","title":"Data Ingestion"},{"location":"watsons-migration/#workload-migration","text":"Modify or adapt a set of existing SQL queries to run in the data lakehouse. Ensure compatibility of the provided SQL with the data lakehouse. Document all changes to the SQL. SQL information: Appendix D \u2013 Query Definitions and Timings .","title":"Workload Migration"},{"location":"watsons-migration/#performance-testing","text":"Run each query serially and record the time to execute. Concurrency tests to include running multiple query classes in parallel for a duration of time. Additional details in the Testing section .","title":"Performance Testing"},{"location":"watsons-objectives/","text":"Proof-of-Concept Objectives The main objectives of a proof-of-concept for data warehouse modernization involve showcasing the capability to efficiently transfer data from the current data warehouse to a lakehouse environment, running query workloads effectively, and demonstrating the connectivity of our tools. Objectives Assess the feasibility of offloading data from the data warehouse to the data lakehouse. Validate the adaptability of existing workload processes in the data lakehouse environment. Evaluate the performance, scalability, and cost-effectiveness of the proposed data lakehouse architecture. Database JDBC connectivity. Success Criteria Successful migration of a subset of data from the data warehouse to the data lakehouse for Watson's Great Outdoors Company. Demonstrated adaptability of workload processes to the data lakehouse architecture. Positive results from performance and scalability tests. Identification of potential cost savings and efficiency gains. POC Registration A registration process has been created to track watsonx.data POCs. This form provides feedback to the development and product management teams on the POC requirements, as well as insuring the POC has the proper criteria and resources to succeed. Click on POC registration link to enter your POC into the system. POC Registration","title":"Proof-of-Concept Objectives"},{"location":"watsons-objectives/#proof-of-concept-objectives","text":"The main objectives of a proof-of-concept for data warehouse modernization involve showcasing the capability to efficiently transfer data from the current data warehouse to a lakehouse environment, running query workloads effectively, and demonstrating the connectivity of our tools.","title":"Proof-of-Concept Objectives"},{"location":"watsons-objectives/#objectives","text":"Assess the feasibility of offloading data from the data warehouse to the data lakehouse. Validate the adaptability of existing workload processes in the data lakehouse environment. Evaluate the performance, scalability, and cost-effectiveness of the proposed data lakehouse architecture. Database JDBC connectivity.","title":"Objectives"},{"location":"watsons-objectives/#success-criteria","text":"Successful migration of a subset of data from the data warehouse to the data lakehouse for Watson's Great Outdoors Company. Demonstrated adaptability of workload processes to the data lakehouse architecture. Positive results from performance and scalability tests. Identification of potential cost savings and efficiency gains.","title":"Success Criteria"},{"location":"watsons-objectives/#poc-registration","text":"A registration process has been created to track watsonx.data POCs. This form provides feedback to the development and product management teams on the POC requirements, as well as insuring the POC has the proper criteria and resources to succeed. Click on POC registration link to enter your POC into the system. POC Registration","title":"POC Registration"},{"location":"watsons-objects/","text":"Appendix C \u2013 Object Definitions Watson's Great Outdoors Company Data Warehouse Model This model contains financial, human resources, and sales and marketing information for the fictional company, The Sample Outdoors. The model accesses a dimensional relational data source. The DDL file can be downloaded with the following URL: Watsons Go DDL The data to load into the tables can be found in the following URL: Watsons Go Data If you want to load the data directly in your virtual machine, use the following command in a terminal shell. Change the name of the output file with the -O option. wget https://ibm.github.io/watsonx-data-poc/wxd-files/watsons-go-pocdata.tar.gz -O pocdata.tar.gz","title":"Object Definitions"},{"location":"watsons-objects/#appendix-c-object-definitions","text":"","title":"Appendix C \u2013 Object Definitions"},{"location":"watsons-objects/#watsons-great-outdoors-company-data-warehouse-model","text":"This model contains financial, human resources, and sales and marketing information for the fictional company, The Sample Outdoors. The model accesses a dimensional relational data source. The DDL file can be downloaded with the following URL: Watsons Go DDL The data to load into the tables can be found in the following URL: Watsons Go Data If you want to load the data directly in your virtual machine, use the following command in a terminal shell. Change the name of the output file with the -O option. wget https://ibm.github.io/watsonx-data-poc/wxd-files/watsons-go-pocdata.tar.gz -O pocdata.tar.gz","title":"Watson's Great Outdoors Company Data Warehouse Model"},{"location":"watsons-performance/","text":"Performance Metrics During the proof-of-concept capture all metrics related to the performance of the queries. Measure and record response times for each category of queries serial and concurrency test, see the details in Appendix D \u2013 Query Definitions and Timings . Analyze query execution plans and resource utilization during concurrency testing.","title":"Performance Metrics"},{"location":"watsons-performance/#performance-metrics","text":"During the proof-of-concept capture all metrics related to the performance of the queries. Measure and record response times for each category of queries serial and concurrency test, see the details in Appendix D \u2013 Query Definitions and Timings . Analyze query execution plans and resource utilization during concurrency testing.","title":"Performance Metrics"},{"location":"watsons-poc-tests/","text":"Proof-of-Concept Tests The following test are to be executed during the proof-of-concept. JDBC Connectivity Query Tests Serial Query Concurrency JDBC Connectivity Connectivity Test Ensure seamless communication between the data lakehouse and external tools through JDBC connections. Demonstrate DBeaver connectivity to the data lakehouse and execute one query from each category (simple, medium, complex). Connectivity Results Provide details on the process to establish connectivity. Show connectivity results using screenshots or recorded demonstration. Show query results with screenshots or recorded demonstration. Serial and Concurrency Testing Utilize Apache JMeter as the tool for simulating concurrent user activities by executing multiple instances of simple, intermediate, and complex queries simultaneously for Watson's Great Outdoors Company. Evaluate the system's ability to handle concurrent transactions without compromising performance or data integrity. Create four users for the testing: Serial serial - user for running the serial test Concurrency simple - user for simple queries intermediate - user for intermediate queries complex - user for complex queries Test No. Test Description Required output 1 Serial Run each query serially three times Save each query results into a file Provide avg, minimum, maximum, median timings 2 Concurrency Duration: 30-minute 5 simple 2 intermediate 1 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 3 Concurrency Duration: 30-minute 10 simple 5 intermediate 2 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 4 Concurrency Duration: 30-minute 20 simple 10 intermediate 5 complex Record number of query execution per query and the average time to run Save each query results into a file. Record Queries Per Hour (QPH) Table 2. Performance Tests","title":"Watsons poc tests"},{"location":"watsons-poc-tests/#proof-of-concept-tests","text":"The following test are to be executed during the proof-of-concept. JDBC Connectivity Query Tests Serial Query Concurrency","title":"Proof-of-Concept Tests"},{"location":"watsons-poc-tests/#jdbc-connectivity","text":"","title":"JDBC Connectivity"},{"location":"watsons-poc-tests/#connectivity-test","text":"Ensure seamless communication between the data lakehouse and external tools through JDBC connections. Demonstrate DBeaver connectivity to the data lakehouse and execute one query from each category (simple, medium, complex).","title":"Connectivity Test"},{"location":"watsons-poc-tests/#connectivity-results","text":"Provide details on the process to establish connectivity. Show connectivity results using screenshots or recorded demonstration. Show query results with screenshots or recorded demonstration.","title":"Connectivity Results"},{"location":"watsons-poc-tests/#serial-and-concurrency-testing","text":"Utilize Apache JMeter as the tool for simulating concurrent user activities by executing multiple instances of simple, intermediate, and complex queries simultaneously for Watson's Great Outdoors Company. Evaluate the system's ability to handle concurrent transactions without compromising performance or data integrity. Create four users for the testing: Serial serial - user for running the serial test Concurrency simple - user for simple queries intermediate - user for intermediate queries complex - user for complex queries Test No. Test Description Required output 1 Serial Run each query serially three times Save each query results into a file Provide avg, minimum, maximum, median timings 2 Concurrency Duration: 30-minute 5 simple 2 intermediate 1 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 3 Concurrency Duration: 30-minute 10 simple 5 intermediate 2 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 4 Concurrency Duration: 30-minute 20 simple 10 intermediate 5 complex Record number of query execution per query and the average time to run Save each query results into a file. Record Queries Per Hour (QPH) Table 2. Performance Tests","title":"Serial and Concurrency Testing"},{"location":"watsons-queries/","text":"Appendix D \u2013 Query Definitions and Timings Watson's Queries There are three sets of queries that need to be executed as part of the POC: Simple Intermediate Complex For each set of queries, there is a serial run stream (run each query three times serially and compute the average) and a concurrent run stream (to test various loads). The SQL queries can be found in the following links: Serial run stream Concurrent run stream Watsons JMeter Reports Note These timings were run on a Netezza data warehouse running on the cloud. Use these as a basis to compare your performance on watsonx.data. The following reports were generated by the Watsons' team to use as a comparison against your own results. The report code represents the queries that were used: s - Simple users i - Intermediate users c - C somplex users Select the report name to view the results. Serial Concurrency Test s5-i2-c1 Concurrency Test s10-i5-c2 Concurrency Test s20-i10-c5","title":"Query Definition and Timing"},{"location":"watsons-queries/#appendix-d-query-definitions-and-timings","text":"","title":"Appendix D \u2013 Query Definitions and Timings"},{"location":"watsons-queries/#watsons-queries","text":"There are three sets of queries that need to be executed as part of the POC: Simple Intermediate Complex For each set of queries, there is a serial run stream (run each query three times serially and compute the average) and a concurrent run stream (to test various loads). The SQL queries can be found in the following links: Serial run stream Concurrent run stream","title":"Watson's Queries"},{"location":"watsons-queries/#watsons-jmeter-reports","text":"Note These timings were run on a Netezza data warehouse running on the cloud. Use these as a basis to compare your performance on watsonx.data. The following reports were generated by the Watsons' team to use as a comparison against your own results. The report code represents the queries that were used: s - Simple users i - Intermediate users c - C somplex users Select the report name to view the results. Serial Concurrency Test s5-i2-c1 Concurrency Test s10-i5-c2 Concurrency Test s20-i10-c5","title":"Watsons JMeter Reports"},{"location":"watsons-report/","text":"Final Report Each vendor is required to submit a conclusive report detailing the results and findings of the proof-of-concept. Deliver comprehensive documentation outlining the proposed architecture and technology stack. Thoroughly document the migration process, encompassing procedures, data mappings, and steps taken to adapt workloads for Watson's Great Outdoors Company. Provide detailed documentation for all code changes, ranging from simple to complex SQL queries utilized during testing. Document any features or functions that were not executable during the proof-of-concept.","title":"Final Report"},{"location":"watsons-report/#final-report","text":"Each vendor is required to submit a conclusive report detailing the results and findings of the proof-of-concept. Deliver comprehensive documentation outlining the proposed architecture and technology stack. Thoroughly document the migration process, encompassing procedures, data mappings, and steps taken to adapt workloads for Watson's Great Outdoors Company. Provide detailed documentation for all code changes, ranging from simple to complex SQL queries utilized during testing. Document any features or functions that were not executable during the proof-of-concept.","title":"Final Report"},{"location":"watsons-testing/","text":"Proof-of-Concept Tests The following details the tests to be performance by each vendor. JDBC Connectivity Connectivity Test Ensure seamless communication between the data lakehouse and external tools through JDBC connections. Demonstrate DBeaver connectivity to the data lakehouse and execute one query from each category (simple, medium, complex). Connectivity Results Provide details on the process to establish connectivity. Show connectivity results using screenshots or recorded demonstration. Show query results with screenshots or recorded demonstration. Performance Testing Conduct performance tests to evaluate the speed and efficiency of data processing in the data lakehouse for Watson's Great Outdoors Company. Measure query response times and system throughput under different workloads. Scalability Testing Assess the scalability of the data lakehouse by simulating increased data volumes and concurrent user activities for Watson's Great Outdoors Company. SQL Query Categorization Three query categories have been provided for replicating the standard workload within the existing data warehouse. See: Appendix D \u2013 Query Definitions and Timings Simple Queries - A collection of straightforward SQL queries focusing on fundamental SELECT operations. Intermediate Queries - A compilation of SQL queries involving joins, subqueries, and aggregation functions at a moderate level of complexity. Complex Queries - An assortment of intricate SQL queries comprising multiple joins, nested subqueries, and advanced analytical functions. Serial and Concurrency Testing Utilize Apache JMeter as the tool for simulating concurrent user activities by executing multiple instances of simple, intermediate, and complex queries simultaneously for Watson's Great Outdoors Company. Evaluate the system's ability to handle concurrent transactions without compromising performance or data integrity. Create four users for the testing: Serial serial - user for running the serial test Concurrency simple - user for simple queries intermediate - user for intermediate queries complex - user for complex queries Test No. Test Description Required output 1 Serial Run each query serially three times Save each query results into a file Provide avg, minimum, maximum, median timings 2 Concurrency Duration: 30-minute 5 simple 2 intermediate 1 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 3 Concurrency Duration: 30-minute 10 simple 5 intermediate 2 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 4 Concurrency Duration: 30-minute 20 simple 10 intermediate 5 complex Record number of query execution per query and the average time to run Save each query results into a file. Record Queries Per Hour (QPH) Table 2. Performance Tests","title":"Proof of Concept Tests"},{"location":"watsons-testing/#proof-of-concept-tests","text":"The following details the tests to be performance by each vendor.","title":"Proof-of-Concept Tests"},{"location":"watsons-testing/#jdbc-connectivity","text":"","title":"JDBC Connectivity"},{"location":"watsons-testing/#connectivity-test","text":"Ensure seamless communication between the data lakehouse and external tools through JDBC connections. Demonstrate DBeaver connectivity to the data lakehouse and execute one query from each category (simple, medium, complex).","title":"Connectivity Test"},{"location":"watsons-testing/#connectivity-results","text":"Provide details on the process to establish connectivity. Show connectivity results using screenshots or recorded demonstration. Show query results with screenshots or recorded demonstration.","title":"Connectivity Results"},{"location":"watsons-testing/#performance-testing","text":"Conduct performance tests to evaluate the speed and efficiency of data processing in the data lakehouse for Watson's Great Outdoors Company. Measure query response times and system throughput under different workloads.","title":"Performance Testing"},{"location":"watsons-testing/#scalability-testing","text":"Assess the scalability of the data lakehouse by simulating increased data volumes and concurrent user activities for Watson's Great Outdoors Company.","title":"Scalability Testing"},{"location":"watsons-testing/#sql-query-categorization","text":"Three query categories have been provided for replicating the standard workload within the existing data warehouse. See: Appendix D \u2013 Query Definitions and Timings Simple Queries - A collection of straightforward SQL queries focusing on fundamental SELECT operations. Intermediate Queries - A compilation of SQL queries involving joins, subqueries, and aggregation functions at a moderate level of complexity. Complex Queries - An assortment of intricate SQL queries comprising multiple joins, nested subqueries, and advanced analytical functions.","title":"SQL Query Categorization"},{"location":"watsons-testing/#serial-and-concurrency-testing","text":"Utilize Apache JMeter as the tool for simulating concurrent user activities by executing multiple instances of simple, intermediate, and complex queries simultaneously for Watson's Great Outdoors Company. Evaluate the system's ability to handle concurrent transactions without compromising performance or data integrity. Create four users for the testing: Serial serial - user for running the serial test Concurrency simple - user for simple queries intermediate - user for intermediate queries complex - user for complex queries Test No. Test Description Required output 1 Serial Run each query serially three times Save each query results into a file Provide avg, minimum, maximum, median timings 2 Concurrency Duration: 30-minute 5 simple 2 intermediate 1 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 3 Concurrency Duration: 30-minute 10 simple 5 intermediate 2 complex Record number of query execution per query and the average time to run Save each query results into a file Record Queries Per Hour (QPH) 4 Concurrency Duration: 30-minute 20 simple 10 intermediate 5 complex Record number of query execution per query and the average time to run Save each query results into a file. Record Queries Per Hour (QPH) Table 2. Performance Tests","title":"Serial and Concurrency Testing"},{"location":"wxd-acknowledgements/","text":"Acknowledgments We would like to thank all the development team for helping to deliver this release given the tremendous deadlines and constraints that they have been under. The initial lab was created by Deepak Rangarao with contributions from development. Additional material was supplied by Daniel Hancock and feedback from the members of the watsonx.data activation community. Formatting and script development was done by George Baklarz. The contents of this eBook are the result of a lot of research and testing based on the contents of watsonx.data. Results are based on a specific version of watsonx.data, so you may have different results if using an older or newer version of the development kit. Support For any questions regarding the lab, including any suggestions, general comments, or bug reports, please contact: George Baklarz baklarz@ca.ibm.com Daniel Hancock daniel.hancock@us.ibm.com We would also appreciate any feedback on the successful use of the lab. Thanks for using watsonx.data! Dan, Deepak & George","title":"Acknowledgments"},{"location":"wxd-acknowledgements/#acknowledgments","text":"We would like to thank all the development team for helping to deliver this release given the tremendous deadlines and constraints that they have been under. The initial lab was created by Deepak Rangarao with contributions from development. Additional material was supplied by Daniel Hancock and feedback from the members of the watsonx.data activation community. Formatting and script development was done by George Baklarz. The contents of this eBook are the result of a lot of research and testing based on the contents of watsonx.data. Results are based on a specific version of watsonx.data, so you may have different results if using an older or newer version of the development kit.","title":"Acknowledgments"},{"location":"wxd-acknowledgements/#support","text":"For any questions regarding the lab, including any suggestions, general comments, or bug reports, please contact: George Baklarz baklarz@ca.ibm.com Daniel Hancock daniel.hancock@us.ibm.com We would also appreciate any feedback on the successful use of the lab. Thanks for using watsonx.data! Dan, Deepak & George","title":"Support"},{"location":"wxd-advanced/","text":"Advanced Functions Watsonx.data supports several types of functions including: Mathematical functions Conversion functions String functions Regular expression functions Window functions URL functions Geospatial functions For a complete list see - https://prestodb.io/docs/current/functions.html . We will look at using a few simple examples as part of this lab. Switch to the bin directory. cd /root/ibm-lh-dev/bin Connect to the Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop Concatenation of one or more string/varchar values Note: We are using a combination of the \u201cconcat\u201d string function and the \u201ccast\u201d conversion function as part of this query. select concat(cast(custkey as varchar),'--',name) from customer limit 2; _col0 ------------------------- 376--Customer#000000376 377--Customer#000000377 (2 rows) Date functions Date functions can be used as part of the projected columns or in the predicate/where clause. Select orders from the last 2 days. select orderdate from orders where orderdate > date '1998-08-02' - interval '2' day; orderdate ------------ 1998-08-02 1998-08-02 1998-08-01 1998-08-01 1998-08-02 1998-08-01 1998-08-01 1998-08-01 1998-08-02 1998-08-02 1998-08-02 1998-08-02 (12 rows) Number of orders by year. select distinct year(orderdate), count(orderkey) from orders group by year(orderdate); _col0 | _col1 -------+------- 1993 | 2307 1994 | 2303 1998 | 1346 1996 | 2297 1995 | 2204 1992 | 2256 1997 | 2287 (7 rows) Geospatial functions There are 3 basic geometries, then some complex geometries. The basic geometries include: Points Lines Polygons Points You could use https://www.latlong.net to get the longitude/latitude given any address. select ST_Point(-121.748360,37.195840) as SVL, ST_Point(-122.378952, 37.621311) as SFO; SVL | SFO -----------------------------+------------------------------- POINT (-121.74836 37.19584) | POINT (-122.378952 37.621311) (1 row) Lines You could use https://www.latlong.net to get the longitude/latitude for 2 points and then create a straight line from it. Below is just a small stretch of the road leading to IBM SVL campus. select ST_LineFromText('LINESTRING (-121.74294303079807 37.19665657093434, -121.73659072815602 37.20102399761407)'); _col0 ------------------------------------------------------------------------------------------- LINESTRING (-121.74294303079807 37.19665657093434, -121.73659072815602 37.20102399761407) (1 row) Polygons You could use https://geojson.io/#map=16.39/37.196336/-121.746303 to click around and generate the coordinates for a polygon of any shape. The following is a polygon of the IBM Silicon Valley campus. select ST_Polygon('POLYGON ( (-121.74418635253568 37.196001834113844, -121.74499684288966 37.19668005184322, -121.74584008032835 37.19707784979194, -121.74629035274705 37.197645197338105, -121.74672425162339 37.198186455965086, -121.74705172247337 37.19828427337538, -121.74760023614738 37.19827775221884, -121.74848440744239 37.19836252721197, -121.74932764488139 37.19789300297414, -121.75039192514376 37.19746260319114, -121.75130884352407 37.19721479614175, -121.75195559845278 37.1963670290329, -121.75198015876644 37.19555185937345, -121.7508585711051 37.19458016564036, -121.74940132582242 37.19447582194559, -121.74841891327239 37.1942866986312, -121.7474446874937 37.193556286900346, -121.74418635253568 37.196001834113844))'); Truncated output ------------------------------------------------------------------------------------------------------------------------------------------------------> POLYGON ((-121.74418635253568 37.196001834113844, -121.74499684288966 37.19668005184322, -121.74584008032835 37.19707784979194, -121.74629035274705 3> (1 row) So now that we have 3 basic geometries Point, Line and Polygon we can perform different operations on spatial data including: Distance between 2 points Point in polygon Intersection of line and polygon \u2003 Distance between SFO airport and IBM SVL We can now use geospatial functions in a nested way to find the distance between 2 points. select ST_Distance(to_spherical_geography(ST_Point(-122.378952, 37.621311)), to_spherical_geography(ST_Point(-121.748360,37.195840)))*0.000621371 as distance_in_miles; distance_in_miles -------------------- 45.408431373195654 (1 row) Exit Presto. quit;","title":"Advanced Functions"},{"location":"wxd-advanced/#advanced-functions","text":"Watsonx.data supports several types of functions including: Mathematical functions Conversion functions String functions Regular expression functions Window functions URL functions Geospatial functions For a complete list see - https://prestodb.io/docs/current/functions.html . We will look at using a few simple examples as part of this lab. Switch to the bin directory. cd /root/ibm-lh-dev/bin Connect to the Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop","title":"Advanced Functions"},{"location":"wxd-advanced/#concatenation-of-one-or-more-stringvarchar-values","text":"Note: We are using a combination of the \u201cconcat\u201d string function and the \u201ccast\u201d conversion function as part of this query. select concat(cast(custkey as varchar),'--',name) from customer limit 2; _col0 ------------------------- 376--Customer#000000376 377--Customer#000000377 (2 rows)","title":"Concatenation of one or more string/varchar values"},{"location":"wxd-advanced/#date-functions","text":"Date functions can be used as part of the projected columns or in the predicate/where clause. Select orders from the last 2 days. select orderdate from orders where orderdate > date '1998-08-02' - interval '2' day; orderdate ------------ 1998-08-02 1998-08-02 1998-08-01 1998-08-01 1998-08-02 1998-08-01 1998-08-01 1998-08-01 1998-08-02 1998-08-02 1998-08-02 1998-08-02 (12 rows) Number of orders by year. select distinct year(orderdate), count(orderkey) from orders group by year(orderdate); _col0 | _col1 -------+------- 1993 | 2307 1994 | 2303 1998 | 1346 1996 | 2297 1995 | 2204 1992 | 2256 1997 | 2287 (7 rows)","title":"Date functions"},{"location":"wxd-advanced/#geospatial-functions","text":"There are 3 basic geometries, then some complex geometries. The basic geometries include: Points Lines Polygons","title":"Geospatial functions"},{"location":"wxd-advanced/#points","text":"You could use https://www.latlong.net to get the longitude/latitude given any address. select ST_Point(-121.748360,37.195840) as SVL, ST_Point(-122.378952, 37.621311) as SFO; SVL | SFO -----------------------------+------------------------------- POINT (-121.74836 37.19584) | POINT (-122.378952 37.621311) (1 row)","title":"Points"},{"location":"wxd-advanced/#lines","text":"You could use https://www.latlong.net to get the longitude/latitude for 2 points and then create a straight line from it. Below is just a small stretch of the road leading to IBM SVL campus. select ST_LineFromText('LINESTRING (-121.74294303079807 37.19665657093434, -121.73659072815602 37.20102399761407)'); _col0 ------------------------------------------------------------------------------------------- LINESTRING (-121.74294303079807 37.19665657093434, -121.73659072815602 37.20102399761407) (1 row)","title":"Lines"},{"location":"wxd-advanced/#polygons","text":"You could use https://geojson.io/#map=16.39/37.196336/-121.746303 to click around and generate the coordinates for a polygon of any shape. The following is a polygon of the IBM Silicon Valley campus. select ST_Polygon('POLYGON ( (-121.74418635253568 37.196001834113844, -121.74499684288966 37.19668005184322, -121.74584008032835 37.19707784979194, -121.74629035274705 37.197645197338105, -121.74672425162339 37.198186455965086, -121.74705172247337 37.19828427337538, -121.74760023614738 37.19827775221884, -121.74848440744239 37.19836252721197, -121.74932764488139 37.19789300297414, -121.75039192514376 37.19746260319114, -121.75130884352407 37.19721479614175, -121.75195559845278 37.1963670290329, -121.75198015876644 37.19555185937345, -121.7508585711051 37.19458016564036, -121.74940132582242 37.19447582194559, -121.74841891327239 37.1942866986312, -121.7474446874937 37.193556286900346, -121.74418635253568 37.196001834113844))'); Truncated output ------------------------------------------------------------------------------------------------------------------------------------------------------> POLYGON ((-121.74418635253568 37.196001834113844, -121.74499684288966 37.19668005184322, -121.74584008032835 37.19707784979194, -121.74629035274705 3> (1 row) So now that we have 3 basic geometries Point, Line and Polygon we can perform different operations on spatial data including: Distance between 2 points Point in polygon Intersection of line and polygon \u2003 Distance between SFO airport and IBM SVL We can now use geospatial functions in a nested way to find the distance between 2 points. select ST_Distance(to_spherical_geography(ST_Point(-122.378952, 37.621311)), to_spherical_geography(ST_Point(-121.748360,37.195840)))*0.000621371 as distance_in_miles; distance_in_miles -------------------- 45.408431373195654 (1 row) Exit Presto. quit;","title":"Polygons"},{"location":"wxd-analytics/","text":"Analytic Workloads Watsonx.data is based on open source PrestoDB, a distributed query engine that enables querying data stored in open file formats using open table formats for optimization and performance. Some of the characteristics which you will learn and see in action include: Compute processing is performed in memory and in parallel. Data is pipelined between query stages and over the network reducing latency overhead that one would have if disk I/O were involved. Executing and analyzing analytic workloads Let us start with some simple examples of running queries and analyze the execution. We can either use the dBeaver interface or the watsonx.data CLI. We will eventually be able to use the watsonx.data console UI as well but for the moment it is under construction. Connect to watsonx.data Make sure you are the root user and change to the development directory. cd /root/ibm-lh-dev/bin Open the Presto CLI. Note : The workshop schema was created as part of the introduction to Minio. If you have not run that lab, the schema will not be available. Please see the Introduction to Minio section. ./presto-cli --catalog iceberg_data --schema workshop Run a simple scan query which selects customer names and market segment. select name, mktsegment from customer limit 3; name | mktsegment --------------------+------------ Customer#000000376 | AUTOMOBILE Customer#000000377 | MACHINERY Customer#000000378 | BUILDING (3 rows) To understand the query execution plan we use the explain statement. explain select name, mktsegment from customer; - Output[name, mktsegment] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 16230.00} - RemoteStreamingExchange[GATHER] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 16230.00} - TableScan[TableHandle {connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7053670466726060568]', layout='Optional[workshop.customer$data@Optional[7053670466726060568]]'}] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 0.00} mktsegment := 7:mktsegment:varchar (1:38) name := 2:name:varchar (1:38) What you see above is the hierarchy of logical operations to execute the query. Explain the query and focus on IO operations. explain (type io) select name, mktsegment from customer; { \"inputTableColumnInfos\" : [ { \"table\" : { \"catalog\" : \"iceberg_data\", \"schemaTable\" : { \"schema\" : \"workshop\", \"table\" : \"customer\" } }, \"columnConstraints\" : [ ] } ] } Explain physical execution plan for the query. explain (type distributed) select name, mktsegment from customer; Fragment 0 [SINGLE] Output layout: [name, mktsegment] Output partitioning: SINGLE [] Stage Execution Strategy: UNGROUPED_EXECUTION - Output[name, mktsegment] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 16230.00} - RemoteSource[1] => [name:varchar, mktsegment:varchar] Fragment 1 [SOURCE] Output layout: [name, mktsegment] Output partitioning: SINGLE [] Stage Execution Strategy: UNGROUPED_EXECUTION - TableScan[TableHandle {connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7053670466726060568]', layout='Optional[workshop.customer$data@Optional[7053670466726060568]]'}, grouped = false] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 0.00} mktsegment := 7:mktsegment:varchar (1:57) name := 2:name:varchar (1:57) A fragment represents a stage of the distributed plan. The Presto scheduler schedules the execution by each stage, and stages can be run on separate instances. Create explain statement in a visual format. explain (format graphviz) select name, mktsegment from customer; digraph logical_plan { subgraph cluster_0 { label = \"SINGLE\" plannode_1[label=\"{Output[name, mktsegment]|Estimates: \\{rows: ? (?), cpu: ?, memory: ?, network: ?\\} }\", style=\"rounded, filled\", shape=record, fillcolor=white]; plannode_2[label=\"{ExchangeNode[GATHER]|name, mktsegment|Estimates: \\{rows: ? (?), cpu: ?, memory: ?, network: ?\\} }\", style=\"rounded, filled\", shape=record, fillcolor=gold]; plannode_3[label=\"{TableScan | [TableHandle \\{connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7053670466726060568]', layout='Optional[workshop.customer$data@Optional[7053670466726060568]]'\\}]|Estimates: \\{rows: ? (?), cpu: ?, memory: ?, network: ?\\} }\", style=\"rounded, filled\", shape=record, fillcolor=deepskyblue]; } plannode_1 -> plannode_2; plannode_2 -> plannode_3; } We are going to format the output from the explain statement and display it as a graphic. Quit Presto. quit; Place the explain SQL into a file that will be run as a script by Presto. cat <<EOF >/root/ibm-lh-dev/localstorage/volumes/infra/explain.sql explain (format graphviz) select name, mktsegment from customer; EOF Run Presto by pointing to the file with the SQL in it. ./presto-cli --catalog iceberg_data --schema workshop --file /mnt/infra/explain.sql > /tmp/plan.dot We need to get rid of headers and stuff that Presto generated when creating the output (there is no way to turn that off). cat /tmp/plan.dot | sed 's/\"\"/\"/g' | sed -z 's/\"//' | sed '$s/\"//' > /tmp/fixedplan.dot Generate the PNG file from the explain statement. dot -Tpng /tmp/fixedplan.dot > /tmp/plan.png Open a separate terminal window and issue the following command (using the SSH port number and server name supplied in your reservation). Mac OSX user scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png && open plan.png Windows user scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png & start \"\" \"plan.png\" Linux user (watsonx.data server) eog /tmp/plan.png Creating a Table with User-defined Partitions Connect to Presto with the Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop Create a partitioned table, based on column mktsegment and copy data from TPCH.TINY.CUSTOMER table. create table iceberg_data.workshop.part_customer with (partitioning = array['mktsegment']) as select * from tpch.tiny.customer; Quit Presto. quit; Inspect object store directory/object/file structure Open your browser and connect to the MinIO console. If you forget the userid and password, use the following command to extract them or use the passwords command. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY Click on the Object browser tab to show the current buckets in the MinIO system. Select iceberg-bucket. You will see two tables, customer and part_customer. Select part_customer. Then select data. Examining the part_customer, you will notice is the data is split into multiple parquet files stored across multiple directories - a single directory for each unique value of the partition key. Predicate query to utilize partitions Connect to Presto with the Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop Now that have created a partitioned table, we will execute a SQL statement that will make use of this fact. select * from iceberg_data.\"workshop\".part_customer where mktsegment='MACHINERY'; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+------------------------------------------+-----------+-----------------+---------+------------+---------------------------------------------------------------------------------------------------------------------- 1131 | Customer#000001131 | KVAvB1lwuN qHWDDPNckenmRGULDFduxYRSBXv | 20 | 30-644-540-9044 | 6019.1 | MACHINERY | er the carefully dogged courts m 1133 | Customer#000001133 | FfA0o cMP02Ylzxtmbq8DCOq | 14 | 24-858-762-2348 | 5335.36 | MACHINERY | g to the pending, ironic pinto beans. furiously blithe packages are fina 1141 | Customer#000001141 | A6uzuXpgRPp19ek8K8zd5O | 22 | 32-330-618-9020 | 0.97 | MACHINERY | accounts. furiously pending deposits cajole. c 1149 | Customer#000001149 | 5JOAwCy8MD70TUZJDyxgEBMe | 3 | 13-254-242-3889 | 6287.79 | MACHINERY | ress requests haggle carefully across the fluffily regula 1150 | Customer#000001150 | fUJqzdkQg1 | 21 | 31-236-665-8430 | -117.31 | MACHINERY | usly final dolphins. fluffily bold platelets sleep. slyly unusual attainments lo 1155 | Customer#000001155 | kEDBn1IQWyHyYjgGGs6FiXfm3 | 8 | 18-864-953-3058 | 3510.25 | MACHINERY | ages? fluffily even accounts shall have to boost furiously alongside of the furiously pendin 1158 | Customer#000001158 | btAl2dQdvNV9cEzTwVRloTb08sLYKDopV2cK,p | 10 | 20-487-747-8857 | 3081.79 | MACHINERY | theodolites use stealthy asymptotes. frets integrate even instructions. car 1161 | Customer#000001161 | QD7s2P6QpCC6g9t2aVzKg7y | 19 | 29-213-663-3342 | 591.31 | MACHINERY | ly alongside of the quickly blithe ideas. quickly ironic accounts haggle regul 1165 | Customer#000001165 | h7KTXGSqsn0 | 9 | 19-766-409-6769 | 8177.33 | MACHINERY | jole slyly beside the quickly final accounts. silent, even requests are stealthily ironic, re 1166 | Customer#000001166 | W4FAGNPKcJFebzldtNp8SehhH3 | 17 | 27-869-223-7506 | 507.26 | MACHINERY | before the platelets! carefully bold ideas lose carefully 1169 | Customer#000001169 | 04YQNIYyRRFxUnJsTP36da | 4 | 14-975-169-9356 | 7503.3 | MACHINERY | into beans doubt about the slyly ironic multipliers. carefully regular requests breach theodolites. special packages 1188 | Customer#000001188 | PtwoF3jNQ9r6 GbPIelt GvbNBuDH | 15 | 25-108-989-8154 | 3698.86 | MACHINERY | ts. quickly unusual ideas affix aft 1190 | Customer#000001190 | JwzW9OtxFRXDnVo5hXl8 2A5VxH12 | 15 | 25-538-604-9042 | 2743.63 | MACHINERY | regular deposits according to the pending packages wake blithely among the silent inst 1203 | Customer#000001203 | 9pTq4gggfKoSqQetn0yJR | 16 | 26-370-660-6154 | 5787.69 | MACHINERY | osits nag furiously final accounts. silent pack ... Many more rows Due to the partitioning of this table by mktsegment , it will completely skip scanning a large percentage of the objects in the object store. We run an explain against this query using the following command. explain (format graphviz) select * from iceberg_data.\"workshop\".customer where mktsegment='MACHINERY'; Query Plan ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- digraph logical_plan { subgraph cluster_0 { label = \"SINGLE\" plannode_1[label=\"{Output[custkey, name, address, nationkey, phone, acctbal, mktsegment, comment]|Estimates: \\{rows: 750 (56.84kB), cpu: 232830.00, memory: 0.00, network: 58207.50\\} }\", style=\"rounded, filled\", shape=record, fillcolor=white]; plannode_2[label=\"{ExchangeNode[GATHER]|custkey, name, address, nationkey, phone, acctbal, mktsegment, comment|Estimates: \\{rows: 750 (56.84kB), cpu: 232830.00, memory: 0.00, network: 58207.50\\} }\", style=\"rounded, filled\", shape=record, fillcolor=gold]; plannode_3[label=\"{Filter|(mktsegment) = (VARCHAR'MACHINERY')|Estimates: \\{rows: 750 (56.84kB), cpu: 232830.00, memory: 0.00, network: 0.00\\} }\", style=\"rounded, filled\", shape=record, fillcolor=yellow]; plannode_4[label=\"{TableScan | [TableHandle \\{connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7230522396120575591]', layout='Optional[workshop.customer$data@Optional[7230522396120575591]]'\\}]|Estimates: \\{rows: 1500 (113.69kB), cpu: 116415.00, memory: 0.00, network: 0.00\\} }\", style=\"rounded, filled\", shape=record, fillcolor=deepskyblue]; } plannode_1 -> plannode_2; plannode_2 -> plannode_3; plannode_3 -> plannode_4; } To visualize this, we are going to run this command and place the results into a temporary file. Exit Presto. quit; Place the explain SQL into the following file. cat <<EOF >/root/ibm-lh-dev/localstorage/volumes/infra/explain.sql explain (format graphviz) select * from iceberg_data.\"workshop\".customer where mktsegment='MACHINERY'; EOF Run the Presto command to generate the explain output. ./presto-cli --catalog iceberg_data --schema workshop --file /mnt/infra/explain.sql > /tmp/plan.dot Remove Headers. cat /tmp/plan.dot | sed 's/\"\"/\"/g' | sed -z 's/\"//' | sed '$s/\"//' > /tmp/fixedplan.dot Generate the PNG file from the explain statement. dot -Tpng /tmp/fixedplan.dot > /tmp/plan.png Open a separate terminal window and issue the following command (using the SSH port number and server name supplied in your reservation). Mac OSX user scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png && open plan.png Windows user scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png & start \"\" \"plan.png\" Linux user (watsonx.data server) eog /tmp/plan.png Joins and Aggregations This section will create an orders table to test joins and aggregations. Start Presto CLI with Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop Create the Orders Table. create table iceberg_data.workshop.orders as select * from tpch.tiny.orders; CREATE TABLE: 15000 rows Use a Windowing function. SELECT orderkey, clerk, totalprice, rank() OVER (PARTITION BY clerk ORDER BY totalprice DESC) AS rnk FROM orders ORDER BY clerk, rnk; Try to write a window function to show the custkey, orderdate, totalprice and priororder. The output should look like this. custkey | orderdate | totalprice | priororder ---------+------------+------------+------------ 1 | 1993-06-05 | 152411.41 | NULL 1 | 1993-08-13 | 83095.85 | 152411.41 1 | 1994-05-08 | 51134.82 | 83095.85 1 | 1995-10-29 | 165928.33 | 51134.82 1 | 1997-01-29 | 231040.44 | 165928.33 1 | 1997-03-04 | 270087.44 | 231040.44 1 | 1997-06-23 | 357345.46 | 270087.44 1 | 1997-11-18 | 28599.83 | 357345.46 1 | 1998-03-29 | 89230.03 | 28599.83 2 | 1993-02-19 | 170842.93 | 89230.03 2 | 1993-05-03 | 154867.09 | 170842.93 2 | 1993-09-30 | 143707.7 | 154867.09 2 | 1994-08-15 | 116247.57 | 143707.7 2 | 1994-12-29 | 45657.87 | 116247.57 2 | 1996-03-04 | 181875.6 | 45657.87 Prepared statements Save a query as a prepared statement. prepare customer_by_segment from select * from customer where mktsegment=?; Execute prepared statement using parameters. execute customer_by_segment using 'FURNITURE'; Note : This is only valid for the active session. Quit Presto. quit;","title":"Analytic Workloads"},{"location":"wxd-analytics/#analytic-workloads","text":"Watsonx.data is based on open source PrestoDB, a distributed query engine that enables querying data stored in open file formats using open table formats for optimization and performance. Some of the characteristics which you will learn and see in action include: Compute processing is performed in memory and in parallel. Data is pipelined between query stages and over the network reducing latency overhead that one would have if disk I/O were involved.","title":"Analytic Workloads"},{"location":"wxd-analytics/#executing-and-analyzing-analytic-workloads","text":"Let us start with some simple examples of running queries and analyze the execution. We can either use the dBeaver interface or the watsonx.data CLI. We will eventually be able to use the watsonx.data console UI as well but for the moment it is under construction.","title":"Executing and analyzing analytic workloads"},{"location":"wxd-analytics/#connect-to-watsonxdata","text":"Make sure you are the root user and change to the development directory. cd /root/ibm-lh-dev/bin Open the Presto CLI. Note : The workshop schema was created as part of the introduction to Minio. If you have not run that lab, the schema will not be available. Please see the Introduction to Minio section. ./presto-cli --catalog iceberg_data --schema workshop Run a simple scan query which selects customer names and market segment. select name, mktsegment from customer limit 3; name | mktsegment --------------------+------------ Customer#000000376 | AUTOMOBILE Customer#000000377 | MACHINERY Customer#000000378 | BUILDING (3 rows) To understand the query execution plan we use the explain statement. explain select name, mktsegment from customer; - Output[name, mktsegment] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 16230.00} - RemoteStreamingExchange[GATHER] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 16230.00} - TableScan[TableHandle {connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7053670466726060568]', layout='Optional[workshop.customer$data@Optional[7053670466726060568]]'}] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 0.00} mktsegment := 7:mktsegment:varchar (1:38) name := 2:name:varchar (1:38) What you see above is the hierarchy of logical operations to execute the query. Explain the query and focus on IO operations. explain (type io) select name, mktsegment from customer; { \"inputTableColumnInfos\" : [ { \"table\" : { \"catalog\" : \"iceberg_data\", \"schemaTable\" : { \"schema\" : \"workshop\", \"table\" : \"customer\" } }, \"columnConstraints\" : [ ] } ] } Explain physical execution plan for the query. explain (type distributed) select name, mktsegment from customer; Fragment 0 [SINGLE] Output layout: [name, mktsegment] Output partitioning: SINGLE [] Stage Execution Strategy: UNGROUPED_EXECUTION - Output[name, mktsegment] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 16230.00} - RemoteSource[1] => [name:varchar, mktsegment:varchar] Fragment 1 [SOURCE] Output layout: [name, mktsegment] Output partitioning: SINGLE [] Stage Execution Strategy: UNGROUPED_EXECUTION - TableScan[TableHandle {connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7053670466726060568]', layout='Optional[workshop.customer$data@Optional[7053670466726060568]]'}, grouped = false] => [name:varchar, mktsegment:varchar] Estimates: {rows: 1500 (15.85kB), cpu: 16230.00, memory: 0.00, network: 0.00} mktsegment := 7:mktsegment:varchar (1:57) name := 2:name:varchar (1:57) A fragment represents a stage of the distributed plan. The Presto scheduler schedules the execution by each stage, and stages can be run on separate instances. Create explain statement in a visual format. explain (format graphviz) select name, mktsegment from customer; digraph logical_plan { subgraph cluster_0 { label = \"SINGLE\" plannode_1[label=\"{Output[name, mktsegment]|Estimates: \\{rows: ? (?), cpu: ?, memory: ?, network: ?\\} }\", style=\"rounded, filled\", shape=record, fillcolor=white]; plannode_2[label=\"{ExchangeNode[GATHER]|name, mktsegment|Estimates: \\{rows: ? (?), cpu: ?, memory: ?, network: ?\\} }\", style=\"rounded, filled\", shape=record, fillcolor=gold]; plannode_3[label=\"{TableScan | [TableHandle \\{connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7053670466726060568]', layout='Optional[workshop.customer$data@Optional[7053670466726060568]]'\\}]|Estimates: \\{rows: ? (?), cpu: ?, memory: ?, network: ?\\} }\", style=\"rounded, filled\", shape=record, fillcolor=deepskyblue]; } plannode_1 -> plannode_2; plannode_2 -> plannode_3; } We are going to format the output from the explain statement and display it as a graphic. Quit Presto. quit; Place the explain SQL into a file that will be run as a script by Presto. cat <<EOF >/root/ibm-lh-dev/localstorage/volumes/infra/explain.sql explain (format graphviz) select name, mktsegment from customer; EOF Run Presto by pointing to the file with the SQL in it. ./presto-cli --catalog iceberg_data --schema workshop --file /mnt/infra/explain.sql > /tmp/plan.dot We need to get rid of headers and stuff that Presto generated when creating the output (there is no way to turn that off). cat /tmp/plan.dot | sed 's/\"\"/\"/g' | sed -z 's/\"//' | sed '$s/\"//' > /tmp/fixedplan.dot Generate the PNG file from the explain statement. dot -Tpng /tmp/fixedplan.dot > /tmp/plan.png Open a separate terminal window and issue the following command (using the SSH port number and server name supplied in your reservation).","title":"Connect to watsonx.data"},{"location":"wxd-analytics/#mac-osx-user","text":"scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png && open plan.png","title":"Mac OSX user"},{"location":"wxd-analytics/#windows-user","text":"scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png & start \"\" \"plan.png\"","title":"Windows user"},{"location":"wxd-analytics/#linux-user-watsonxdata-server","text":"eog /tmp/plan.png","title":"Linux user (watsonx.data server)"},{"location":"wxd-analytics/#creating-a-table-with-user-defined-partitions","text":"Connect to Presto with the Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop Create a partitioned table, based on column mktsegment and copy data from TPCH.TINY.CUSTOMER table. create table iceberg_data.workshop.part_customer with (partitioning = array['mktsegment']) as select * from tpch.tiny.customer; Quit Presto. quit;","title":"Creating a Table with User-defined Partitions"},{"location":"wxd-analytics/#inspect-object-store-directoryobjectfile-structure","text":"Open your browser and connect to the MinIO console. If you forget the userid and password, use the following command to extract them or use the passwords command. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY Click on the Object browser tab to show the current buckets in the MinIO system. Select iceberg-bucket. You will see two tables, customer and part_customer. Select part_customer. Then select data. Examining the part_customer, you will notice is the data is split into multiple parquet files stored across multiple directories - a single directory for each unique value of the partition key.","title":"Inspect object store directory/object/file structure"},{"location":"wxd-analytics/#predicate-query-to-utilize-partitions","text":"Connect to Presto with the Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop Now that have created a partitioned table, we will execute a SQL statement that will make use of this fact. select * from iceberg_data.\"workshop\".part_customer where mktsegment='MACHINERY'; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+------------------------------------------+-----------+-----------------+---------+------------+---------------------------------------------------------------------------------------------------------------------- 1131 | Customer#000001131 | KVAvB1lwuN qHWDDPNckenmRGULDFduxYRSBXv | 20 | 30-644-540-9044 | 6019.1 | MACHINERY | er the carefully dogged courts m 1133 | Customer#000001133 | FfA0o cMP02Ylzxtmbq8DCOq | 14 | 24-858-762-2348 | 5335.36 | MACHINERY | g to the pending, ironic pinto beans. furiously blithe packages are fina 1141 | Customer#000001141 | A6uzuXpgRPp19ek8K8zd5O | 22 | 32-330-618-9020 | 0.97 | MACHINERY | accounts. furiously pending deposits cajole. c 1149 | Customer#000001149 | 5JOAwCy8MD70TUZJDyxgEBMe | 3 | 13-254-242-3889 | 6287.79 | MACHINERY | ress requests haggle carefully across the fluffily regula 1150 | Customer#000001150 | fUJqzdkQg1 | 21 | 31-236-665-8430 | -117.31 | MACHINERY | usly final dolphins. fluffily bold platelets sleep. slyly unusual attainments lo 1155 | Customer#000001155 | kEDBn1IQWyHyYjgGGs6FiXfm3 | 8 | 18-864-953-3058 | 3510.25 | MACHINERY | ages? fluffily even accounts shall have to boost furiously alongside of the furiously pendin 1158 | Customer#000001158 | btAl2dQdvNV9cEzTwVRloTb08sLYKDopV2cK,p | 10 | 20-487-747-8857 | 3081.79 | MACHINERY | theodolites use stealthy asymptotes. frets integrate even instructions. car 1161 | Customer#000001161 | QD7s2P6QpCC6g9t2aVzKg7y | 19 | 29-213-663-3342 | 591.31 | MACHINERY | ly alongside of the quickly blithe ideas. quickly ironic accounts haggle regul 1165 | Customer#000001165 | h7KTXGSqsn0 | 9 | 19-766-409-6769 | 8177.33 | MACHINERY | jole slyly beside the quickly final accounts. silent, even requests are stealthily ironic, re 1166 | Customer#000001166 | W4FAGNPKcJFebzldtNp8SehhH3 | 17 | 27-869-223-7506 | 507.26 | MACHINERY | before the platelets! carefully bold ideas lose carefully 1169 | Customer#000001169 | 04YQNIYyRRFxUnJsTP36da | 4 | 14-975-169-9356 | 7503.3 | MACHINERY | into beans doubt about the slyly ironic multipliers. carefully regular requests breach theodolites. special packages 1188 | Customer#000001188 | PtwoF3jNQ9r6 GbPIelt GvbNBuDH | 15 | 25-108-989-8154 | 3698.86 | MACHINERY | ts. quickly unusual ideas affix aft 1190 | Customer#000001190 | JwzW9OtxFRXDnVo5hXl8 2A5VxH12 | 15 | 25-538-604-9042 | 2743.63 | MACHINERY | regular deposits according to the pending packages wake blithely among the silent inst 1203 | Customer#000001203 | 9pTq4gggfKoSqQetn0yJR | 16 | 26-370-660-6154 | 5787.69 | MACHINERY | osits nag furiously final accounts. silent pack ... Many more rows Due to the partitioning of this table by mktsegment , it will completely skip scanning a large percentage of the objects in the object store. We run an explain against this query using the following command. explain (format graphviz) select * from iceberg_data.\"workshop\".customer where mktsegment='MACHINERY'; Query Plan ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- digraph logical_plan { subgraph cluster_0 { label = \"SINGLE\" plannode_1[label=\"{Output[custkey, name, address, nationkey, phone, acctbal, mktsegment, comment]|Estimates: \\{rows: 750 (56.84kB), cpu: 232830.00, memory: 0.00, network: 58207.50\\} }\", style=\"rounded, filled\", shape=record, fillcolor=white]; plannode_2[label=\"{ExchangeNode[GATHER]|custkey, name, address, nationkey, phone, acctbal, mktsegment, comment|Estimates: \\{rows: 750 (56.84kB), cpu: 232830.00, memory: 0.00, network: 58207.50\\} }\", style=\"rounded, filled\", shape=record, fillcolor=gold]; plannode_3[label=\"{Filter|(mktsegment) = (VARCHAR'MACHINERY')|Estimates: \\{rows: 750 (56.84kB), cpu: 232830.00, memory: 0.00, network: 0.00\\} }\", style=\"rounded, filled\", shape=record, fillcolor=yellow]; plannode_4[label=\"{TableScan | [TableHandle \\{connectorId='iceberg_data', connectorHandle='workshop.customer$data@Optional[7230522396120575591]', layout='Optional[workshop.customer$data@Optional[7230522396120575591]]'\\}]|Estimates: \\{rows: 1500 (113.69kB), cpu: 116415.00, memory: 0.00, network: 0.00\\} }\", style=\"rounded, filled\", shape=record, fillcolor=deepskyblue]; } plannode_1 -> plannode_2; plannode_2 -> plannode_3; plannode_3 -> plannode_4; } To visualize this, we are going to run this command and place the results into a temporary file. Exit Presto. quit; Place the explain SQL into the following file. cat <<EOF >/root/ibm-lh-dev/localstorage/volumes/infra/explain.sql explain (format graphviz) select * from iceberg_data.\"workshop\".customer where mktsegment='MACHINERY'; EOF Run the Presto command to generate the explain output. ./presto-cli --catalog iceberg_data --schema workshop --file /mnt/infra/explain.sql > /tmp/plan.dot Remove Headers. cat /tmp/plan.dot | sed 's/\"\"/\"/g' | sed -z 's/\"//' | sed '$s/\"//' > /tmp/fixedplan.dot Generate the PNG file from the explain statement. dot -Tpng /tmp/fixedplan.dot > /tmp/plan.png Open a separate terminal window and issue the following command (using the SSH port number and server name supplied in your reservation).","title":"Predicate query to utilize partitions"},{"location":"wxd-analytics/#mac-osx-user_1","text":"scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png && open plan.png","title":"Mac OSX user"},{"location":"wxd-analytics/#windows-user_1","text":"scp -port watsonx@region.techzone-server.com:/tmp/plan.png plan.png & start \"\" \"plan.png\"","title":"Windows user"},{"location":"wxd-analytics/#linux-user-watsonxdata-server_1","text":"eog /tmp/plan.png","title":"Linux user (watsonx.data server)"},{"location":"wxd-analytics/#joins-and-aggregations","text":"This section will create an orders table to test joins and aggregations. Start Presto CLI with Workshop Schema. ./presto-cli --catalog iceberg_data --schema workshop Create the Orders Table. create table iceberg_data.workshop.orders as select * from tpch.tiny.orders; CREATE TABLE: 15000 rows Use a Windowing function. SELECT orderkey, clerk, totalprice, rank() OVER (PARTITION BY clerk ORDER BY totalprice DESC) AS rnk FROM orders ORDER BY clerk, rnk; Try to write a window function to show the custkey, orderdate, totalprice and priororder. The output should look like this. custkey | orderdate | totalprice | priororder ---------+------------+------------+------------ 1 | 1993-06-05 | 152411.41 | NULL 1 | 1993-08-13 | 83095.85 | 152411.41 1 | 1994-05-08 | 51134.82 | 83095.85 1 | 1995-10-29 | 165928.33 | 51134.82 1 | 1997-01-29 | 231040.44 | 165928.33 1 | 1997-03-04 | 270087.44 | 231040.44 1 | 1997-06-23 | 357345.46 | 270087.44 1 | 1997-11-18 | 28599.83 | 357345.46 1 | 1998-03-29 | 89230.03 | 28599.83 2 | 1993-02-19 | 170842.93 | 89230.03 2 | 1993-05-03 | 154867.09 | 170842.93 2 | 1993-09-30 | 143707.7 | 154867.09 2 | 1994-08-15 | 116247.57 | 143707.7 2 | 1994-12-29 | 45657.87 | 116247.57 2 | 1996-03-04 | 181875.6 | 45657.87","title":"Joins and Aggregations"},{"location":"wxd-analytics/#prepared-statements","text":"Save a query as a prepared statement. prepare customer_by_segment from select * from customer where mktsegment=?; Execute prepared statement using parameters. execute customer_by_segment using 'FURNITURE'; Note : This is only valid for the active session. Quit Presto. quit;","title":"Prepared statements"},{"location":"wxd-certificate/","text":"Watsonx.data Certificates Watsonx.data Certificate Failure Due to an unexpected and unannounced change to TechZone URLs, all self-signed certificates in the watsonx.data Developer image are now invalid. TechZone has changed the URLs for all new images. If you are attempting to connect to the watsonx.data system from outside the virtual machine, you will need to run the following commands to fix the self-signed certificate. Step 1: Connect to the Server Use the SSH port to connect into the server and make sure that you become the root user. sudo su - Step 2: Update the Certificate We need to update the certificate by using a utility in the developer toolbox. Start the toolbox code by switching to the bin directory and issuing the following command. cd /root/ibm-lh-dev/bin ./dev-sandbox Once inside the development container, you will need to update the program that generates the certificates. Note : The certificate should cover all TechZone locations. If for some reason your TechZone server does not match the pattern *.services.cloud.techzone.ibm.com , update it in the command below. sed -i '/DNS.14.*/a DNS.15 = *.services.cloud.techzone.ibm.com' /scripts/gen_certs.sh sed -i '/DNS.15.*/a DNS.16 = watsonxdata' /scripts/gen_certs.sh ./scripts/gen_certs.sh Once the script completes, exit the toolkit. exit Step 3: Stop and Restart the System The certificates need to be replaced in all the running containers. You must stop and restart them. You must include the diagnostic flag or else the system will not work properly. The startup will take some time to complete. The Postgres pod will display some warning messages which can be safely ignored. ./stop.sh export LH_RUN_MODE = diag ./start.sh Step 4: Generate Custom Certificate The first step is to copy the new certificates to the central /certs directory use by this image. docker cp ibm-lh-presto:/mnt/infra/tls/lh-ssl-ts.jks /certs/lh-ssl-ts.jks docker cp ibm-lh-presto:/mnt/infra/tls/cert.crt /certs/lh-ssl-ts.crt Next we need to generate the certificate file that is used by a number of the examples in the lab instructions. rm -f presto.cert echo QUIT | openssl s_client -showcerts -connect 127 .0.0.1:8443 | awk '/-----BEGIN CERTIFICATE-----/ {p=1}; p; /-----END CERTIFICATE-----/ {p=0}' > presto.cert You can print the certificate if you need it for connections from CP4D. cat presto.cert Step 5: Generate Java Keystore File The next step will create the Java Keystore file. When prompted, use a password of watsonx.data and say yes to accepting the certificate. Make sure that you see your host in the list. For instance, useast.services.cloud.techzone.ibm.com should be displayed when you see the results. rm -f presto-key.jks keytool -import -alias presto-cert -file ./presto.cert -keystore ./presto-key.jks The following is an example of the output from the keytool command. Owner: CN=Dummy-Self-signed-Cert, EMAILADDRESS=dummy@example.dum, OU=For-CPD, O=Data and AI, L=Home-Town, ST=XX, C=YY Issuer: CN=Dummy-Self-signed-Cert, EMAILADDRESS=dummy@example.dum, OU=For-CPD, O=Data and AI, L=Home-Town, ST=XX, C=YY Serial number: 73f26644ad83ac8cdf9afbda6006d4e52f244fac Valid from: Tue Mar 05 17:42:56 EST 2024 until: Wed May 23 18:42:56 EDT 2035 Certificate fingerprints: SHA1: 3A:6C:52:80:3D:14:CF:D0:E7:AC:14:13:6F:46:FB:B1:8C:BA:E4:37 SHA256: 28:E7:AD:4E:BA:5F:00:4C:B7:2E:61:3E:3B:96:E5:DF:01:D5:80:CE:1A:B3:EF:B7:86:11:26:4A:B6:7C:90:8A Signature algorithm name: SHA512withRSA Subject Public Key Algorithm: 2048-bit RSA key Version: 3 Extensions: #1: ObjectId: 2.5.29.37 Criticality=false ExtendedKeyUsages [ serverAuth ] #2: ObjectId: 2.5.29.17 Criticality=false SubjectAlternativeName [ DNSName: ibm-lh-presto-svc DNSName: *.svc.cluster.local DNSName: api-svc DNSName: *.api DNSName: localhost DNSName: ibm-lh-hive-metastore DNSName: ibm-lh-hive-metastore-svc DNSName: lhconsole-api-svc DNSName: lhconsole-nodeclient-svc DNSName: ibm-lh-ranger-svc DNSName: ibm-lh-javaapi-svc DNSName: ibm-lh-prestissimo-svc DNSName: ibm-lh-qhmm DNSName: ibm-lh-qhmm-svc DNSName: *.services.cloud.techzone.ibm.com DNSName: watsonxdata ] Trust this certificate? [no]: yes Certificate was added to keystore Step 6: Create Certificate and Keystore Copies The final step is to copy the certs and keystore values in a central location so they can be used in various scripts and notebooks. cp presto-key.jks /certs cd /certs chmod +r *.* cp -rf /certs /notebooks/","title":"Watsonx.data Certificates"},{"location":"wxd-certificate/#watsonxdata-certificates","text":"Watsonx.data Certificate Failure Due to an unexpected and unannounced change to TechZone URLs, all self-signed certificates in the watsonx.data Developer image are now invalid. TechZone has changed the URLs for all new images. If you are attempting to connect to the watsonx.data system from outside the virtual machine, you will need to run the following commands to fix the self-signed certificate.","title":"Watsonx.data Certificates"},{"location":"wxd-certificate/#step-1-connect-to-the-server","text":"Use the SSH port to connect into the server and make sure that you become the root user. sudo su -","title":"Step 1: Connect to the Server"},{"location":"wxd-certificate/#step-2-update-the-certificate","text":"We need to update the certificate by using a utility in the developer toolbox. Start the toolbox code by switching to the bin directory and issuing the following command. cd /root/ibm-lh-dev/bin ./dev-sandbox Once inside the development container, you will need to update the program that generates the certificates. Note : The certificate should cover all TechZone locations. If for some reason your TechZone server does not match the pattern *.services.cloud.techzone.ibm.com , update it in the command below. sed -i '/DNS.14.*/a DNS.15 = *.services.cloud.techzone.ibm.com' /scripts/gen_certs.sh sed -i '/DNS.15.*/a DNS.16 = watsonxdata' /scripts/gen_certs.sh ./scripts/gen_certs.sh Once the script completes, exit the toolkit. exit","title":"Step 2: Update the Certificate"},{"location":"wxd-certificate/#step-3-stop-and-restart-the-system","text":"The certificates need to be replaced in all the running containers. You must stop and restart them. You must include the diagnostic flag or else the system will not work properly. The startup will take some time to complete. The Postgres pod will display some warning messages which can be safely ignored. ./stop.sh export LH_RUN_MODE = diag ./start.sh","title":"Step 3: Stop and Restart the System"},{"location":"wxd-certificate/#step-4-generate-custom-certificate","text":"The first step is to copy the new certificates to the central /certs directory use by this image. docker cp ibm-lh-presto:/mnt/infra/tls/lh-ssl-ts.jks /certs/lh-ssl-ts.jks docker cp ibm-lh-presto:/mnt/infra/tls/cert.crt /certs/lh-ssl-ts.crt Next we need to generate the certificate file that is used by a number of the examples in the lab instructions. rm -f presto.cert echo QUIT | openssl s_client -showcerts -connect 127 .0.0.1:8443 | awk '/-----BEGIN CERTIFICATE-----/ {p=1}; p; /-----END CERTIFICATE-----/ {p=0}' > presto.cert You can print the certificate if you need it for connections from CP4D. cat presto.cert","title":"Step 4: Generate Custom Certificate"},{"location":"wxd-certificate/#step-5-generate-java-keystore-file","text":"The next step will create the Java Keystore file. When prompted, use a password of watsonx.data and say yes to accepting the certificate. Make sure that you see your host in the list. For instance, useast.services.cloud.techzone.ibm.com should be displayed when you see the results. rm -f presto-key.jks keytool -import -alias presto-cert -file ./presto.cert -keystore ./presto-key.jks The following is an example of the output from the keytool command. Owner: CN=Dummy-Self-signed-Cert, EMAILADDRESS=dummy@example.dum, OU=For-CPD, O=Data and AI, L=Home-Town, ST=XX, C=YY Issuer: CN=Dummy-Self-signed-Cert, EMAILADDRESS=dummy@example.dum, OU=For-CPD, O=Data and AI, L=Home-Town, ST=XX, C=YY Serial number: 73f26644ad83ac8cdf9afbda6006d4e52f244fac Valid from: Tue Mar 05 17:42:56 EST 2024 until: Wed May 23 18:42:56 EDT 2035 Certificate fingerprints: SHA1: 3A:6C:52:80:3D:14:CF:D0:E7:AC:14:13:6F:46:FB:B1:8C:BA:E4:37 SHA256: 28:E7:AD:4E:BA:5F:00:4C:B7:2E:61:3E:3B:96:E5:DF:01:D5:80:CE:1A:B3:EF:B7:86:11:26:4A:B6:7C:90:8A Signature algorithm name: SHA512withRSA Subject Public Key Algorithm: 2048-bit RSA key Version: 3 Extensions: #1: ObjectId: 2.5.29.37 Criticality=false ExtendedKeyUsages [ serverAuth ] #2: ObjectId: 2.5.29.17 Criticality=false SubjectAlternativeName [ DNSName: ibm-lh-presto-svc DNSName: *.svc.cluster.local DNSName: api-svc DNSName: *.api DNSName: localhost DNSName: ibm-lh-hive-metastore DNSName: ibm-lh-hive-metastore-svc DNSName: lhconsole-api-svc DNSName: lhconsole-nodeclient-svc DNSName: ibm-lh-ranger-svc DNSName: ibm-lh-javaapi-svc DNSName: ibm-lh-prestissimo-svc DNSName: ibm-lh-qhmm DNSName: ibm-lh-qhmm-svc DNSName: *.services.cloud.techzone.ibm.com DNSName: watsonxdata ] Trust this certificate? [no]: yes Certificate was added to keystore","title":"Step 5: Generate Java Keystore File"},{"location":"wxd-certificate/#step-6-create-certificate-and-keystore-copies","text":"The final step is to copy the certs and keystore values in a central location so they can be used in various scripts and notebooks. cp presto-key.jks /certs cd /certs chmod +r *.* cp -rf /certs /notebooks/","title":"Step 6: Create Certificate and Keystore Copies"},{"location":"wxd-connections/","text":"Database Connections There are three database systems that can be accessed inside and outside the virtual machine environment: watsonx.data Presto, Db2 LUW, MySQL and PostgreSQL. In order to access these images outside the Virtual machine image, you need the server name and port for the service. You will also need to download the presto-key.jks file for connecting to Presto. Connection Certificate Accessing watsonx.data (Presto) Accessing Db2 Accessing PostgreSQL Accessing MySQL Adding a database to watsonx.data Accessing watsonx.data via Python Accessing watsonx.data via Pandas Dataframes Generating a Certificate Adding a Service Watsonx.data Connection Certificate When connecting to the watsonx.data Presto database, you will need to have the connection certificate available to the client that you are using. Usually this location is your workstation, but it could be another service like CP4D. To extract the certificate to your local file system, use the following command in a terminal window. Replace the port and regions.techzone-server.com with the SSH values found in the TechZone reservation. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Credentials notebook. There you will find links to the certificates. Watsonx.data Presto Access When connecting to the Presto engine, choose the PrestoDB driver. Presto Internal Access For local access the following credentials are used: Hostname: localhost Port: 8443 Username: ibmlhadmin Password: password Database: tpch In addition, you need to set the following driver properties: SSL True SSLTrustStorePath /certs/presto-key.jks SSLTrustStorePassword watsonx.data Presto External Access The watsonx.data Presto database requires that the certificate be extracted from the image. See the section above on Connection Certificate for more details. In the following settings, remember to update the Hostname and Port to the values provided in your TechZone reservation. The database connection settings are: Hostname: region.techzone-server.com Port: port Username: ibmlhadmin Password: password Database: tpch In addition, you need to set the following driver properties: SSL True SSLTrustStorePath /mydownload/presto-key.jks SSLTrustStorePassword watsonx.data Note : The /mydownload/presto-key.jks value needs to be replaced with the location that you copied the key in the earlier step. Db2 Access When connecting to the Db2 engine, select the Db2 LUW driver. Db2 Internal Access The Db2 server can be accessed on port 50000 inside the virtual machine using the following credentials: Hostname - watsonxdata Port - 50000 Username - db2inst1 Password - db2inst1 Database - gosales SSL - off Db2 External Access When accessing the database outside the virtual machine, you must change the host to region.techzone-server.com and the port number based on your TechZone reservation. All the other settings remain the same. Hostname - region.techzone-server.com Port - port Username - db2inst1 Password - db2inst1 Database - gosales SSL - off PostgreSQL Access When connecting to the PostgreSQL engine, select the PostgreSQL driver. In order to connect to the PostgreSQL system, you will need to extract the admin password using the following command when connected to the watsonx.data system. cat /certs/passwords You can also retrieve the credentials by opening up the Credentials notebook in the Jupyter notebook service. PostgreSQL Internal Access When accessing the PostgreSQL database in the system, use the following settings. Hostname \u2013 ibm-lh-postgres Port \u2013 5432 Username \u2013 admin Password \u2013 The value that was extracted in the earlier step Database \u2013 gosales PostgreSQL External Access The following credentials are used for remote access. Hostname: regions.techzone-server.com Port: port Username: admin Password: The value that was extracted in the earlier step Database name: gosales MySQL Access When connecting to the MySQL engine, select the MySQL driver. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD echo $POSTGRES_PASSWORD > /tmp/postgres.pw MySQL Internal Access When accessing the MySQL database in the system, use the following settings. Hostname \u2013 watsonxdata Port \u2013 3306 Username \u2013 root Password - password Database \u2013 gosalesdw You must set the allowPublicKeyRetrieval to True for the connection to work with dBeaver. MySQL External Access The following credentials are used for remote access. Hostname: regions.techzone-server.com Port: port Username: root Password - password Database name: gosalesdw You must set the allowPublicKeyRetrieval to True for the connection to work with dBeaver (see above). Adding a Database to watsonx.data When adding a database engine to the watsonx.data system, make sure to change the database display name since that needs to be unique. For instance, when you add gosales database from Db2 to the system, the display name could be gosales as well. However, if you now add the PostgreSQL database to the system, the display name cannot be the same. You may want to differentiate databases with the same name by prefixing them with the database type. For instance, the gosales database could be shown as db2_gosales or pg_gosales so that you keep the names distinct. Once a database has been added, make sure to wait for a few moments before attempting to access the database. The Presto server takes a few moments to start up. To make sure that it is running, run the check_presto command in a terminal window and wait until it says the service is ready. When attempting to view the contents of a new database, the process may take a few minutes to complete. Refresh the browser window if you haven't seen any changes to the display. Accessing watsonx.data via Python In order to access the watsonx.data database (Presto), you will need to install the Presto client using the following command on your local machine. pip3 install presto-python-client Once the installation is complete, extract the certificate from the watsonx.data server that we will use in the connection. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Certificate notebook. Python and Jupyter Connection Code Your Python or Jupyter notebook code will need to import the prestodb library and then connect to watsonx.data using the connect call. import prestodb conn = prestodb.dbapi.connect( host='watsonxdata', port=8443, user='ibmlhadmin', catalog='tpch', schema='tiny', http_scheme='https', auth=prestodb.auth.BasicAuthentication(\"ibmlhadmin\", \"password\") ) conn._http_session.verify = '/certs/lh-ssl-ts.crt' cur = conn.cursor() In the above connection string, you will need to replace the following values: host - watsonxdata when connecting to the image externally, and ibm-lh-presto-svc when connecting internally catalog - What is the name of the catalog that we are accessing schema - The schema inside the catalog that will be used You also need to update the conn._http_session.verify value with the location where you downloaded the lh-ssl-ts.crt file. For internal connections, this value will be /certs/lh-ssl-ts.crt . Once connected, you can run an SQL statement and return the results. cur.execute(\"SELECT * FROM tpch.tiny.customer\") rows = cur.fetchall() The rows variable contains the answer set from the select statement. You can manipulate the row variable to view the results. rows[0] [1, 'Customer#000000001', 'IVhzIApeRb ot,c,E', 15, '25-989-741-2988', 711.56, 'BUILDING', 'to the even, regular platelets. regular, ironic epitaphs nag e'] The PrestoDB driver supports the DBAPI spec. For more details on the use of the DBAPI interface, please refer to https://peps.python.org/pep-0249/ . For instance, if you want to find the description of the columns returned, you would use the description function. cur.description [('custkey', 'bigint', None, None, None, None, None), ('name', 'varchar(25)', None, None, None, None, None), ('address', 'varchar(40)', None, None, None, None, None), ('nationkey', 'bigint', None, None, None, None, None), ('phone', 'varchar(15)', None, None, None, None, None), ('acctbal', 'double', None, None, None, None, None), ('mktsegment', 'varchar(10)', None, None, None, None, None), ('comment', 'varchar(117)', None, None, None, None, None)] Accessing watsonx.data via Pandas Dataframes The following code is required for accessing watsonx.data in Jupyter notebooks. Run the following code inside a notebook code cell. %pip install ipython-sql==0.4.1 %pip install sqlalchemy==1.4.46 %pip install sqlalchemy==1.4.46 \"pyhive[presto]\" The notebook may need a restart of the kernel to pick up the changes to the driver. If you are running in a Jupyter Lab environment, you can use the most current versions of the drivers. %pip install ipython-sql %pip install sqlalchemy %pip install sqlalchemy \"pyhive[presto]\" Once the drivers have been loaded, you will need to extract the certificate from the watsonx.data server that we will use in the connection. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Certificate notebook. In your Jupyter notebook, you will need to import a number of libraries. import pandas as pd import sqlalchemy from sqlalchemy import create_engine Create a notebook cell which will contain all the credentials that are required to connect. Change the catalog , schema and certfile to your values. userid = \"ibmlhadmin\" password = \"password\" hostname = \"watsonxdata\" port = \"8443\" catalog = \"tpch\" schema = \"tiny\" certfile = \"/certs/lh-ssl-ts.crt\" connect_args={ 'protocol': 'https', 'requests_kwargs': {'verify': f'{certfile}'} } In the above settings, you will need to replace the following values: hostname - region.techzone-server.com when connecting to the image externally, and ibm-lh-presto-svc when connecting internally catalog - What is the name of the catalog that we are accessing schema - The schema inside the catalog that will be used You also need to update the certfile value with the location where you downloaded the lh-ssl-ts.crt file. For internal connections, this value will be /certs/lh-ssl-ts.crt . To create a connection to the database, use the following syntax. engine = create_engine( f\"presto://{userid}:{password}@{hostname}:{port}/{catalog}/{schema}\", connect_args=connect_args ) Now that you have established a connection, you can use the Pandas read_sql_query function to execute a SELECT statement against the database. mypresto = pd.read_sql_query('SELECT * from tpch.tiny.customer',engine) The variable mypresto contains the dataframe generated from the SELECT statement. mypresto You can use the features of Pandas to generate plots of the data in your notebook. First make sure you have matplotlib installed. %pip install matplotlib The following query will compute the total account balance across all nation key values. sumbynation = pd.read_sql_query('SELECT \"nationkey\", sum(\"acctbal\") from tpch.tiny.customer group by \"nationkey\" order by 2',engine) Finally, we plot the results. df.plot(kind=\"bar\", x=\"FirstName\", y=\"LastName\") plt.show() Adding a Service The watsonx.data developer edition includes two open ports which can be used to externalize a service that you create in the image. For instance, you may choose to create a MongoDB or MSSQL container using Docker and want to access this service from your own dBeaver or Mongo tooling. Since port numbers vary between different databases, the watsonx.data system provides two port numbers that can be used by your service. Open Port 1 - Server: region.techzone-services.com: Port: 12345 Open Port 2 - Server: region.techzone-services.com: Port: 23456 The internal port numbers are 10000 (Port 1) and 10001 (Port 2). The following steps are required to use these ports with your service. Open the local Firewall Ports 10000/1 are not open by default in the image. You must explicitly open these ports with the firewall-cmd command. In a command line shell, as the root user, enter the following commands: sudo su - firewall-cmd --add-port={10000/tcp,10001/tcp} --zone=public --permanent firewall-cmd --reload You can use the following command to check that the ports are now open. firewall-cmd --list-ports Create your Service When creating your service, make sure to map the internal Docker port to either port 10000 or 10001. If you cannot remap the port, see the section on port redirection. For instance, the following command will start Microsoft SQLServer in Docker by mapping the host port 10000 to the SQLServer port of 1433 to 10000 ( -p 10000:1443 ). docker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Passw0rd12345678!\" \\ -p 10000:1433 --name mssql-server --hostname mssql-server \\ -d mcr.microsoft.com/mssql/server:2019-latest You can check the port mapping with the following command. docker container ls --format \"table {{.ID}}\\t{{.Names}}\\t{{.Ports}}\" -a | grep mssql-server When creating a connection to this database using an external tool, make sure to use the port number supplied in the reservation details (Open Port 1 is for port 10000 and Open Port 2 is for port 10001). Port Redirection If you already have an existing service mapped to a different port, you can use port redirection to use either port 10000 or 10001. For instance, assume that the previous creation of the SQLServer database used port 1433. docker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Passw0rd12345678!\" \\ -p 1433:1433 --name mssql-server --hostname mssql-server \\ -d mcr.microsoft.com/mssql/server:2019-latest Once the service is up and running, you can redirect the traffic on port 10000/1 to the port of your docker service. firewall-cmd --add-forward-port=port=10000:proto=tcp:toport=1433 --permanent --zone=public firewall-cmd --reload If you need to remove the redirection, use the following command. firewall-cmd --remove-forward-port=port=10000:proto=tcp:toport=1433:toaddr= --permanent --zone=public firewall-cmd --reload Accessing your Service When referring to your service from an external location, always use the port numbers that are provided for Open Port 1 or 2. Open Port 1 - Server: region.techzone-services.com: Port: 12345 Open Port 2 - Server: region.techzone-services.com: Port: 23456 Your server will be region.techzone-services.com and the port number will be either of the two port numbers provided. Remember that this port number will need to be opened in the server and a Docker mapping to the open port or a firewall port redirection will be required.","title":"Database Connections"},{"location":"wxd-connections/#database-connections","text":"There are three database systems that can be accessed inside and outside the virtual machine environment: watsonx.data Presto, Db2 LUW, MySQL and PostgreSQL. In order to access these images outside the Virtual machine image, you need the server name and port for the service. You will also need to download the presto-key.jks file for connecting to Presto. Connection Certificate Accessing watsonx.data (Presto) Accessing Db2 Accessing PostgreSQL Accessing MySQL Adding a database to watsonx.data Accessing watsonx.data via Python Accessing watsonx.data via Pandas Dataframes Generating a Certificate Adding a Service","title":"Database Connections"},{"location":"wxd-connections/#watsonxdata-connection-certificate","text":"When connecting to the watsonx.data Presto database, you will need to have the connection certificate available to the client that you are using. Usually this location is your workstation, but it could be another service like CP4D. To extract the certificate to your local file system, use the following command in a terminal window. Replace the port and regions.techzone-server.com with the SSH values found in the TechZone reservation. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Credentials notebook. There you will find links to the certificates.","title":"Watsonx.data Connection Certificate"},{"location":"wxd-connections/#watsonxdata-presto-access","text":"When connecting to the Presto engine, choose the PrestoDB driver.","title":"Watsonx.data Presto Access"},{"location":"wxd-connections/#presto-internal-access","text":"For local access the following credentials are used: Hostname: localhost Port: 8443 Username: ibmlhadmin Password: password Database: tpch In addition, you need to set the following driver properties: SSL True SSLTrustStorePath /certs/presto-key.jks SSLTrustStorePassword watsonx.data","title":"Presto Internal Access"},{"location":"wxd-connections/#presto-external-access","text":"The watsonx.data Presto database requires that the certificate be extracted from the image. See the section above on Connection Certificate for more details. In the following settings, remember to update the Hostname and Port to the values provided in your TechZone reservation. The database connection settings are: Hostname: region.techzone-server.com Port: port Username: ibmlhadmin Password: password Database: tpch In addition, you need to set the following driver properties: SSL True SSLTrustStorePath /mydownload/presto-key.jks SSLTrustStorePassword watsonx.data Note : The /mydownload/presto-key.jks value needs to be replaced with the location that you copied the key in the earlier step.","title":"Presto External Access"},{"location":"wxd-connections/#db2-access","text":"When connecting to the Db2 engine, select the Db2 LUW driver.","title":"Db2 Access"},{"location":"wxd-connections/#db2-internal-access","text":"The Db2 server can be accessed on port 50000 inside the virtual machine using the following credentials: Hostname - watsonxdata Port - 50000 Username - db2inst1 Password - db2inst1 Database - gosales SSL - off","title":"Db2 Internal Access"},{"location":"wxd-connections/#db2-external-access","text":"When accessing the database outside the virtual machine, you must change the host to region.techzone-server.com and the port number based on your TechZone reservation. All the other settings remain the same. Hostname - region.techzone-server.com Port - port Username - db2inst1 Password - db2inst1 Database - gosales SSL - off","title":"Db2 External Access"},{"location":"wxd-connections/#postgresql-access","text":"When connecting to the PostgreSQL engine, select the PostgreSQL driver. In order to connect to the PostgreSQL system, you will need to extract the admin password using the following command when connected to the watsonx.data system. cat /certs/passwords You can also retrieve the credentials by opening up the Credentials notebook in the Jupyter notebook service.","title":"PostgreSQL Access"},{"location":"wxd-connections/#postgresql-internal-access","text":"When accessing the PostgreSQL database in the system, use the following settings. Hostname \u2013 ibm-lh-postgres Port \u2013 5432 Username \u2013 admin Password \u2013 The value that was extracted in the earlier step Database \u2013 gosales","title":"PostgreSQL Internal Access"},{"location":"wxd-connections/#postgresql-external-access","text":"The following credentials are used for remote access. Hostname: regions.techzone-server.com Port: port Username: admin Password: The value that was extracted in the earlier step Database name: gosales","title":"PostgreSQL External Access"},{"location":"wxd-connections/#mysql-access","text":"When connecting to the MySQL engine, select the MySQL driver. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD echo $POSTGRES_PASSWORD > /tmp/postgres.pw","title":"MySQL Access"},{"location":"wxd-connections/#mysql-internal-access","text":"When accessing the MySQL database in the system, use the following settings. Hostname \u2013 watsonxdata Port \u2013 3306 Username \u2013 root Password - password Database \u2013 gosalesdw You must set the allowPublicKeyRetrieval to True for the connection to work with dBeaver.","title":"MySQL Internal Access"},{"location":"wxd-connections/#mysql-external-access","text":"The following credentials are used for remote access. Hostname: regions.techzone-server.com Port: port Username: root Password - password Database name: gosalesdw You must set the allowPublicKeyRetrieval to True for the connection to work with dBeaver (see above).","title":"MySQL External Access"},{"location":"wxd-connections/#adding-a-database-to-watsonxdata","text":"When adding a database engine to the watsonx.data system, make sure to change the database display name since that needs to be unique. For instance, when you add gosales database from Db2 to the system, the display name could be gosales as well. However, if you now add the PostgreSQL database to the system, the display name cannot be the same. You may want to differentiate databases with the same name by prefixing them with the database type. For instance, the gosales database could be shown as db2_gosales or pg_gosales so that you keep the names distinct. Once a database has been added, make sure to wait for a few moments before attempting to access the database. The Presto server takes a few moments to start up. To make sure that it is running, run the check_presto command in a terminal window and wait until it says the service is ready. When attempting to view the contents of a new database, the process may take a few minutes to complete. Refresh the browser window if you haven't seen any changes to the display.","title":"Adding a Database to watsonx.data"},{"location":"wxd-connections/#accessing-watsonxdata-via-python","text":"In order to access the watsonx.data database (Presto), you will need to install the Presto client using the following command on your local machine. pip3 install presto-python-client Once the installation is complete, extract the certificate from the watsonx.data server that we will use in the connection. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Certificate notebook.","title":"Accessing watsonx.data via Python"},{"location":"wxd-connections/#python-and-jupyter-connection-code","text":"Your Python or Jupyter notebook code will need to import the prestodb library and then connect to watsonx.data using the connect call. import prestodb conn = prestodb.dbapi.connect( host='watsonxdata', port=8443, user='ibmlhadmin', catalog='tpch', schema='tiny', http_scheme='https', auth=prestodb.auth.BasicAuthentication(\"ibmlhadmin\", \"password\") ) conn._http_session.verify = '/certs/lh-ssl-ts.crt' cur = conn.cursor() In the above connection string, you will need to replace the following values: host - watsonxdata when connecting to the image externally, and ibm-lh-presto-svc when connecting internally catalog - What is the name of the catalog that we are accessing schema - The schema inside the catalog that will be used You also need to update the conn._http_session.verify value with the location where you downloaded the lh-ssl-ts.crt file. For internal connections, this value will be /certs/lh-ssl-ts.crt . Once connected, you can run an SQL statement and return the results. cur.execute(\"SELECT * FROM tpch.tiny.customer\") rows = cur.fetchall() The rows variable contains the answer set from the select statement. You can manipulate the row variable to view the results. rows[0] [1, 'Customer#000000001', 'IVhzIApeRb ot,c,E', 15, '25-989-741-2988', 711.56, 'BUILDING', 'to the even, regular platelets. regular, ironic epitaphs nag e'] The PrestoDB driver supports the DBAPI spec. For more details on the use of the DBAPI interface, please refer to https://peps.python.org/pep-0249/ . For instance, if you want to find the description of the columns returned, you would use the description function. cur.description [('custkey', 'bigint', None, None, None, None, None), ('name', 'varchar(25)', None, None, None, None, None), ('address', 'varchar(40)', None, None, None, None, None), ('nationkey', 'bigint', None, None, None, None, None), ('phone', 'varchar(15)', None, None, None, None, None), ('acctbal', 'double', None, None, None, None, None), ('mktsegment', 'varchar(10)', None, None, None, None, None), ('comment', 'varchar(117)', None, None, None, None, None)]","title":"Python and Jupyter Connection Code"},{"location":"wxd-connections/#accessing-watsonxdata-via-pandas-dataframes","text":"The following code is required for accessing watsonx.data in Jupyter notebooks. Run the following code inside a notebook code cell. %pip install ipython-sql==0.4.1 %pip install sqlalchemy==1.4.46 %pip install sqlalchemy==1.4.46 \"pyhive[presto]\" The notebook may need a restart of the kernel to pick up the changes to the driver. If you are running in a Jupyter Lab environment, you can use the most current versions of the drivers. %pip install ipython-sql %pip install sqlalchemy %pip install sqlalchemy \"pyhive[presto]\" Once the drivers have been loaded, you will need to extract the certificate from the watsonx.data server that we will use in the connection. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Certificate notebook. In your Jupyter notebook, you will need to import a number of libraries. import pandas as pd import sqlalchemy from sqlalchemy import create_engine Create a notebook cell which will contain all the credentials that are required to connect. Change the catalog , schema and certfile to your values. userid = \"ibmlhadmin\" password = \"password\" hostname = \"watsonxdata\" port = \"8443\" catalog = \"tpch\" schema = \"tiny\" certfile = \"/certs/lh-ssl-ts.crt\" connect_args={ 'protocol': 'https', 'requests_kwargs': {'verify': f'{certfile}'} } In the above settings, you will need to replace the following values: hostname - region.techzone-server.com when connecting to the image externally, and ibm-lh-presto-svc when connecting internally catalog - What is the name of the catalog that we are accessing schema - The schema inside the catalog that will be used You also need to update the certfile value with the location where you downloaded the lh-ssl-ts.crt file. For internal connections, this value will be /certs/lh-ssl-ts.crt . To create a connection to the database, use the following syntax. engine = create_engine( f\"presto://{userid}:{password}@{hostname}:{port}/{catalog}/{schema}\", connect_args=connect_args ) Now that you have established a connection, you can use the Pandas read_sql_query function to execute a SELECT statement against the database. mypresto = pd.read_sql_query('SELECT * from tpch.tiny.customer',engine) The variable mypresto contains the dataframe generated from the SELECT statement. mypresto You can use the features of Pandas to generate plots of the data in your notebook. First make sure you have matplotlib installed. %pip install matplotlib The following query will compute the total account balance across all nation key values. sumbynation = pd.read_sql_query('SELECT \"nationkey\", sum(\"acctbal\") from tpch.tiny.customer group by \"nationkey\" order by 2',engine) Finally, we plot the results. df.plot(kind=\"bar\", x=\"FirstName\", y=\"LastName\") plt.show()","title":"Accessing watsonx.data via Pandas Dataframes"},{"location":"wxd-connections/#adding-a-service","text":"The watsonx.data developer edition includes two open ports which can be used to externalize a service that you create in the image. For instance, you may choose to create a MongoDB or MSSQL container using Docker and want to access this service from your own dBeaver or Mongo tooling. Since port numbers vary between different databases, the watsonx.data system provides two port numbers that can be used by your service. Open Port 1 - Server: region.techzone-services.com: Port: 12345 Open Port 2 - Server: region.techzone-services.com: Port: 23456 The internal port numbers are 10000 (Port 1) and 10001 (Port 2). The following steps are required to use these ports with your service.","title":"Adding a Service"},{"location":"wxd-connections/#open-the-local-firewall","text":"Ports 10000/1 are not open by default in the image. You must explicitly open these ports with the firewall-cmd command. In a command line shell, as the root user, enter the following commands: sudo su - firewall-cmd --add-port={10000/tcp,10001/tcp} --zone=public --permanent firewall-cmd --reload You can use the following command to check that the ports are now open. firewall-cmd --list-ports","title":"Open the local Firewall"},{"location":"wxd-connections/#create-your-service","text":"When creating your service, make sure to map the internal Docker port to either port 10000 or 10001. If you cannot remap the port, see the section on port redirection. For instance, the following command will start Microsoft SQLServer in Docker by mapping the host port 10000 to the SQLServer port of 1433 to 10000 ( -p 10000:1443 ). docker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Passw0rd12345678!\" \\ -p 10000:1433 --name mssql-server --hostname mssql-server \\ -d mcr.microsoft.com/mssql/server:2019-latest You can check the port mapping with the following command. docker container ls --format \"table {{.ID}}\\t{{.Names}}\\t{{.Ports}}\" -a | grep mssql-server When creating a connection to this database using an external tool, make sure to use the port number supplied in the reservation details (Open Port 1 is for port 10000 and Open Port 2 is for port 10001).","title":"Create your Service"},{"location":"wxd-connections/#port-redirection","text":"If you already have an existing service mapped to a different port, you can use port redirection to use either port 10000 or 10001. For instance, assume that the previous creation of the SQLServer database used port 1433. docker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Passw0rd12345678!\" \\ -p 1433:1433 --name mssql-server --hostname mssql-server \\ -d mcr.microsoft.com/mssql/server:2019-latest Once the service is up and running, you can redirect the traffic on port 10000/1 to the port of your docker service. firewall-cmd --add-forward-port=port=10000:proto=tcp:toport=1433 --permanent --zone=public firewall-cmd --reload If you need to remove the redirection, use the following command. firewall-cmd --remove-forward-port=port=10000:proto=tcp:toport=1433:toaddr= --permanent --zone=public firewall-cmd --reload","title":"Port Redirection"},{"location":"wxd-connections/#accessing-your-service","text":"When referring to your service from an external location, always use the port numbers that are provided for Open Port 1 or 2. Open Port 1 - Server: region.techzone-services.com: Port: 12345 Open Port 2 - Server: region.techzone-services.com: Port: 23456 Your server will be region.techzone-services.com and the port number will be either of the two port numbers provided. Remember that this port number will need to be opened in the server and a Docker mapping to the open port or a firewall port redirection will be required.","title":"Accessing your Service"},{"location":"wxd-datasets-gosales/","text":"Appendix E - Watson's Great Outdoors Company The Watson's Great Outdoors Company, or GO Sales, or any variation of the Sample Outdoors name, is the name of a fictitious business operation whose sample data is used to develop sample applications for IBM\u00ae and IBM customers. Its fictitious records include sample data for sales transactions, product distribution, finance, and human resources. Any resemblance to actual names, addresses, contact numbers, or transaction values, is coincidental. Unauthorized duplication is prohibited. Two links that provide more details on the database. Watson's Great Outdoors Company Watson's Great Outdoors Database Reference The second link will say that there is no content available, but if you click on the down arrow you will see the table names. Table Definitions These tables are created under the GOSALESDW schema. Thanks to Michael Schapira for generating the following ER diagram. You may need to download the image to zoom in on the relationships. DIST_INVENTORY_FACT Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER PRODUCT_KEY INTEGER OPENING_INVENTORY INTEGER QUANTITY_SHIPPED INTEGER ADDITIONS INTEGER UNIT_COST DECIMAL CLOSING_INVENTORY INTEGER AVERAGE_UNIT_COST DECIMAL DIST_PRODUCT_FORECASE_FACT Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BASE_PRODUCT_KEY INTEGER BRANCH_KEY INTEGER UNIT_COST DECIMAL UNIT_PRICE DECIMAL EXPECTED_VOLUME INTEGER DIST_RETURNED_ITEMS_FACT Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_SITE_KEY INTEGER PRODUCT_KEY INTEGER ORDER_METHOD_KEY INTEGER SALES_ORDER_KEY INTEGER RETURN_REASON_KEY INTEGER RETURN_QUANTITY INTEGER DIST_RETURN_REASON_DIM Column Type RETURN_REASON_KEY INTEGER RETURN_REASON_CODE INTEGER REASON_DESCRIPTION_EN VARCHAR EMP_EMPLOYEE_DIM Column Type EMPLOYEE_KEY INTEGER MANAGER_CODE1 INTEGER MANAGER1 VARCHAR MANAGER_MB1 VARCHAR MANAGER_CODE2 INTEGER MANAGER2 VARCHAR MANAGER_MB2 VARCHAR MANAGER_CODE3 INTEGER MANAGER3 VARCHAR MANAGER_MB3 VARCHAR MANAGER_CODE4 INTEGER MANAGER4 VARCHAR MANAGER_MB4 VARCHAR MANAGER_CODE5 INTEGER MANAGER5 VARCHAR MANAGER_MB5 VARCHAR MANAGER_CODE6 INTEGER MANAGER6 VARCHAR MANAGER_MB6 VARCHAR EMPLOYEE_CODE INTEGER EMPLOYEE_NAME VARCHAR FIRST_NAME VARCHAR LAST_NAME VARCHAR EMPLOYEE_NAME_MB VARCHAR FIRST_NAME_MB VARCHAR LAST_NAME_MB VARCHAR MANAGER_CODE INTEGER ORGANIZATION_CODE VARCHAR ADDRESS1 VARCHAR ADDRESS2 VARCHAR ADDRESS1_MB VARCHAR ADDRESS2_MB VARCHAR CITY VARCHAR CITY_MB VARCHAR PROV_STATE VARCHAR PROV_STATE_MB VARCHAR POSTAL_ZONE VARCHAR BRANCH_CODE INTEGER BIRTH_DATE DATE GENDER_CODE SMALLINT WORK_PHONE VARCHAR EXTENSION VARCHAR FAX VARCHAR EMAIL VARCHAR DATE_HIRED DATE TERMINATION_CODE INTEGER TERMINATION_DATE DATE POSITION_START_DATE DATE POSITION_CODE INTEGER EMPLOYEE_LEVEL SMALLINT ACTIVE_INDICATOR SMALLINT RECORD_START_DATE DATE RECORD_END_DATE DATE MANAGER_KEY INTEGER EMP_EXPENSE_FACT Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER EXPENSE_TYPE_KEY INTEGER ACCOUNT_KEY INTEGER EXPENSE_UNIT_QUANTITY FLOAT EXPENSE_TOTAL DECIMAL EMP_EXPENSE_PLAN_FACT Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER EXPENSE_TYPE_KEY INTEGER ACCOUNT_KEY VARCHAR EXPENSE_PLAN_TOTAL DECIMAL EMP_EXPENSE_TYPE_DIM Column Type EXPENSE_TYPE_KEY INTEGER EXPENSE_GROUP_CODE INTEGER EXPENSE_TYPE_CODE INTEGER EXPENSE_UNIT_CODE INTEGER EXPENSE_GROUP_EN VARCHAR EXPENSE_TYPE_EN VARCHAR EMP_EXPENSE_UNIT_LOOKUP Column Type EXPENSE_UNIT_CODE INTEGER EXPENSE_UNIT_EN VARCHAR EMP_POSITION_DIM Column Type POSITION_KEY INTEGER POSITION_CODE1 INTEGER POSITION_CODE2 INTEGER POSITION_CODE3 INTEGER POSITION_CODE INTEGER POSITION_PARENT INTEGER MIN_SALARY DECIMAL MAX_SALARY DECIMAL PAID_HOURLY INTEGER POSITION_LEVEL SMALLINT EMP_POSITION_LOOKUP Column Type POSITION_CODE INTEGER POSITION_EN VARCHAR EMP_POSITION_SUMMARY_FACT Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER POSITION_COUNT INTEGER PLANNED_POSITION_COUNT INTEGER INTERNAL_HIRES INTEGER EXTERNAL_HIRES INTEGER TERMINATIONS INTEGER EMP_RANKING_DIM Column Type EMPLOYEE_RANKING_KEY INTEGER RANKING_CODE INTEGER RANKING_DESCRIPTION_EN VARCHAR EMP_RANKING_FACT Column Type ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER DAY_KEY INTEGER EMPLOYEE_RANKING_KEY INTEGER RANKING_CODE INTEGER EMP_RECRUITMENT_DIM Column Type RECRUITMENT_MEDIUM_KEY INTEGER RECRUITMENT_MEDIUM_CODE INTEGER RECRUITMENT_TYPE_CODE INTEGER RECRUITMENT_MEDIUM_NAME_EN VARCHAR RECRUITMENT_TYPE_EN VARCHAR EMP_RECRUITMENT_FACT Column Type POST_DAY_KEY INTEGER RECRUITMENT_MEDIUM_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER POSITION_KEY INTEGER POSITION_POSTING_DATE DATE POSITION_FILLED_DATE DATE POSITION_START_DATE DATE DAYS_TO_FILL INTEGER EMP_SUCCESSION_FACT Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER SUCCESSOR_EMPLOYEE_KEY INTEGER SUCCESSOR_POSITION_KEY INTEGER SUCCESSOR_STATUS_KEY INTEGER PERCENT_READY FLOAT TARGET_PERCENT_READY FLOAT EMP_SUCCESSION_STATUS_DIM Column Type SUCCESSOR_STATUS_KEY INTEGER SUCCESSOR_STATUS_CODE INTEGER SUCCESSOR_STATUS_EN VARCHAR EMP_SUMMARY_FACT Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER SALARY DECIMAL PAY_INCREASE FLOAT BONUS FLOAT VACATION_DAYS_TAKEN FLOAT SICK_DAYS_TAKEN FLOAT EMP_SURVEY_FACT Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_TOPIC_KEY INTEGER EMPLOYEE_TOPIC_SCORE FLOAT SATISFACTION_KEY INTEGER EMP_SURVEY_TARG_FACT Column Type MONTH_KEY INTEGER EMPLOYEE_TOPIC_KEY INTEGER EMPLOYEE_TOPIC_TARGET FLOAT EMPLOYEE_SURVEY_BENCHMARK FLOAT EMP_SURVEY_TOPIC_DIM Column Type EMPLOYEE_TOPIC_KEY INTEGER EMPLOYEE_TOPIC_CODE INTEGER EMPLOYEE_TOPIC_EN VARCHAR EMP_TERMINATION_LOOKUP Column Type TERMINATION_CODE INTEGER TERMINATION_REASON_EN VARCHAR EMP_TRAINING_DIM Column Type TRAINING_KEY INTEGER COURSE_CODE INTEGER COURSE_COST DECIMAL COURSE_DAYS FLOAT COURSE_NAME_EN VARCHAR EMP_TRAINING_FACT Column Type ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER DAY_KEY INTEGER EXPENSE_TYPE_KEY INTEGER TRAINING_KEY INTEGER COURSE_COST DECIMAL COURSE_DAYS FLOAT FIN_ACCOUNT_CLASS_LOOKUP Column Type ACCOUNT_CLASS_CODE INTEGER ACCOUNT_CLASS_EN VARCHAR FIN_ACCOUNT_DIM Column Type ACCOUNT_KEY INTEGER ACCOUNT_CODE1 VARCHAR ACCOUNT_CODE2 VARCHAR ACCOUNT_CODE3 VARCHAR ACCOUNT_CODE4 VARCHAR ACCOUNT_CODE5 VARCHAR ACCOUNT_CODE6 VARCHAR ACCOUNT_CODE7 VARCHAR ACCOUNT_CODE8 VARCHAR ACCOUNT_CODE9 VARCHAR ACCOUNT_CODE10 VARCHAR ACCOUNT_CODE11 VARCHAR ACCOUNT_CODE12 VARCHAR ACCOUNT_CODE13 VARCHAR ACCOUNT_CODE14 VARCHAR ACCOUNT_CODE15 VARCHAR ACCOUNT_CODE16 VARCHAR ACCOUNT_CODE VARCHAR ACCOUNT_PARENT VARCHAR DEBIT_OR_CREDIT CHAR(3) ACCOUNT_TYPE_CODE CHAR(3) ACCOUNT_CLASS_CODE INTEGER ACCOUNT_LEVEL INTEGER AGGREGATION_SIGN CHAR(3) FIN_ACCOUNT_NAME_LOOKUP Column Type ACCOUNT_CODE VARCHAR ACCOUNT_NAME_EN VARCHAR FIN_ACCOUNT_TYPE_LOOKUP Column Type ACCOUNT_TYPE_CODE CHAR(3) ACCOUNT_TYPE_EN VARCHAR FIN_FINANCE_FACT Column Type SUBMISSION_KEY INTEGER ORGANIZATION_KEY INTEGER ACCOUNT_KEY INTEGER MONTH_KEY INTEGER AMOUNT_YEAR_TO_DATE DECIMAL AMOUNT_MONTH DECIMAL FIN_SUBM_CURRENCY_LOOKUP Column Type SUBMISSION_CURRENCY_CODE VARCHAR SUBMISSION_CURRENCY_EN VARCHAR FIN_SUBM_DIM Column Type UBMISSION_KEY INTEGER UBMISSION_CODE VARCHAR UBMISSION_NAME_EN VARCHAR UBMISSION_YEAR INTEGER UBMISSION_TYPE_CODE CHAR(3) UBMISSION_CURRENCY_CODE VARCHAR FIN_SUBM_TYPE_LOOKUP Column Type SUBMISSION_TYPE_CODE CHAR(3) SUBMISSION_TYPE_EN VARCHAR GO_BRANCH_DIM Column Type BRANCH_KEY INTEGER BRANCH_CODE INTEGER ADDRESS1 VARCHAR ADDRESS2 VARCHAR CITY VARCHAR PROV_STATE VARCHAR ADDRESS1_MB VARCHAR ADDRESS2_MB VARCHAR CITY_MB VARCHAR PROV_STATE_MB VARCHAR POSTAL_ZONE VARCHAR COUNTRY_CODE INTEGER WAREHOUSE_BRANCH_CODE INTEGER GO_GENDER_LOOKUP Column Type GENDER_CODE SMALLINT GENDER_EN VARCHAR GO_ORG_DIM Column Type ORGANIZATION_KEY INTEGER ORGANIZATION_CODE1 VARCHAR ORGANIZATION_CODE2 VARCHAR ORGANIZATION_CODE3 VARCHAR ORGANIZATION_CODE4 VARCHAR ORGANIZATION_CODE VARCHAR ORGANIZATION_PARENT VARCHAR ORGANIZATION_LEVEL SMALLINT GO_ORG_NAME_LOOKUP Column Type ORGANIZATION_CODE VARCHAR ORGANIZATION_NAME_EN VARCHAR GO_REGION_DIM Column Type COUNTRY_KEY INTEGER COUNTRY_CODE INTEGER FLAG_IMAGE VARCHAR ISO_THREE_LETTER_CODE VARCHAR ISO_TWO_LETTER_CODE VARCHAR ISO_THREE_DIGIT_CODE VARCHAR REGION_KEY INTEGER REGION_CODE INTEGER REGION_EN VARCHAR COUNTRY_EN VARCHAR GO_SATISFACTION_DIM Column Type SATISFACTION_KEY INTEGER SATISFACTION_CODE INTEGER SATISFACTION_LOWER_LIMIT FLOAT SATISFACTION_UPPER_LIMIT FLOAT SATISFACTION_DESCRIPTION_EN VARCHAR GO_TIME_DIM Column Type DAY_KEY INTEGER DAY_DATE DATE MONTH_KEY INTEGER CURRENT_MONTH SMALLINT MONTH_NUMBER INTEGER QUARTER_KEY INTEGER CURRENT_QUARTER SMALLINT CURRENT_YEAR SMALLINT DAY_OF_WEEK SMALLINT DAY_OF_MONTH SMALLINT DAYS_IN_MONTH SMALLINT DAY_OF_YEAR SMALLINT WEEK_OF_MONTH SMALLINT WEEK_OF_QUARTER SMALLINT WEEK_OF_YEAR SMALLINT MONTH_EN VARCHAR WEEKDAY_EN VARCHAR GO_TIME_QUARTER_LOOKUP Column Type QUARTER_KEY INTEGER QUARTER_EN VARCHAR MRK_ACTIVITY_STATUS_DIM Column Type ACTIVITY_STATUS_KEY INTEGER ACTIVITY_STATUS_CODE SMALLINT ACTIVITY_STATUS_EN VARCHAR MRK_BUNDLE_GROUP_LOOKUP Column Type BUNDLE_GROUP_CODE INTEGER BUNDLE_GROUP_EN VARCHAR MRK_CAMPAIGN_LOOKUP Column Type CAMPAIGN_CODE INTEGER CAMPAIGN_NAME_EN VARCHAR MRK_PRODUCT_SURVEY_DIM Column Type PRODUCT_SURVEY_KEY INTEGER PRODUCT_TOPIC_CODE INTEGER PRODUCT_TOPIC_EN VARCHAR MRK_PRODUCT_SURVEY_FACT Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER RTL_COUNTRY_KEY INTEGER BRANCH_KEY INTEGER PRODUCT_KEY INTEGER PRODUCT_SURVEY_KEY INTEGER PRODUCT_TOPIC_SCORE FLOAT MRK_PROD_SURVEY_TARG_FACT Column Type MONTH_KEY INTEGER PRODUCT_KEY INTEGER PRODUCT_SURVEY_KEY INTEGER PRODUCT_TOPIC_TARGET FLOAT MRK_PROMOTION_DIM Column Type PROMOTION_KEY INTEGER PROMOTION_CODE INTEGER CAMPAIGN_CODE INTEGER BUNDLE_GROUP_CODE INTEGER PROMOTION_NAME_EN VARCHAR MRK_PROMOTION_FACT Column Type ORGANIZATION_KEY INTEGER ORDER_DAY_KEY INTEGER RTL_COUNTRY_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_KEY INTEGER PRODUCT_KEY INTEGER PROMOTION_KEY INTEGER SALES_ORDER_KEY INTEGER QUANTITY SMALLINT UNIT_COST DECIMAL UNIT_PRICE DECIMAL UNIT_SALE_PRICE DECIMAL GROSS_MARGIN FLOAT SALE_TOTAL DECIMAL GROSS_PROFIT DECIMAL MRK_PROMOTION_PLAN_FACT Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER RTL_COUNTRY_KEY INTEGER PRODUCT_KEY INTEGER PROMOTION_KEY INTEGER UNIT_COST DECIMAL UNIT_PRICE DECIMAL UNIT_SALE_PRICE DECIMAL PROMOTION_PLAN_QUANTITY INTEGER PROMOTION_PLAN_REVENUE DECIMAL MRK_RTL_SURVEY_DIM Column Type RETAILER_SURVEY_KEY INTEGER RETAILER_TOPIC_CODE INTEGER RETAILER_TOPIC_EN VARCHAR MRK_RTL_SURVEY_FACT Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER RTL_COUNTRY_KEY INTEGER RETAILER_KEY INTEGER RETAILER_SURVEY_KEY INTEGER RETAILER_TOPIC_SCORE FLOAT MRK_RTL_SURVEY_TARG_FACT Column Type RETAILER_SURVEY_KEY INTEGER MONTH_KEY INTEGER RETAILER_TOPIC_WEIGHT INTEGER RETAILER_TOPIC_TARGET FLOAT SLS_ORDER_METHOD_DIM Column Type ORDER_METHOD_KEY INTEGER ORDER_METHOD_CODE INTEGER ORDER_METHOD_EN VARCHAR SLS_PRODUCT_BRAND_LOOKUP Column Type PRODUCT_BRAND_CODE INTEGER PRODUCT_BRAND_EN VARCHAR SLS_PRODUCT_COLOR_LOOKUP Column Type PRODUCT_COLOR_CODE INTEGER PRODUCT_COLOR_EN VARCHAR SLS_PRODUCT_DIM Column Type PRODUCT_KEY INTEGER PRODUCT_LINE_CODE INTEGER PRODUCT_TYPE_KEY INTEGER PRODUCT_TYPE_CODE INTEGER PRODUCT_NUMBER INTEGER BASE_PRODUCT_KEY INTEGER BASE_PRODUCT_NUMBER INTEGER PRODUCT_COLOR_CODE INTEGER PRODUCT_SIZE_CODE INTEGER PRODUCT_BRAND_KEY INTEGER PRODUCT_BRAND_CODE INTEGER PRODUCT_IMAGE VARCHAR INTRODUCTION_DATE DATE DISCONTINUED_DATE DATE SLS_PRODUCT_LINE_LOOKUP Column Type PRODUCT_LINE_CODE INTEGER PRODUCT_LINE_EN VARCHAR SLS_PRODUCT_LOOKUP Column Type PRODUCT_NUMBER INTEGER PRODUCT_LANGUAGE VARCHAR PRODUCT_NAME VARCHAR PRODUCT_DESCRIPTION VARCHAR SLS_PRODUCT_SIZE_LOOKUP Column Type PRODUCT_SIZE_CODE INTEGER PRODUCT_SIZE_EN VARCHAR SLS_PRODUCT_TYPE_LOOKUP Column Type PRODUCT_TYPE_CODE INTEGER PRODUCT_TYPE_EN VARCHAR SLS_RTL_DIM Column Type RETAILER_SITE_KEY INTEGER RETAILER_SITE_CODE INTEGER RETAILER_KEY INTEGER RETAILER_CODE INTEGER RETAILER_NAME VARCHAR RETAILER_NAME_MB VARCHAR RETAILER_CONTACT_CODE INTEGER CONTACT_FIRST_NAME VARCHAR CONTACT_LAST_NAME VARCHAR GENDER_CODE SMALLINT CONTACT_PHONE_NUMBER VARCHAR CONTACT_EXTENSION VARCHAR CONTACT_FAX VARCHAR CONTACT_EMAIL VARCHAR RTL_ADDRESS1 VARCHAR RTL_ADDRESS2 VARCHAR RTL_CITY VARCHAR RTL_PROV_STATE VARCHAR CONTACT_FIRST_NAME_MB VARCHAR CONTACT_LAST_NAME_MB VARCHAR RTL_ADDRESS1_MB VARCHAR RTL_ADDRESS2_MB VARCHAR RTL_CITY_MB VARCHAR RTL_PROV_STATE_MB VARCHAR RTL_POSTAL_ZONE VARCHAR RTL_COUNTRY_CODE INTEGER RETAILER_START_DATE DATE RETAILER_TYPE_CODE INTEGER RETAILER_TYPE_EN VARCHAR JOB_POSITION_EN VARCHAR SLS_SALES_FACT Column Type ORDER_DAY_KEY INTEGER ORGANIZATION_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_KEY INTEGER RETAILER_SITE_KEY INTEGER PRODUCT_KEY INTEGER PROMOTION_KEY INTEGER ORDER_METHOD_KEY INTEGER SALES_ORDER_KEY INTEGER SHIP_DAY_KEY INTEGER CLOSE_DAY_KEY INTEGER QUANTITY BIGINT UNIT_COST DECIMAL UNIT_PRICE DECIMAL UNIT_SALE_PRICE DECIMAL GROSS_MARGIN FLOAT SALE_TOTAL DECIMAL GROSS_PROFIT DECIMAL SLS_SALES_ORDER_DIM Column Type SALES_ORDER_KEY INTEGER ORDER_DETAIL_CODE INTEGER ORDER_NUMBER INTEGER WAREHOUSE_BRANCH_CODE INTEGER SLS_SALES_TARG_FACT Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER RTL_COUNTRY_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_KEY INTEGER PRODUCT_TYPE_KEY INTEGER PRODUCT_BRAND_KEY INTEGER SALES_TARGET DECIMAL","title":"Dataset Details"},{"location":"wxd-datasets-gosales/#appendix-e-watsons-great-outdoors-company","text":"The Watson's Great Outdoors Company, or GO Sales, or any variation of the Sample Outdoors name, is the name of a fictitious business operation whose sample data is used to develop sample applications for IBM\u00ae and IBM customers. Its fictitious records include sample data for sales transactions, product distribution, finance, and human resources. Any resemblance to actual names, addresses, contact numbers, or transaction values, is coincidental. Unauthorized duplication is prohibited. Two links that provide more details on the database. Watson's Great Outdoors Company Watson's Great Outdoors Database Reference The second link will say that there is no content available, but if you click on the down arrow you will see the table names.","title":"Appendix E - Watson's Great Outdoors Company"},{"location":"wxd-datasets-gosales/#table-definitions","text":"These tables are created under the GOSALESDW schema. Thanks to Michael Schapira for generating the following ER diagram. You may need to download the image to zoom in on the relationships.","title":"Table Definitions"},{"location":"wxd-datasets-gosales/#dist_inventory_fact","text":"Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER PRODUCT_KEY INTEGER OPENING_INVENTORY INTEGER QUANTITY_SHIPPED INTEGER ADDITIONS INTEGER UNIT_COST DECIMAL CLOSING_INVENTORY INTEGER AVERAGE_UNIT_COST DECIMAL","title":"DIST_INVENTORY_FACT"},{"location":"wxd-datasets-gosales/#dist_product_forecase_fact","text":"Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BASE_PRODUCT_KEY INTEGER BRANCH_KEY INTEGER UNIT_COST DECIMAL UNIT_PRICE DECIMAL EXPECTED_VOLUME INTEGER","title":"DIST_PRODUCT_FORECASE_FACT"},{"location":"wxd-datasets-gosales/#dist_returned_items_fact","text":"Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_SITE_KEY INTEGER PRODUCT_KEY INTEGER ORDER_METHOD_KEY INTEGER SALES_ORDER_KEY INTEGER RETURN_REASON_KEY INTEGER RETURN_QUANTITY INTEGER","title":"DIST_RETURNED_ITEMS_FACT"},{"location":"wxd-datasets-gosales/#dist_return_reason_dim","text":"Column Type RETURN_REASON_KEY INTEGER RETURN_REASON_CODE INTEGER REASON_DESCRIPTION_EN VARCHAR","title":"DIST_RETURN_REASON_DIM"},{"location":"wxd-datasets-gosales/#emp_employee_dim","text":"Column Type EMPLOYEE_KEY INTEGER MANAGER_CODE1 INTEGER MANAGER1 VARCHAR MANAGER_MB1 VARCHAR MANAGER_CODE2 INTEGER MANAGER2 VARCHAR MANAGER_MB2 VARCHAR MANAGER_CODE3 INTEGER MANAGER3 VARCHAR MANAGER_MB3 VARCHAR MANAGER_CODE4 INTEGER MANAGER4 VARCHAR MANAGER_MB4 VARCHAR MANAGER_CODE5 INTEGER MANAGER5 VARCHAR MANAGER_MB5 VARCHAR MANAGER_CODE6 INTEGER MANAGER6 VARCHAR MANAGER_MB6 VARCHAR EMPLOYEE_CODE INTEGER EMPLOYEE_NAME VARCHAR FIRST_NAME VARCHAR LAST_NAME VARCHAR EMPLOYEE_NAME_MB VARCHAR FIRST_NAME_MB VARCHAR LAST_NAME_MB VARCHAR MANAGER_CODE INTEGER ORGANIZATION_CODE VARCHAR ADDRESS1 VARCHAR ADDRESS2 VARCHAR ADDRESS1_MB VARCHAR ADDRESS2_MB VARCHAR CITY VARCHAR CITY_MB VARCHAR PROV_STATE VARCHAR PROV_STATE_MB VARCHAR POSTAL_ZONE VARCHAR BRANCH_CODE INTEGER BIRTH_DATE DATE GENDER_CODE SMALLINT WORK_PHONE VARCHAR EXTENSION VARCHAR FAX VARCHAR EMAIL VARCHAR DATE_HIRED DATE TERMINATION_CODE INTEGER TERMINATION_DATE DATE POSITION_START_DATE DATE POSITION_CODE INTEGER EMPLOYEE_LEVEL SMALLINT ACTIVE_INDICATOR SMALLINT RECORD_START_DATE DATE RECORD_END_DATE DATE MANAGER_KEY INTEGER","title":"EMP_EMPLOYEE_DIM"},{"location":"wxd-datasets-gosales/#emp_expense_fact","text":"Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER EXPENSE_TYPE_KEY INTEGER ACCOUNT_KEY INTEGER EXPENSE_UNIT_QUANTITY FLOAT EXPENSE_TOTAL DECIMAL","title":"EMP_EXPENSE_FACT"},{"location":"wxd-datasets-gosales/#emp_expense_plan_fact","text":"Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER EXPENSE_TYPE_KEY INTEGER ACCOUNT_KEY VARCHAR EXPENSE_PLAN_TOTAL DECIMAL","title":"EMP_EXPENSE_PLAN_FACT"},{"location":"wxd-datasets-gosales/#emp_expense_type_dim","text":"Column Type EXPENSE_TYPE_KEY INTEGER EXPENSE_GROUP_CODE INTEGER EXPENSE_TYPE_CODE INTEGER EXPENSE_UNIT_CODE INTEGER EXPENSE_GROUP_EN VARCHAR EXPENSE_TYPE_EN VARCHAR","title":"EMP_EXPENSE_TYPE_DIM"},{"location":"wxd-datasets-gosales/#emp_expense_unit_lookup","text":"Column Type EXPENSE_UNIT_CODE INTEGER EXPENSE_UNIT_EN VARCHAR","title":"EMP_EXPENSE_UNIT_LOOKUP"},{"location":"wxd-datasets-gosales/#emp_position_dim","text":"Column Type POSITION_KEY INTEGER POSITION_CODE1 INTEGER POSITION_CODE2 INTEGER POSITION_CODE3 INTEGER POSITION_CODE INTEGER POSITION_PARENT INTEGER MIN_SALARY DECIMAL MAX_SALARY DECIMAL PAID_HOURLY INTEGER POSITION_LEVEL SMALLINT","title":"EMP_POSITION_DIM"},{"location":"wxd-datasets-gosales/#emp_position_lookup","text":"Column Type POSITION_CODE INTEGER POSITION_EN VARCHAR","title":"EMP_POSITION_LOOKUP"},{"location":"wxd-datasets-gosales/#emp_position_summary_fact","text":"Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER POSITION_COUNT INTEGER PLANNED_POSITION_COUNT INTEGER INTERNAL_HIRES INTEGER EXTERNAL_HIRES INTEGER TERMINATIONS INTEGER","title":"EMP_POSITION_SUMMARY_FACT"},{"location":"wxd-datasets-gosales/#emp_ranking_dim","text":"Column Type EMPLOYEE_RANKING_KEY INTEGER RANKING_CODE INTEGER RANKING_DESCRIPTION_EN VARCHAR","title":"EMP_RANKING_DIM"},{"location":"wxd-datasets-gosales/#emp_ranking_fact","text":"Column Type ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER DAY_KEY INTEGER EMPLOYEE_RANKING_KEY INTEGER RANKING_CODE INTEGER","title":"EMP_RANKING_FACT"},{"location":"wxd-datasets-gosales/#emp_recruitment_dim","text":"Column Type RECRUITMENT_MEDIUM_KEY INTEGER RECRUITMENT_MEDIUM_CODE INTEGER RECRUITMENT_TYPE_CODE INTEGER RECRUITMENT_MEDIUM_NAME_EN VARCHAR RECRUITMENT_TYPE_EN VARCHAR","title":"EMP_RECRUITMENT_DIM"},{"location":"wxd-datasets-gosales/#emp_recruitment_fact","text":"Column Type POST_DAY_KEY INTEGER RECRUITMENT_MEDIUM_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER POSITION_KEY INTEGER POSITION_POSTING_DATE DATE POSITION_FILLED_DATE DATE POSITION_START_DATE DATE DAYS_TO_FILL INTEGER","title":"EMP_RECRUITMENT_FACT"},{"location":"wxd-datasets-gosales/#emp_succession_fact","text":"Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER SUCCESSOR_EMPLOYEE_KEY INTEGER SUCCESSOR_POSITION_KEY INTEGER SUCCESSOR_STATUS_KEY INTEGER PERCENT_READY FLOAT TARGET_PERCENT_READY FLOAT","title":"EMP_SUCCESSION_FACT"},{"location":"wxd-datasets-gosales/#emp_succession_status_dim","text":"Column Type SUCCESSOR_STATUS_KEY INTEGER SUCCESSOR_STATUS_CODE INTEGER SUCCESSOR_STATUS_EN VARCHAR","title":"EMP_SUCCESSION_STATUS_DIM"},{"location":"wxd-datasets-gosales/#emp_summary_fact","text":"Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER SALARY DECIMAL PAY_INCREASE FLOAT BONUS FLOAT VACATION_DAYS_TAKEN FLOAT SICK_DAYS_TAKEN FLOAT","title":"EMP_SUMMARY_FACT"},{"location":"wxd-datasets-gosales/#emp_survey_fact","text":"Column Type DAY_KEY INTEGER ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_TOPIC_KEY INTEGER EMPLOYEE_TOPIC_SCORE FLOAT SATISFACTION_KEY INTEGER","title":"EMP_SURVEY_FACT"},{"location":"wxd-datasets-gosales/#emp_survey_targ_fact","text":"Column Type MONTH_KEY INTEGER EMPLOYEE_TOPIC_KEY INTEGER EMPLOYEE_TOPIC_TARGET FLOAT EMPLOYEE_SURVEY_BENCHMARK FLOAT","title":"EMP_SURVEY_TARG_FACT"},{"location":"wxd-datasets-gosales/#emp_survey_topic_dim","text":"Column Type EMPLOYEE_TOPIC_KEY INTEGER EMPLOYEE_TOPIC_CODE INTEGER EMPLOYEE_TOPIC_EN VARCHAR","title":"EMP_SURVEY_TOPIC_DIM"},{"location":"wxd-datasets-gosales/#emp_termination_lookup","text":"Column Type TERMINATION_CODE INTEGER TERMINATION_REASON_EN VARCHAR","title":"EMP_TERMINATION_LOOKUP"},{"location":"wxd-datasets-gosales/#emp_training_dim","text":"Column Type TRAINING_KEY INTEGER COURSE_CODE INTEGER COURSE_COST DECIMAL COURSE_DAYS FLOAT COURSE_NAME_EN VARCHAR","title":"EMP_TRAINING_DIM"},{"location":"wxd-datasets-gosales/#emp_training_fact","text":"Column Type ORGANIZATION_KEY INTEGER POSITION_KEY INTEGER EMPLOYEE_KEY INTEGER DAY_KEY INTEGER EXPENSE_TYPE_KEY INTEGER TRAINING_KEY INTEGER COURSE_COST DECIMAL COURSE_DAYS FLOAT","title":"EMP_TRAINING_FACT"},{"location":"wxd-datasets-gosales/#fin_account_class_lookup","text":"Column Type ACCOUNT_CLASS_CODE INTEGER ACCOUNT_CLASS_EN VARCHAR","title":"FIN_ACCOUNT_CLASS_LOOKUP"},{"location":"wxd-datasets-gosales/#fin_account_dim","text":"Column Type ACCOUNT_KEY INTEGER ACCOUNT_CODE1 VARCHAR ACCOUNT_CODE2 VARCHAR ACCOUNT_CODE3 VARCHAR ACCOUNT_CODE4 VARCHAR ACCOUNT_CODE5 VARCHAR ACCOUNT_CODE6 VARCHAR ACCOUNT_CODE7 VARCHAR ACCOUNT_CODE8 VARCHAR ACCOUNT_CODE9 VARCHAR ACCOUNT_CODE10 VARCHAR ACCOUNT_CODE11 VARCHAR ACCOUNT_CODE12 VARCHAR ACCOUNT_CODE13 VARCHAR ACCOUNT_CODE14 VARCHAR ACCOUNT_CODE15 VARCHAR ACCOUNT_CODE16 VARCHAR ACCOUNT_CODE VARCHAR ACCOUNT_PARENT VARCHAR DEBIT_OR_CREDIT CHAR(3) ACCOUNT_TYPE_CODE CHAR(3) ACCOUNT_CLASS_CODE INTEGER ACCOUNT_LEVEL INTEGER AGGREGATION_SIGN CHAR(3)","title":"FIN_ACCOUNT_DIM"},{"location":"wxd-datasets-gosales/#fin_account_name_lookup","text":"Column Type ACCOUNT_CODE VARCHAR ACCOUNT_NAME_EN VARCHAR","title":"FIN_ACCOUNT_NAME_LOOKUP"},{"location":"wxd-datasets-gosales/#fin_account_type_lookup","text":"Column Type ACCOUNT_TYPE_CODE CHAR(3) ACCOUNT_TYPE_EN VARCHAR","title":"FIN_ACCOUNT_TYPE_LOOKUP"},{"location":"wxd-datasets-gosales/#fin_finance_fact","text":"Column Type SUBMISSION_KEY INTEGER ORGANIZATION_KEY INTEGER ACCOUNT_KEY INTEGER MONTH_KEY INTEGER AMOUNT_YEAR_TO_DATE DECIMAL AMOUNT_MONTH DECIMAL","title":"FIN_FINANCE_FACT"},{"location":"wxd-datasets-gosales/#fin_subm_currency_lookup","text":"Column Type SUBMISSION_CURRENCY_CODE VARCHAR SUBMISSION_CURRENCY_EN VARCHAR","title":"FIN_SUBM_CURRENCY_LOOKUP"},{"location":"wxd-datasets-gosales/#fin_subm_dim","text":"Column Type UBMISSION_KEY INTEGER UBMISSION_CODE VARCHAR UBMISSION_NAME_EN VARCHAR UBMISSION_YEAR INTEGER UBMISSION_TYPE_CODE CHAR(3) UBMISSION_CURRENCY_CODE VARCHAR","title":"FIN_SUBM_DIM"},{"location":"wxd-datasets-gosales/#fin_subm_type_lookup","text":"Column Type SUBMISSION_TYPE_CODE CHAR(3) SUBMISSION_TYPE_EN VARCHAR","title":"FIN_SUBM_TYPE_LOOKUP"},{"location":"wxd-datasets-gosales/#go_branch_dim","text":"Column Type BRANCH_KEY INTEGER BRANCH_CODE INTEGER ADDRESS1 VARCHAR ADDRESS2 VARCHAR CITY VARCHAR PROV_STATE VARCHAR ADDRESS1_MB VARCHAR ADDRESS2_MB VARCHAR CITY_MB VARCHAR PROV_STATE_MB VARCHAR POSTAL_ZONE VARCHAR COUNTRY_CODE INTEGER WAREHOUSE_BRANCH_CODE INTEGER","title":"GO_BRANCH_DIM"},{"location":"wxd-datasets-gosales/#go_gender_lookup","text":"Column Type GENDER_CODE SMALLINT GENDER_EN VARCHAR","title":"GO_GENDER_LOOKUP"},{"location":"wxd-datasets-gosales/#go_org_dim","text":"Column Type ORGANIZATION_KEY INTEGER ORGANIZATION_CODE1 VARCHAR ORGANIZATION_CODE2 VARCHAR ORGANIZATION_CODE3 VARCHAR ORGANIZATION_CODE4 VARCHAR ORGANIZATION_CODE VARCHAR ORGANIZATION_PARENT VARCHAR ORGANIZATION_LEVEL SMALLINT","title":"GO_ORG_DIM"},{"location":"wxd-datasets-gosales/#go_org_name_lookup","text":"Column Type ORGANIZATION_CODE VARCHAR ORGANIZATION_NAME_EN VARCHAR","title":"GO_ORG_NAME_LOOKUP"},{"location":"wxd-datasets-gosales/#go_region_dim","text":"Column Type COUNTRY_KEY INTEGER COUNTRY_CODE INTEGER FLAG_IMAGE VARCHAR ISO_THREE_LETTER_CODE VARCHAR ISO_TWO_LETTER_CODE VARCHAR ISO_THREE_DIGIT_CODE VARCHAR REGION_KEY INTEGER REGION_CODE INTEGER REGION_EN VARCHAR COUNTRY_EN VARCHAR","title":"GO_REGION_DIM"},{"location":"wxd-datasets-gosales/#go_satisfaction_dim","text":"Column Type SATISFACTION_KEY INTEGER SATISFACTION_CODE INTEGER SATISFACTION_LOWER_LIMIT FLOAT SATISFACTION_UPPER_LIMIT FLOAT SATISFACTION_DESCRIPTION_EN VARCHAR","title":"GO_SATISFACTION_DIM"},{"location":"wxd-datasets-gosales/#go_time_dim","text":"Column Type DAY_KEY INTEGER DAY_DATE DATE MONTH_KEY INTEGER CURRENT_MONTH SMALLINT MONTH_NUMBER INTEGER QUARTER_KEY INTEGER CURRENT_QUARTER SMALLINT CURRENT_YEAR SMALLINT DAY_OF_WEEK SMALLINT DAY_OF_MONTH SMALLINT DAYS_IN_MONTH SMALLINT DAY_OF_YEAR SMALLINT WEEK_OF_MONTH SMALLINT WEEK_OF_QUARTER SMALLINT WEEK_OF_YEAR SMALLINT MONTH_EN VARCHAR WEEKDAY_EN VARCHAR","title":"GO_TIME_DIM"},{"location":"wxd-datasets-gosales/#go_time_quarter_lookup","text":"Column Type QUARTER_KEY INTEGER QUARTER_EN VARCHAR","title":"GO_TIME_QUARTER_LOOKUP"},{"location":"wxd-datasets-gosales/#mrk_activity_status_dim","text":"Column Type ACTIVITY_STATUS_KEY INTEGER ACTIVITY_STATUS_CODE SMALLINT ACTIVITY_STATUS_EN VARCHAR","title":"MRK_ACTIVITY_STATUS_DIM"},{"location":"wxd-datasets-gosales/#mrk_bundle_group_lookup","text":"Column Type BUNDLE_GROUP_CODE INTEGER BUNDLE_GROUP_EN VARCHAR","title":"MRK_BUNDLE_GROUP_LOOKUP"},{"location":"wxd-datasets-gosales/#mrk_campaign_lookup","text":"Column Type CAMPAIGN_CODE INTEGER CAMPAIGN_NAME_EN VARCHAR","title":"MRK_CAMPAIGN_LOOKUP"},{"location":"wxd-datasets-gosales/#mrk_product_survey_dim","text":"Column Type PRODUCT_SURVEY_KEY INTEGER PRODUCT_TOPIC_CODE INTEGER PRODUCT_TOPIC_EN VARCHAR","title":"MRK_PRODUCT_SURVEY_DIM"},{"location":"wxd-datasets-gosales/#mrk_product_survey_fact","text":"Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER RTL_COUNTRY_KEY INTEGER BRANCH_KEY INTEGER PRODUCT_KEY INTEGER PRODUCT_SURVEY_KEY INTEGER PRODUCT_TOPIC_SCORE FLOAT","title":"MRK_PRODUCT_SURVEY_FACT"},{"location":"wxd-datasets-gosales/#mrk_prod_survey_targ_fact","text":"Column Type MONTH_KEY INTEGER PRODUCT_KEY INTEGER PRODUCT_SURVEY_KEY INTEGER PRODUCT_TOPIC_TARGET FLOAT","title":"MRK_PROD_SURVEY_TARG_FACT"},{"location":"wxd-datasets-gosales/#mrk_promotion_dim","text":"Column Type PROMOTION_KEY INTEGER PROMOTION_CODE INTEGER CAMPAIGN_CODE INTEGER BUNDLE_GROUP_CODE INTEGER PROMOTION_NAME_EN VARCHAR","title":"MRK_PROMOTION_DIM"},{"location":"wxd-datasets-gosales/#mrk_promotion_fact","text":"Column Type ORGANIZATION_KEY INTEGER ORDER_DAY_KEY INTEGER RTL_COUNTRY_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_KEY INTEGER PRODUCT_KEY INTEGER PROMOTION_KEY INTEGER SALES_ORDER_KEY INTEGER QUANTITY SMALLINT UNIT_COST DECIMAL UNIT_PRICE DECIMAL UNIT_SALE_PRICE DECIMAL GROSS_MARGIN FLOAT SALE_TOTAL DECIMAL GROSS_PROFIT DECIMAL","title":"MRK_PROMOTION_FACT"},{"location":"wxd-datasets-gosales/#mrk_promotion_plan_fact","text":"Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER RTL_COUNTRY_KEY INTEGER PRODUCT_KEY INTEGER PROMOTION_KEY INTEGER UNIT_COST DECIMAL UNIT_PRICE DECIMAL UNIT_SALE_PRICE DECIMAL PROMOTION_PLAN_QUANTITY INTEGER PROMOTION_PLAN_REVENUE DECIMAL","title":"MRK_PROMOTION_PLAN_FACT"},{"location":"wxd-datasets-gosales/#mrk_rtl_survey_dim","text":"Column Type RETAILER_SURVEY_KEY INTEGER RETAILER_TOPIC_CODE INTEGER RETAILER_TOPIC_EN VARCHAR","title":"MRK_RTL_SURVEY_DIM"},{"location":"wxd-datasets-gosales/#mrk_rtl_survey_fact","text":"Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER BRANCH_KEY INTEGER RTL_COUNTRY_KEY INTEGER RETAILER_KEY INTEGER RETAILER_SURVEY_KEY INTEGER RETAILER_TOPIC_SCORE FLOAT","title":"MRK_RTL_SURVEY_FACT"},{"location":"wxd-datasets-gosales/#mrk_rtl_survey_targ_fact","text":"Column Type RETAILER_SURVEY_KEY INTEGER MONTH_KEY INTEGER RETAILER_TOPIC_WEIGHT INTEGER RETAILER_TOPIC_TARGET FLOAT","title":"MRK_RTL_SURVEY_TARG_FACT"},{"location":"wxd-datasets-gosales/#sls_order_method_dim","text":"Column Type ORDER_METHOD_KEY INTEGER ORDER_METHOD_CODE INTEGER ORDER_METHOD_EN VARCHAR","title":"SLS_ORDER_METHOD_DIM"},{"location":"wxd-datasets-gosales/#sls_product_brand_lookup","text":"Column Type PRODUCT_BRAND_CODE INTEGER PRODUCT_BRAND_EN VARCHAR","title":"SLS_PRODUCT_BRAND_LOOKUP"},{"location":"wxd-datasets-gosales/#sls_product_color_lookup","text":"Column Type PRODUCT_COLOR_CODE INTEGER PRODUCT_COLOR_EN VARCHAR","title":"SLS_PRODUCT_COLOR_LOOKUP"},{"location":"wxd-datasets-gosales/#sls_product_dim","text":"Column Type PRODUCT_KEY INTEGER PRODUCT_LINE_CODE INTEGER PRODUCT_TYPE_KEY INTEGER PRODUCT_TYPE_CODE INTEGER PRODUCT_NUMBER INTEGER BASE_PRODUCT_KEY INTEGER BASE_PRODUCT_NUMBER INTEGER PRODUCT_COLOR_CODE INTEGER PRODUCT_SIZE_CODE INTEGER PRODUCT_BRAND_KEY INTEGER PRODUCT_BRAND_CODE INTEGER PRODUCT_IMAGE VARCHAR INTRODUCTION_DATE DATE DISCONTINUED_DATE DATE","title":"SLS_PRODUCT_DIM"},{"location":"wxd-datasets-gosales/#sls_product_line_lookup","text":"Column Type PRODUCT_LINE_CODE INTEGER PRODUCT_LINE_EN VARCHAR","title":"SLS_PRODUCT_LINE_LOOKUP"},{"location":"wxd-datasets-gosales/#sls_product_lookup","text":"Column Type PRODUCT_NUMBER INTEGER PRODUCT_LANGUAGE VARCHAR PRODUCT_NAME VARCHAR PRODUCT_DESCRIPTION VARCHAR","title":"SLS_PRODUCT_LOOKUP"},{"location":"wxd-datasets-gosales/#sls_product_size_lookup","text":"Column Type PRODUCT_SIZE_CODE INTEGER PRODUCT_SIZE_EN VARCHAR","title":"SLS_PRODUCT_SIZE_LOOKUP"},{"location":"wxd-datasets-gosales/#sls_product_type_lookup","text":"Column Type PRODUCT_TYPE_CODE INTEGER PRODUCT_TYPE_EN VARCHAR","title":"SLS_PRODUCT_TYPE_LOOKUP"},{"location":"wxd-datasets-gosales/#sls_rtl_dim","text":"Column Type RETAILER_SITE_KEY INTEGER RETAILER_SITE_CODE INTEGER RETAILER_KEY INTEGER RETAILER_CODE INTEGER RETAILER_NAME VARCHAR RETAILER_NAME_MB VARCHAR RETAILER_CONTACT_CODE INTEGER CONTACT_FIRST_NAME VARCHAR CONTACT_LAST_NAME VARCHAR GENDER_CODE SMALLINT CONTACT_PHONE_NUMBER VARCHAR CONTACT_EXTENSION VARCHAR CONTACT_FAX VARCHAR CONTACT_EMAIL VARCHAR RTL_ADDRESS1 VARCHAR RTL_ADDRESS2 VARCHAR RTL_CITY VARCHAR RTL_PROV_STATE VARCHAR CONTACT_FIRST_NAME_MB VARCHAR CONTACT_LAST_NAME_MB VARCHAR RTL_ADDRESS1_MB VARCHAR RTL_ADDRESS2_MB VARCHAR RTL_CITY_MB VARCHAR RTL_PROV_STATE_MB VARCHAR RTL_POSTAL_ZONE VARCHAR RTL_COUNTRY_CODE INTEGER RETAILER_START_DATE DATE RETAILER_TYPE_CODE INTEGER RETAILER_TYPE_EN VARCHAR JOB_POSITION_EN VARCHAR","title":"SLS_RTL_DIM"},{"location":"wxd-datasets-gosales/#sls_sales_fact","text":"Column Type ORDER_DAY_KEY INTEGER ORGANIZATION_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_KEY INTEGER RETAILER_SITE_KEY INTEGER PRODUCT_KEY INTEGER PROMOTION_KEY INTEGER ORDER_METHOD_KEY INTEGER SALES_ORDER_KEY INTEGER SHIP_DAY_KEY INTEGER CLOSE_DAY_KEY INTEGER QUANTITY BIGINT UNIT_COST DECIMAL UNIT_PRICE DECIMAL UNIT_SALE_PRICE DECIMAL GROSS_MARGIN FLOAT SALE_TOTAL DECIMAL GROSS_PROFIT DECIMAL","title":"SLS_SALES_FACT"},{"location":"wxd-datasets-gosales/#sls_sales_order_dim","text":"Column Type SALES_ORDER_KEY INTEGER ORDER_DETAIL_CODE INTEGER ORDER_NUMBER INTEGER WAREHOUSE_BRANCH_CODE INTEGER","title":"SLS_SALES_ORDER_DIM"},{"location":"wxd-datasets-gosales/#sls_sales_targ_fact","text":"Column Type MONTH_KEY INTEGER ORGANIZATION_KEY INTEGER RTL_COUNTRY_KEY INTEGER EMPLOYEE_KEY INTEGER RETAILER_KEY INTEGER PRODUCT_TYPE_KEY INTEGER PRODUCT_BRAND_KEY INTEGER SALES_TARGET DECIMAL","title":"SLS_SALES_TARG_FACT"},{"location":"wxd-datasets-intro/","text":"Datasets There are three datasets that have been loaded into watsonx.data system for you to use while exploring the features of the product. Great Outdoors Company warehouse data Airline On-Time performance Taxi fares Data Location The datasets found above have already been preloaded into the system, so there is no need to run the scripts below unless you want to modify the schemas or location of the data. The data files can be found in the /sampledata directory. Underneath this directory you will find datasets in three different formats: Parquet - Data that has been formatted in Parquet format that can be loaded directly into Hive and queried by watsonx.data. Relational - Data that is in a delimited format that can be loaded into Db2 or PostgreSQL databases. CSV - Comma separated values that can be converted to multiple formats or used by watsonx.data. Within the Parquet and Relational directories are SQL statements that can be used to catalog and load the data into the different systems.","title":"Datasets"},{"location":"wxd-datasets-intro/#datasets","text":"There are three datasets that have been loaded into watsonx.data system for you to use while exploring the features of the product. Great Outdoors Company warehouse data Airline On-Time performance Taxi fares","title":"Datasets"},{"location":"wxd-datasets-intro/#data-location","text":"The datasets found above have already been preloaded into the system, so there is no need to run the scripts below unless you want to modify the schemas or location of the data. The data files can be found in the /sampledata directory. Underneath this directory you will find datasets in three different formats: Parquet - Data that has been formatted in Parquet format that can be loaded directly into Hive and queried by watsonx.data. Relational - Data that is in a delimited format that can be loaded into Db2 or PostgreSQL databases. CSV - Comma separated values that can be converted to multiple formats or used by watsonx.data. Within the Parquet and Relational directories are SQL statements that can be used to catalog and load the data into the different systems.","title":"Data Location"},{"location":"wxd-datasets-load/","text":"External Datasets There are a variety of data sets available for you to load from external sites. Check out the following websites for a variety of public data sets that you can use. Awesome Public Datasets Kaggle Datasets US Data.Gov UCI Machine Learning Repository US Fuel Economy Note : These sites have not been checked for license restrictions on the use of the data. You are responsible for checking that the data can be used without any licensing requirements. Loading your own data You can use a browser or link to an external file repository (i.e., Box) and download data directly to your workstation. Data can be CSV, Parquet, JSON, or TXT formats. Once the data is on your workstation, use the following steps. Note : You cannot import customer data nor any data that has restrictions associated with its use. Any use of private data is in violation of the terms and conditions of using this image. The first step is to connect to MinIO. Extract the MinIO credentials by using the passwords command: passwords Open your browser and navigate to the MinIO console. Login with object store credentials found above (These will be different for your system). You should see the current buckets in MinIO. If you don't see the buckets, click on Object Browser on the left-hand side panel. Select hive-bucket from the list of buckets. You may see other directories in this list than what is shown above. You will need to create a new path for your data set. Create a new directory name for your data (fuel_economy was used for this example). MinIO will display an empty directory and suggest you load something into it. Use the Upload button on the far right side to point to your dataset on your local machine. In this example, we are using a CSV file for the 2013 fuel economy estimates for automobiles sold in the US. You may need to rename you datasets to eliminate blanks and any other special characters other than \" _ \" or \" - \". The display will show the progress of the upload into the bucket. You may need to refresh your browser to see the file in the bucket. Now that the data has been loaded into a bucket, you can catalog it in the watsonx.data UI. If you created a new bucket for this data set, you will need to register it first in the watsonx.data UI. Instructions for how to do this are found in the Working with Object Store Buckets section. Start by navigating to the watsonx.data UI and look at the Infrastructure manager. Find the bucket where you upload your data set into and note the catalog name that it is associated with. Here we can see that the hive-bucket bucket is associated with the hive_data catalog. In the watsonx.data UI, select the Query workspace (SQL) icon. You will need to create a schema that links to this data set. The format of the command is shown below. DROP SCHEMA catalog.schema_name; CREATE SCHEMA catalog.schema_name WITH ( location = 's3a://your-bucket/data_directory' ); You will need to change the following values: catalog - The catalog that the bucket you are using is associated with schema_name - A schema name to associate your tables with data_directory - The directory in which your file is located your_bucket - The bucket the data physically resides in For the fuel economy example, using mpg as the schema, the SQL would be: DROP SCHEMA hive_data.mpg; CREATE SCHEMA hive_data.mpg WITH ( location = 's3a://hive-bucket/fuel_economy' ); Run this SQL against the Presto engine: The DROP command may fail if the schema doesn't exist, but the CREATE should work. The next step is to define what the table looks like for watsonx.data to be able to query it. The syntax of the CREATE TABLE statement is similar to: CREATE TABLE catalog.schema.tablename ( \"column_name\" \"type\", ... ) WITH ( format = 'CSV', csv_separator = ',', external_location = 's3a://your_bucket/data_directory'); You will need to create a table definition for your CSV file in order to catalog it in watsonx.data. Note that the only data type that is permitted for CSV columns is varchar . This is a restriction of the current driver. Plans are to update it to include other data types over time. If your data set does not include a header row (a row that defines the column names), you will need to create the table definition manually. If the data set does contain a header record, you can use the following Python code to generate a CREATE TABLE statement. You will need to make sure that pandas is available. python3 -m pip install pandas --user Next run the python3 command in the shell to run an interactive Python session. python3 Place the following code into your Python window. def showcsv(catalog, schema, tablename, bucket, directory, csv_in): import pandas as pd df = pd.read_csv(csv_in,na_values=\"-\") df = df.fillna(0) column_headers = list(df.columns.values) print(\"\") print(f\"DROP TABLE IF EXISTS {catalog}.{schema}.{tablename};\") print(f\"CREATE TABLE {catalog}.{schema}.{tablename}\") print(\" (\") comma = \"\" end = \"\" for header in column_headers: print(f\"{comma}\",end=end) comma = \",\" end = \"\\n\" print(f' \"{header}\" varchar',end=\"\") print(f\" )\") print(f\"WITH (\") print(f\" format = 'CSV',\") print(f\" csv_separator = ',',\") print(f\" external_location = 's3a://{bucket}/{directory}'\") print(f\" );\") print(\"\") def makesql(): catalog = input(\"Catalog : \") schema = input(\"Schema : \") table = input(\"Table : \") bucket = input(\"Bucket : \") dir = input(\"Directory : \") csv = input(\"CSV File : \") showcsv(catalog,schema,table,bucket,dir,csv) Gather the following information on your dataset: catalog - The catalog the schema and table are created under ( hive_data ) schema - The schema name that you created to hold your table ( mpg ) table name - The name of the table ( fuel_economy ) bucket - Where the data is located ( hive-bucket ) directory - What directory contains your data ( fuel_economy ) csv_in - The location on your local machine where the csv file is Once you have gathered that, run the following command in your Python window and answer the prompts. makesql() >>> makesql() Catalog : hive_data Schema : mpg Table : fueleconomy Bucket : hive-bucket Directory : fuel_economy CSV File : ~/Downloads/fuel_economy_2013.csv DROP TABLE IF EXISTS hive_data.mpg.fueleconomy; CREATE TABLE hive_data.mpg.fueleconomy ( \"MODEL_YEAR\" varchar, \"MFR_NAME\" varchar, \"DIVISION\" varchar, \"CARLINE\" varchar, \"ENG_DISPL\" varchar, \"CYL\" varchar, \"TRANS_IN_FE_GUIDE\" varchar, \"CITY_FE_CONVENTIONAL_FUEL\" varchar, \"HWY_FE_CONVENTIONAL_FUEL\" varchar, \"COMB_FE_CONVENTIONAL_FUEL\" varchar, \"AIR_ASPIRATION_DESC\" varchar, \"TRANS_DESC\" varchar, \"GEARS\" varchar, \"DRIVE_DESC\" varchar, \"FUEL_UNIT_CONVENTIONAL_FUEL\" varchar, \"FUEL_UNIT_DESC_CONVENTIONAL_FUEL\" varchar, \"ANNUAL_FUEL_COST_CONVENTIONAL\" varchar, \"FUEL_METERING_SYS_DESC\" varchar ) WITH ( format = 'CSV', csv_separator = ',', external_location = 's3a://hive-bucket/fuel_economy' ); Cut and paste the output from the command into the watsonx.data Data Explorer window to create the file. Now you can query the table with the following SQL. Note that the header record still exists in the answer set since we did not remove it from the CSV file. SELECT * FROM hive_data.mpg.fueleconomy LIMIT 10","title":"External Datasets"},{"location":"wxd-datasets-load/#external-datasets","text":"There are a variety of data sets available for you to load from external sites. Check out the following websites for a variety of public data sets that you can use. Awesome Public Datasets Kaggle Datasets US Data.Gov UCI Machine Learning Repository US Fuel Economy Note : These sites have not been checked for license restrictions on the use of the data. You are responsible for checking that the data can be used without any licensing requirements.","title":"External Datasets"},{"location":"wxd-datasets-load/#loading-your-own-data","text":"You can use a browser or link to an external file repository (i.e., Box) and download data directly to your workstation. Data can be CSV, Parquet, JSON, or TXT formats. Once the data is on your workstation, use the following steps. Note : You cannot import customer data nor any data that has restrictions associated with its use. Any use of private data is in violation of the terms and conditions of using this image. The first step is to connect to MinIO. Extract the MinIO credentials by using the passwords command: passwords Open your browser and navigate to the MinIO console. Login with object store credentials found above (These will be different for your system). You should see the current buckets in MinIO. If you don't see the buckets, click on Object Browser on the left-hand side panel. Select hive-bucket from the list of buckets. You may see other directories in this list than what is shown above. You will need to create a new path for your data set. Create a new directory name for your data (fuel_economy was used for this example). MinIO will display an empty directory and suggest you load something into it. Use the Upload button on the far right side to point to your dataset on your local machine. In this example, we are using a CSV file for the 2013 fuel economy estimates for automobiles sold in the US. You may need to rename you datasets to eliminate blanks and any other special characters other than \" _ \" or \" - \". The display will show the progress of the upload into the bucket. You may need to refresh your browser to see the file in the bucket. Now that the data has been loaded into a bucket, you can catalog it in the watsonx.data UI. If you created a new bucket for this data set, you will need to register it first in the watsonx.data UI. Instructions for how to do this are found in the Working with Object Store Buckets section. Start by navigating to the watsonx.data UI and look at the Infrastructure manager. Find the bucket where you upload your data set into and note the catalog name that it is associated with. Here we can see that the hive-bucket bucket is associated with the hive_data catalog. In the watsonx.data UI, select the Query workspace (SQL) icon. You will need to create a schema that links to this data set. The format of the command is shown below. DROP SCHEMA catalog.schema_name; CREATE SCHEMA catalog.schema_name WITH ( location = 's3a://your-bucket/data_directory' ); You will need to change the following values: catalog - The catalog that the bucket you are using is associated with schema_name - A schema name to associate your tables with data_directory - The directory in which your file is located your_bucket - The bucket the data physically resides in For the fuel economy example, using mpg as the schema, the SQL would be: DROP SCHEMA hive_data.mpg; CREATE SCHEMA hive_data.mpg WITH ( location = 's3a://hive-bucket/fuel_economy' ); Run this SQL against the Presto engine: The DROP command may fail if the schema doesn't exist, but the CREATE should work. The next step is to define what the table looks like for watsonx.data to be able to query it. The syntax of the CREATE TABLE statement is similar to: CREATE TABLE catalog.schema.tablename ( \"column_name\" \"type\", ... ) WITH ( format = 'CSV', csv_separator = ',', external_location = 's3a://your_bucket/data_directory'); You will need to create a table definition for your CSV file in order to catalog it in watsonx.data. Note that the only data type that is permitted for CSV columns is varchar . This is a restriction of the current driver. Plans are to update it to include other data types over time. If your data set does not include a header row (a row that defines the column names), you will need to create the table definition manually. If the data set does contain a header record, you can use the following Python code to generate a CREATE TABLE statement. You will need to make sure that pandas is available. python3 -m pip install pandas --user Next run the python3 command in the shell to run an interactive Python session. python3 Place the following code into your Python window. def showcsv(catalog, schema, tablename, bucket, directory, csv_in): import pandas as pd df = pd.read_csv(csv_in,na_values=\"-\") df = df.fillna(0) column_headers = list(df.columns.values) print(\"\") print(f\"DROP TABLE IF EXISTS {catalog}.{schema}.{tablename};\") print(f\"CREATE TABLE {catalog}.{schema}.{tablename}\") print(\" (\") comma = \"\" end = \"\" for header in column_headers: print(f\"{comma}\",end=end) comma = \",\" end = \"\\n\" print(f' \"{header}\" varchar',end=\"\") print(f\" )\") print(f\"WITH (\") print(f\" format = 'CSV',\") print(f\" csv_separator = ',',\") print(f\" external_location = 's3a://{bucket}/{directory}'\") print(f\" );\") print(\"\") def makesql(): catalog = input(\"Catalog : \") schema = input(\"Schema : \") table = input(\"Table : \") bucket = input(\"Bucket : \") dir = input(\"Directory : \") csv = input(\"CSV File : \") showcsv(catalog,schema,table,bucket,dir,csv) Gather the following information on your dataset: catalog - The catalog the schema and table are created under ( hive_data ) schema - The schema name that you created to hold your table ( mpg ) table name - The name of the table ( fuel_economy ) bucket - Where the data is located ( hive-bucket ) directory - What directory contains your data ( fuel_economy ) csv_in - The location on your local machine where the csv file is Once you have gathered that, run the following command in your Python window and answer the prompts. makesql() >>> makesql() Catalog : hive_data Schema : mpg Table : fueleconomy Bucket : hive-bucket Directory : fuel_economy CSV File : ~/Downloads/fuel_economy_2013.csv DROP TABLE IF EXISTS hive_data.mpg.fueleconomy; CREATE TABLE hive_data.mpg.fueleconomy ( \"MODEL_YEAR\" varchar, \"MFR_NAME\" varchar, \"DIVISION\" varchar, \"CARLINE\" varchar, \"ENG_DISPL\" varchar, \"CYL\" varchar, \"TRANS_IN_FE_GUIDE\" varchar, \"CITY_FE_CONVENTIONAL_FUEL\" varchar, \"HWY_FE_CONVENTIONAL_FUEL\" varchar, \"COMB_FE_CONVENTIONAL_FUEL\" varchar, \"AIR_ASPIRATION_DESC\" varchar, \"TRANS_DESC\" varchar, \"GEARS\" varchar, \"DRIVE_DESC\" varchar, \"FUEL_UNIT_CONVENTIONAL_FUEL\" varchar, \"FUEL_UNIT_DESC_CONVENTIONAL_FUEL\" varchar, \"ANNUAL_FUEL_COST_CONVENTIONAL\" varchar, \"FUEL_METERING_SYS_DESC\" varchar ) WITH ( format = 'CSV', csv_separator = ',', external_location = 's3a://hive-bucket/fuel_economy' ); Cut and paste the output from the command into the watsonx.data Data Explorer window to create the file. Now you can query the table with the following SQL. Note that the header record still exists in the answer set since we did not remove it from the CSV file. SELECT * FROM hive_data.mpg.fueleconomy LIMIT 10","title":"Loading your own data"},{"location":"wxd-datasets-ontime/","text":"On-Time Performance Dataset The Airline On-Time performance database contains information on flights within the US from 1987 through 2020. This is a very large dataset, so only the records from January 2013 have been included inside this image. The following link provides more information on the dataset and the columns that are found in the records. Note that in the version of the data used in this system does not contain the diversion records 1 through 5. These fields are blank in the data sample used. Note that the initial diversion airport does exist in the record. Airline Report On-Time Performance Dataset Disclaimer Except as expressly set forth in this agreement, the data (including enhanced data) is provided on an \u201cas is\u201d basis, without warranties or conditions of any kind, either express or implied including, without limitation, any warranties or conditions of title, non-infringement, merchantability or fitness for a particular purpose. Neither you nor any data providers shall have any liability for any direct, indirect, incidental, special, exemplary, or consequential damages (including without limitation lost profits), however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use or distribution of the data or the exercise of any rights granted hereunder, even if advised of the possibility of such damages. Tables AIRCRAFT Column Type TAIL_NUMBER VARCHAR MANUFACTURER VARCHAR MODEL VARCHAR AIRLINE_ID Column Type Code INT Description VARCHAR AIRPORT_ID Column Type Code INT Description VARCHAR CANCELLATION Column Type Code INT Description VARCHAR ONTIME Column Type Year INT Quarter INT Month INT DayofMonth INT DayOfWeek INT FlightDate VARCHAR Reporting_Airline VARCHAR DOT_ID_Reporting_Airline INT IATA_CODE_Reporting_Airline VARCHAR Tail_Number VARCHAR Flight_Number_Reporting_Airline INT OriginAirportID INT OriginAirportSeqID INT OriginCityMarketID INT Origin VARCHAR OriginCityName VARCHAR OriginState VARCHAR OriginStateFips VARCHAR OriginStateName VARCHAR OriginWac INT DestAirportID INT DestAirportSeqID INT DestCityMarketID INT Dest VARCHAR DestCityName VARCHAR DestState VARCHAR DestStateFips VARCHAR DestStateName VARCHAR DestWac INT CRSDepTime INT DepTime INT DepDelay INT DepDelayMinutes INT DepDel15 INT DepartureDelayGroups INT DepTimeBlk VARCHAR TaxiOut INT WheelsOff INT WheelsOn INT TaxiIn INT CRSArrTime INT ArrTime INT ArrDelay INT ArrDelayMinutes INT ArrDel15 INT ArrivalDelayGroups INT ArrTimeBlk VARCHAR Cancelled INT CancellationCode INT Diverted INT CRSElapsedTime INT ActualElapsedTime INT AirTime smallINT Flights INT Distance INT DistanceGroup INT CarrierDelay INT WeatherDelay INT NASDelay INT SecurityDelay INT LateAircraftDelay INT FirstDepTime INT TotalAddGTime INT LongestAddGTime INT DivAirportLandings INT DivReachedDest INT DivActualElapsedTime INT DivArrDelay INT DivDistance INT DivAirport VARCHAR","title":"On-Time Performance Dataset"},{"location":"wxd-datasets-ontime/#on-time-performance-dataset","text":"The Airline On-Time performance database contains information on flights within the US from 1987 through 2020. This is a very large dataset, so only the records from January 2013 have been included inside this image. The following link provides more information on the dataset and the columns that are found in the records. Note that in the version of the data used in this system does not contain the diversion records 1 through 5. These fields are blank in the data sample used. Note that the initial diversion airport does exist in the record. Airline Report On-Time Performance Dataset","title":"On-Time Performance Dataset"},{"location":"wxd-datasets-ontime/#disclaimer","text":"Except as expressly set forth in this agreement, the data (including enhanced data) is provided on an \u201cas is\u201d basis, without warranties or conditions of any kind, either express or implied including, without limitation, any warranties or conditions of title, non-infringement, merchantability or fitness for a particular purpose. Neither you nor any data providers shall have any liability for any direct, indirect, incidental, special, exemplary, or consequential damages (including without limitation lost profits), however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use or distribution of the data or the exercise of any rights granted hereunder, even if advised of the possibility of such damages.","title":"Disclaimer"},{"location":"wxd-datasets-ontime/#tables","text":"","title":"Tables"},{"location":"wxd-datasets-ontime/#aircraft","text":"Column Type TAIL_NUMBER VARCHAR MANUFACTURER VARCHAR MODEL VARCHAR","title":"AIRCRAFT"},{"location":"wxd-datasets-ontime/#airline_id","text":"Column Type Code INT Description VARCHAR","title":"AIRLINE_ID"},{"location":"wxd-datasets-ontime/#airport_id","text":"Column Type Code INT Description VARCHAR","title":"AIRPORT_ID"},{"location":"wxd-datasets-ontime/#cancellation","text":"Column Type Code INT Description VARCHAR","title":"CANCELLATION"},{"location":"wxd-datasets-ontime/#ontime","text":"Column Type Year INT Quarter INT Month INT DayofMonth INT DayOfWeek INT FlightDate VARCHAR Reporting_Airline VARCHAR DOT_ID_Reporting_Airline INT IATA_CODE_Reporting_Airline VARCHAR Tail_Number VARCHAR Flight_Number_Reporting_Airline INT OriginAirportID INT OriginAirportSeqID INT OriginCityMarketID INT Origin VARCHAR OriginCityName VARCHAR OriginState VARCHAR OriginStateFips VARCHAR OriginStateName VARCHAR OriginWac INT DestAirportID INT DestAirportSeqID INT DestCityMarketID INT Dest VARCHAR DestCityName VARCHAR DestState VARCHAR DestStateFips VARCHAR DestStateName VARCHAR DestWac INT CRSDepTime INT DepTime INT DepDelay INT DepDelayMinutes INT DepDel15 INT DepartureDelayGroups INT DepTimeBlk VARCHAR TaxiOut INT WheelsOff INT WheelsOn INT TaxiIn INT CRSArrTime INT ArrTime INT ArrDelay INT ArrDelayMinutes INT ArrDel15 INT ArrivalDelayGroups INT ArrTimeBlk VARCHAR Cancelled INT CancellationCode INT Diverted INT CRSElapsedTime INT ActualElapsedTime INT AirTime smallINT Flights INT Distance INT DistanceGroup INT CarrierDelay INT WeatherDelay INT NASDelay INT SecurityDelay INT LateAircraftDelay INT FirstDepTime INT TotalAddGTime INT LongestAddGTime INT DivAirportLandings INT DivReachedDest INT DivActualElapsedTime INT DivArrDelay INT DivDistance INT DivAirport VARCHAR","title":"ONTIME"},{"location":"wxd-datasets-taxi/","text":"Chicago Taxi Data Taxi trips are reported to the City of Chicago in its role as a regulatory agency. To protect privacy but allow for aggregate analyses, the Taxi ID is consistent for any given taxi medallion number but does not show the number. The data set used in this system contains records from January 1st, 2013 and does not include the census tract value nor the Taxi ID. Taxi Trips Disclaimer This site provides applications using data that has been modified for use from its original source, www.cityofchicago.org, the official website of the City of Chicago. The City of Chicago makes no claims as to the content, accuracy, timeliness, or completeness of the data provided at this site. The data provided at this site is subject to change at any time. It is understood that the data provided at this site is being used at one's own risk. Tables TAXIRIDES Column Type TRIP_ID int COMPANY varchar DROPOFF_LATITUDE double DROPOFF_LONGITUDE double EXTRAS double FARE double PAYMENT_TYPE varchar PICKUP_LATITUDE double PICKUP_LONGITUDE double TIPS double TOLLS double TRIP_END_TIMESTAMP timestamp TRIP_MILES double TRIP_SECONDS int TRIP_START_TIMESTAMP timestamp TRIP_TOTAL double","title":"Chicago Taxi Data"},{"location":"wxd-datasets-taxi/#chicago-taxi-data","text":"Taxi trips are reported to the City of Chicago in its role as a regulatory agency. To protect privacy but allow for aggregate analyses, the Taxi ID is consistent for any given taxi medallion number but does not show the number. The data set used in this system contains records from January 1st, 2013 and does not include the census tract value nor the Taxi ID. Taxi Trips","title":"Chicago Taxi Data"},{"location":"wxd-datasets-taxi/#disclaimer","text":"This site provides applications using data that has been modified for use from its original source, www.cityofchicago.org, the official website of the City of Chicago. The City of Chicago makes no claims as to the content, accuracy, timeliness, or completeness of the data provided at this site. The data provided at this site is subject to change at any time. It is understood that the data provided at this site is being used at one's own risk.","title":"Disclaimer"},{"location":"wxd-datasets-taxi/#tables","text":"","title":"Tables"},{"location":"wxd-datasets-taxi/#taxirides","text":"Column Type TRIP_ID int COMPANY varchar DROPOFF_LATITUDE double DROPOFF_LONGITUDE double EXTRAS double FARE double PAYMENT_TYPE varchar PICKUP_LATITUDE double PICKUP_LONGITUDE double TIPS double TOLLS double TRIP_END_TIMESTAMP timestamp TRIP_MILES double TRIP_SECONDS int TRIP_START_TIMESTAMP timestamp TRIP_TOTAL double","title":"TAXIRIDES"},{"location":"wxd-datasets/","text":"Datasets There are three datasets that have been loaded into watsonx.data system for you to use while exploring the features of the product. These links will give you more details on each of the data sets, including options for loading your own data into this environment. Great Outdoors Company warehouse data Airline On-Time performance Taxi fares For information on other sources of data and how to import that data, see the following links. Alternate Data Sets Loading External Datasets","title":"Datasets"},{"location":"wxd-datasets/#datasets","text":"There are three datasets that have been loaded into watsonx.data system for you to use while exploring the features of the product. These links will give you more details on each of the data sets, including options for loading your own data into this environment. Great Outdoors Company warehouse data Airline On-Time performance Taxi fares For information on other sources of data and how to import that data, see the following links. Alternate Data Sets Loading External Datasets","title":"Datasets"},{"location":"wxd-dbeaver/","text":"dBeaver Client Tool You could use any tool that supports connectivity through JDBC drivers to connect to watsonx.data, but we chose to use dBeaver for this lab. dBeaver is a client tool that we can use to connect to watsonx.data and execute queries etc. The tool has been installed in the watsonx users home directory. To access dBeaver, you must use the VNC service which has been installed on this server for you. Start dBeaver Locally (VNC) To start dBeaver, you must be connected to the console of the Linux server as the watsonx user. In the virtual machine, click on the Applications button, choose the Database folder and click on the dBeaver icon. The start-up screen for dBeaver will display. The dBeaver program may ask if you want to create an empty database or update the release. Just say No. The first dialog from dBeaver will ask you to create a database connection. If you do not see this screen, select Database, and then select New Database Connection: Catalog watsonx.data Connection We will use the PrestoDB JDBC connector (NOT PrestoSQL). This is the other name for Trino, a variant of PrestoDB which might work. Select SQL (see Left side) and scroll down until you see PrestoDB. Select PrestoDB and then press \u201cNext\u201d. The following screen will be displayed. Enter the following values into the dialog. Note : These settings are case-sensitive. Host: localhost Port: 8443 Username: ibmlhadmin Password: password Database: tpch Then select the Driver Properties tab. You might be asked to download the database driver. Make sure select \u201cForce Download\u201d otherwise it will not properly download the driver. Once downloaded it will display the Driver properties dialog. Press the [+] button on the bottom left of the User Properties list. You need to enter three properties: SSL True SSLTrustStorePath /certs/presto-key.jks SSLTrustStorePassword watsonx.data Enter the property name \"SSL\", in uppercase (the parameter is case-sensitive!). When you hit OK it will display the setting in the list. Click on the SSL field and you will update the value to True and hit Enter. Add another field called SSLTrustStorePath and give it value of /certs/presto-key.jks and finally add the SSLTrustStorePassword setting with a value of watsonx.data . The panel should now contain three values. Press Finish when done. You should now see the TPCH database on the left panel. Clicking on the >TPCH line should display the objects that are found in the database. You can now use dBeaver to navigate through the different schemas in the Presto database. The iceberg_data schema should also be visible in the dBeaver console. Open the iceberg_data catalog and search for the customer table under workshop schema. This schema will only exist if you created it in the previous section on MinIO.","title":"dBeaver Client Tool"},{"location":"wxd-dbeaver/#dbeaver-client-tool","text":"You could use any tool that supports connectivity through JDBC drivers to connect to watsonx.data, but we chose to use dBeaver for this lab. dBeaver is a client tool that we can use to connect to watsonx.data and execute queries etc. The tool has been installed in the watsonx users home directory. To access dBeaver, you must use the VNC service which has been installed on this server for you.","title":"dBeaver Client Tool"},{"location":"wxd-dbeaver/#start-dbeaver-locally-vnc","text":"To start dBeaver, you must be connected to the console of the Linux server as the watsonx user. In the virtual machine, click on the Applications button, choose the Database folder and click on the dBeaver icon. The start-up screen for dBeaver will display. The dBeaver program may ask if you want to create an empty database or update the release. Just say No. The first dialog from dBeaver will ask you to create a database connection. If you do not see this screen, select Database, and then select New Database Connection:","title":"Start dBeaver Locally (VNC)"},{"location":"wxd-dbeaver/#catalog-watsonxdata-connection","text":"We will use the PrestoDB JDBC connector (NOT PrestoSQL). This is the other name for Trino, a variant of PrestoDB which might work. Select SQL (see Left side) and scroll down until you see PrestoDB. Select PrestoDB and then press \u201cNext\u201d. The following screen will be displayed. Enter the following values into the dialog. Note : These settings are case-sensitive. Host: localhost Port: 8443 Username: ibmlhadmin Password: password Database: tpch Then select the Driver Properties tab. You might be asked to download the database driver. Make sure select \u201cForce Download\u201d otherwise it will not properly download the driver. Once downloaded it will display the Driver properties dialog. Press the [+] button on the bottom left of the User Properties list. You need to enter three properties: SSL True SSLTrustStorePath /certs/presto-key.jks SSLTrustStorePassword watsonx.data Enter the property name \"SSL\", in uppercase (the parameter is case-sensitive!). When you hit OK it will display the setting in the list. Click on the SSL field and you will update the value to True and hit Enter. Add another field called SSLTrustStorePath and give it value of /certs/presto-key.jks and finally add the SSLTrustStorePassword setting with a value of watsonx.data . The panel should now contain three values. Press Finish when done. You should now see the TPCH database on the left panel. Clicking on the >TPCH line should display the objects that are found in the database. You can now use dBeaver to navigate through the different schemas in the Presto database. The iceberg_data schema should also be visible in the dBeaver console. Open the iceberg_data catalog and search for the customer table under workshop schema. This schema will only exist if you created it in the previous section on MinIO.","title":"Catalog watsonx.data Connection"},{"location":"wxd-disclaimer/","text":"Disclaimer Watson.data Copyright \u00a9 2023 by International Business Machines Corporation (IBM). All rights reserved. Printed in Canada. Except as permitted under the Copyright Act of 1976, no part of this publication may be reproduced or distributed in any form or by any means, or stored in a database or retrieval system, without the prior written permission of IBM, with the exception that the program listings may be entered, stored, and executed in a computer system, but they may not be reproduced for publication. The contents of this lab represent those features that may or may not be available in the current release of any products mentioned within this lab despite what the lab may say. IBM reserves the right to include or exclude any functionality mentioned in this lab for the current release of watsonx.data, or a subsequent release. In addition, any claims made in this lab are not official communications by IBM; rather, they are observed by the authors in unaudited testing and research. The views expressed in this lab is those of the authors and not necessarily those of the IBM Corporation; both are not liable for any of the claims, assertions, or contents in this lab. IBM's statements regarding its plans, directions, and intent are subject to change or withdrawal without notice and at IBM's sole discretion. Information regarding potential future products is intended to outline our general product direction and it should not be relied on in making a purchasing decision. The information mentioned regarding potential future products is not a commitment, promise, or legal obligation to deliver any material, code, or functionality. Information about potential future products may not be incorporated into any contract. The development, release, and timing of any future feature or functionality described for our products remains at our sole discretion. Performance is based on measurements and projections using standard IBM benchmarks in a controlled environment. The actual throughput or performance that any user will experience will vary depending upon many factors, including considerations such as the amount of multiprogramming in the user's job stream, the I/O configuration, the storage configuration, and the workload processed. Therefore, no assurance can be given that an individual user will achieve results like those stated here. U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM. Information in this eBook (including information relating to products that have not yet been announced by IBM) has been reviewed for accuracy as of the date of initial publication and could include unintentional technical or typographical errors. IBM shall have no responsibility to update this information. THIS DOCUMENT IS DISTRIBUTED \"AS IS\" WITHOUT ANY WARRANTY, EITHER EXPRESS OR IMPLIED. IN NO EVENT SHALL IBM BE LIABLE FOR ANY DAMAGE ARISING FROM THE USE OF THIS INFORMATION, INCLUDING BUT NOT LIMITED TO, LOSS OF DATA, BUSINESS INTERRUPTION, LOSS OF PROFIT OR LOSS OF OPPORTUNITY. IBM products and services are warranted according to the terms and conditions of the agreements under which they are provided. References in this document to IBM products, programs, or services does not imply that IBM intends to make such products, programs, or services available in all countries in which IBM operates or does business. Information concerning non-IBM products was obtained from the suppliers of those products, their published announcements, or other publicly available sources. IBM has not tested those products in connection with this publication and cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of those products. IBM does not warrant the quality of any third-party products, or the ability of any such third-party products to interoperate with IBM's products. IBM EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. The provision of the information contained herein is not intended to, and does not, grant any right or license under any IBM patents, copyrights, trademarks, or other intellectual property right. IBM, the IBM logo, ibm.com, Aspera\u00ae, Bluemix, Blueworks Live, CICS, Clearcase, Cognos\u00ae, DOORS\u00ae, Emptoris\u00ae, Enterprise Document Management System\u2122, FASP\u00ae, FileNet\u00ae, Global Business Services \u00ae, Global Technology Services \u00ae, IBM ExperienceOne\u2122, IBM SmartCloud\u00ae, IBM Social Business\u00ae, Information on Demand, ILOG, Maximo\u00ae, MQIntegrator\u00ae, MQSeries\u00ae, Netcool\u00ae, OMEGAMON, OpenPower, PureAnalytics\u2122, PureApplication\u00ae, pureCluster\u2122, PureCoverage\u00ae, PureData\u00ae, PureExperience\u00ae, PureFlex\u00ae, pureQuery\u00ae, pureScale\u00ae, PureSystems\u00ae, QRadar\u00ae, Rational\u00ae, Rhapsody\u00ae, Smarter Commerce\u00ae, SoDA, SPSS, Sterling Commerce\u00ae, StoredIQ, Tealeaf\u00ae, Tivoli\u00ae, Trusteer\u00ae, Unica\u00ae, urban{code}\u00ae, Watson, WebSphere\u00ae, Worklight\u00ae, X-Force\u00ae and System z\u00ae Z/OS, are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the Web at \"Copyright and trademark information\" at: www.ibm.com/legal/copytrade.shtml. All trademarks or copyrights mentioned herein are the possession of their respective owners and IBM makes no claim of ownership by the mention of products that contain these marks.","title":"Disclaimer"},{"location":"wxd-disclaimer/#disclaimer","text":"","title":"Disclaimer"},{"location":"wxd-disclaimer/#watsondata","text":"Copyright \u00a9 2023 by International Business Machines Corporation (IBM). All rights reserved. Printed in Canada. Except as permitted under the Copyright Act of 1976, no part of this publication may be reproduced or distributed in any form or by any means, or stored in a database or retrieval system, without the prior written permission of IBM, with the exception that the program listings may be entered, stored, and executed in a computer system, but they may not be reproduced for publication. The contents of this lab represent those features that may or may not be available in the current release of any products mentioned within this lab despite what the lab may say. IBM reserves the right to include or exclude any functionality mentioned in this lab for the current release of watsonx.data, or a subsequent release. In addition, any claims made in this lab are not official communications by IBM; rather, they are observed by the authors in unaudited testing and research. The views expressed in this lab is those of the authors and not necessarily those of the IBM Corporation; both are not liable for any of the claims, assertions, or contents in this lab. IBM's statements regarding its plans, directions, and intent are subject to change or withdrawal without notice and at IBM's sole discretion. Information regarding potential future products is intended to outline our general product direction and it should not be relied on in making a purchasing decision. The information mentioned regarding potential future products is not a commitment, promise, or legal obligation to deliver any material, code, or functionality. Information about potential future products may not be incorporated into any contract. The development, release, and timing of any future feature or functionality described for our products remains at our sole discretion. Performance is based on measurements and projections using standard IBM benchmarks in a controlled environment. The actual throughput or performance that any user will experience will vary depending upon many factors, including considerations such as the amount of multiprogramming in the user's job stream, the I/O configuration, the storage configuration, and the workload processed. Therefore, no assurance can be given that an individual user will achieve results like those stated here. U.S. Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM. Information in this eBook (including information relating to products that have not yet been announced by IBM) has been reviewed for accuracy as of the date of initial publication and could include unintentional technical or typographical errors. IBM shall have no responsibility to update this information. THIS DOCUMENT IS DISTRIBUTED \"AS IS\" WITHOUT ANY WARRANTY, EITHER EXPRESS OR IMPLIED. IN NO EVENT SHALL IBM BE LIABLE FOR ANY DAMAGE ARISING FROM THE USE OF THIS INFORMATION, INCLUDING BUT NOT LIMITED TO, LOSS OF DATA, BUSINESS INTERRUPTION, LOSS OF PROFIT OR LOSS OF OPPORTUNITY. IBM products and services are warranted according to the terms and conditions of the agreements under which they are provided. References in this document to IBM products, programs, or services does not imply that IBM intends to make such products, programs, or services available in all countries in which IBM operates or does business. Information concerning non-IBM products was obtained from the suppliers of those products, their published announcements, or other publicly available sources. IBM has not tested those products in connection with this publication and cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of those products. IBM does not warrant the quality of any third-party products, or the ability of any such third-party products to interoperate with IBM's products. IBM EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. The provision of the information contained herein is not intended to, and does not, grant any right or license under any IBM patents, copyrights, trademarks, or other intellectual property right. IBM, the IBM logo, ibm.com, Aspera\u00ae, Bluemix, Blueworks Live, CICS, Clearcase, Cognos\u00ae, DOORS\u00ae, Emptoris\u00ae, Enterprise Document Management System\u2122, FASP\u00ae, FileNet\u00ae, Global Business Services \u00ae, Global Technology Services \u00ae, IBM ExperienceOne\u2122, IBM SmartCloud\u00ae, IBM Social Business\u00ae, Information on Demand, ILOG, Maximo\u00ae, MQIntegrator\u00ae, MQSeries\u00ae, Netcool\u00ae, OMEGAMON, OpenPower, PureAnalytics\u2122, PureApplication\u00ae, pureCluster\u2122, PureCoverage\u00ae, PureData\u00ae, PureExperience\u00ae, PureFlex\u00ae, pureQuery\u00ae, pureScale\u00ae, PureSystems\u00ae, QRadar\u00ae, Rational\u00ae, Rhapsody\u00ae, Smarter Commerce\u00ae, SoDA, SPSS, Sterling Commerce\u00ae, StoredIQ, Tealeaf\u00ae, Tivoli\u00ae, Trusteer\u00ae, Unica\u00ae, urban{code}\u00ae, Watson, WebSphere\u00ae, Worklight\u00ae, X-Force\u00ae and System z\u00ae Z/OS, are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the Web at \"Copyright and trademark information\" at: www.ibm.com/legal/copytrade.shtml. All trademarks or copyrights mentioned herein are the possession of their respective owners and IBM makes no claim of ownership by the mention of products that contain these marks.","title":"Watson.data"},{"location":"wxd-federation/","text":"Federation with watsonx.data Watsonx.data can federate data from other data sources, there are a few out of box connectors and one could create additional connectors using the SDK if need be (This does involve some programming and testing effort) and not a trivial exercise. We will use the existing PostgreSQL instance, add some data, and test the federation capabilities. Open the developer sandbox and use existing scripts to create a PostgreSQL database and add some data. Switch to the bin directory as the root user. cd /root/ibm-lh-dev/bin Connect to the sandbox. ./dev-sandbox.sh Create the database. /scripts/create_db.sh pgdatadb exists result: CREATE DATABASE Connect to the Database.quit; /scripts/runsql.sh pgdatadb psql (11.19, server 13.4 (Debian 13.4-4.pgdg110+1)) WARNING: psql major version 11, server major version 13. Some psql features might not work. Type \"help\" for help. Create a Table. create table t1( c1 int, c2 int); CREATE TABLE Insert some sample data. insert into t1 values(1,2); INSERT 0 1 Quit Postgres. quit Quit Sandbox. exit PostgreSQL Properties To set up federation, we need to get the credentials for the PostgreSQL database. Use the following command to get the database password. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD echo $POSTGRES_PASSWORD > /tmp/postgres.pw Open your browser and navigate to: Watsonx.data UI - https://region.techzone-server.com:port Credentials: username: ibmlhadmin password: password Navigate to the Infrastructure manager by clicking on the icon below the Home symbol. You should see a panel like the following. On the top right-hand corner, select Add Component->Add database. The Add database dialog is displayed. Enter the following values: Database type \u2013 PostgreSQL Database name \u2013 pgdatadb Hostname \u2013 ibm-lh-postgres Port \u2013 5432 Display name \u2013 pgdatadb Username \u2013 admin Password \u2013 The value that was extracted in the earlier step Catalog Name \u2013 pgdatadb Your screen should look like the one below. You can press the \"Test\" button to check to see if the connection settings are correct. Once you are satisfied with the settings, press \"Add\". The infrastructure screen should now show the Postgres database. What we are currently missing the connection between the Presto engine and the Postgres data in pgdatadb. We must connect the pgdatadb database to the Presto engine. Use your mouse to hover over the pgdatadb icon until you see the Associate connection icon: Click on the association icon. You should see the following confirmation dialog: Select the presto-01 engine and press Save and restart engine . Press the Associate button and the screen will update to show the connection. Presto Federation First check to make sure that the Presto engine has finished starting. While the watsonx.data UI has restarted the Presto process, it takes a few seconds to become available. check_presto When the command comes back as Ready, you can start using the Presto CLI. Connect to watsonx.data and try Federation. ./presto-cli --catalog pgdatadb Show the current schemas. show schemas; Schema -------------------- pg_catalog public (2 rows) Use the public schema. use public; Select the table we created in Postgres. select * from public.t1; c1 | c2 ----+---- 1 | 2 (1 row) Join with data from other schemas (Sample TPCH+PostgreSQL). select t1.*,customer.name from tpch.tiny.customer, pgdatadb.public.t1 limit 10; c1 | c2 | name ----+----+-------------------- 1 | 2 | Customer#000000001 1 | 2 | Customer#000000002 1 | 2 | Customer#000000003 1 | 2 | Customer#000000004 1 | 2 | Customer#000000005 1 | 2 | Customer#000000006 1 | 2 | Customer#000000007 1 | 2 | Customer#000000008 (10 rows) Quit Presto. quit;","title":"Federation"},{"location":"wxd-federation/#federation-with-watsonxdata","text":"Watsonx.data can federate data from other data sources, there are a few out of box connectors and one could create additional connectors using the SDK if need be (This does involve some programming and testing effort) and not a trivial exercise. We will use the existing PostgreSQL instance, add some data, and test the federation capabilities. Open the developer sandbox and use existing scripts to create a PostgreSQL database and add some data. Switch to the bin directory as the root user. cd /root/ibm-lh-dev/bin Connect to the sandbox. ./dev-sandbox.sh Create the database. /scripts/create_db.sh pgdatadb exists result: CREATE DATABASE Connect to the Database.quit; /scripts/runsql.sh pgdatadb psql (11.19, server 13.4 (Debian 13.4-4.pgdg110+1)) WARNING: psql major version 11, server major version 13. Some psql features might not work. Type \"help\" for help. Create a Table. create table t1( c1 int, c2 int); CREATE TABLE Insert some sample data. insert into t1 values(1,2); INSERT 0 1 Quit Postgres. quit Quit Sandbox. exit","title":"Federation with watsonx.data"},{"location":"wxd-federation/#postgresql-properties","text":"To set up federation, we need to get the credentials for the PostgreSQL database. Use the following command to get the database password. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD echo $POSTGRES_PASSWORD > /tmp/postgres.pw Open your browser and navigate to: Watsonx.data UI - https://region.techzone-server.com:port Credentials: username: ibmlhadmin password: password Navigate to the Infrastructure manager by clicking on the icon below the Home symbol. You should see a panel like the following. On the top right-hand corner, select Add Component->Add database. The Add database dialog is displayed. Enter the following values: Database type \u2013 PostgreSQL Database name \u2013 pgdatadb Hostname \u2013 ibm-lh-postgres Port \u2013 5432 Display name \u2013 pgdatadb Username \u2013 admin Password \u2013 The value that was extracted in the earlier step Catalog Name \u2013 pgdatadb Your screen should look like the one below. You can press the \"Test\" button to check to see if the connection settings are correct. Once you are satisfied with the settings, press \"Add\". The infrastructure screen should now show the Postgres database. What we are currently missing the connection between the Presto engine and the Postgres data in pgdatadb. We must connect the pgdatadb database to the Presto engine. Use your mouse to hover over the pgdatadb icon until you see the Associate connection icon: Click on the association icon. You should see the following confirmation dialog: Select the presto-01 engine and press Save and restart engine . Press the Associate button and the screen will update to show the connection.","title":"PostgreSQL Properties"},{"location":"wxd-federation/#presto-federation","text":"First check to make sure that the Presto engine has finished starting. While the watsonx.data UI has restarted the Presto process, it takes a few seconds to become available. check_presto When the command comes back as Ready, you can start using the Presto CLI. Connect to watsonx.data and try Federation. ./presto-cli --catalog pgdatadb Show the current schemas. show schemas; Schema -------------------- pg_catalog public (2 rows) Use the public schema. use public; Select the table we created in Postgres. select * from public.t1; c1 | c2 ----+---- 1 | 2 (1 row) Join with data from other schemas (Sample TPCH+PostgreSQL). select t1.*,customer.name from tpch.tiny.customer, pgdatadb.public.t1 limit 10; c1 | c2 | name ----+----+-------------------- 1 | 2 | Customer#000000001 1 | 2 | Customer#000000002 1 | 2 | Customer#000000003 1 | 2 | Customer#000000004 1 | 2 | Customer#000000005 1 | 2 | Customer#000000006 1 | 2 | Customer#000000007 1 | 2 | Customer#000000008 (10 rows) Quit Presto. quit;","title":"Presto Federation"},{"location":"wxd-glossary/","text":"Glossary Apache Superset : Apache Superset is an open-source software application for data exploration and data visualization able to handle data at petabyte scale. Apache Superset is a modern, enterprise-ready business intelligence web application. It is fast, lightweight, intuitive, and loaded with options that make it easy for users of all skill sets to explore and visualize their data, from simple pie charts to highly detailed geospatial charts. Application Programming Interface (API)**: Application Programming Interface (API) is a programmatic interface for executing functions of an application in an automated or manual fashion without using a CLI or User Interface. Buckets : Buckets are the basic containers that hold your data. Everything that you store in Cloud Storage must be contained in a bucket. You can use buckets to organize your data and control access to your data, but unlike directories and folders, you cannot nest buckets. Catalog : This term may have many meanings depending on context. Review below: Service Catalog - A service catalog is a comprehensive list of cloud computing services that an organization offers its customers. The catalog is the only portion of the company's service portfolio that is published and provided to customers as a support to the sale or delivery of offered services. Data Catalog - A collection of business information describing the available datasets within an organization. Metastore Catalog - A collection of technical and operational metadata allowing a query engine to overlay a virtual table on a collection of discrete data files. Connector Catalog - The named representation of a connector within the virtual warehouse of a presto instance. Command Line Interface (CLI) : A command-line interface (CLI) is a text-based user interface (UI) used to run programs, manage computer files and interact with the computer. dBeaver : DBeaver is a SQL client software application and a database administration tool. For relational databases it uses the JDBC application programming interface to interact with databases via a JDBC driver. For other databases it uses proprietary database drivers. Federation : A federated database is a system in which several databases appear to function as a single entity. Each component database in the system is completely self-sustained and functional. When an application queries the federated database, the system figures out which of its component databases contains the data being requested and passes the request to it. Federated databases can be thought of as database virtualization in much the same way that storage virtualization makes several drives appear as one. MinIO : MinIO is a high-performance, S3 compatible object store. It is built for large scale AI/ML, data lake and database workloads. It runs on-prem and on any cloud (public or private) and from the data center to the edge. MinIO is software-defined and open source under GNU AGPL v3. Object Storage : Object storage is a data storage architecture for storing unstructured data, which sections data into units\u2014objects\u2014and stores them in a structurally flat data environment. Each object includes the data, metadata, and a unique identifier that applications can use for easy access and retrieval. Presto : Presto is a distributed database query engine (written in Java) that uses the SQL query language. Its architecture allows users to query data sources such as Hadoop, Cassandra, Kafka, AWS S3, Alluxio, MySQL, MongoDB and Teradata, and allows use of multiple data sources within a query. Presto is community-driven open-source software released under the Apache License. Presto's architecture is very similar to other database management systems using cluster computing, sometimes called massively parallel processing (MPP). SPARK : Apache Spark is an open-source unified analytics engine for large-scale data processing. Spark provides an interface for programming clusters with implicit data parallelism and fault tolerance. Spark can be used with watsonx.data but is not included in the watsonsx.data environment image provided. TechZone (IBM Technology Zone) : IBM Technology Zone is the platform where the developer edition of watsonx.data with the sample data sets has been provisioned. Generally, it allows Go To Market teams and Business Partners to easily build technical 'Show Me' live environments, POTs, prototypes, and MVPs, which can then be customized and shared with peers and customers to experience IBM Technology. VNC (Virtual Network Computing) : VNC is a cross-platform screen-sharing system that uses the Remote Frame Buffer (RFB) protocol. VNC was created to control another computer remotely. You may know it best for its role in tech support services. Use of VNC is optional. VNC can be used after the WireGuard VPN has been activated to access the watsonx.data server. WireGuard : WireGuard is a communication protocol and free and open-source software that implements encrypted virtual private networks, and was designed with the goals of ease of use, high speed performance, and low attack surface. You will need to install the Wireguard software and download the server VPN certificate in order to access the watsonx.data server.","title":"Glossary"},{"location":"wxd-glossary/#glossary","text":"Apache Superset : Apache Superset is an open-source software application for data exploration and data visualization able to handle data at petabyte scale. Apache Superset is a modern, enterprise-ready business intelligence web application. It is fast, lightweight, intuitive, and loaded with options that make it easy for users of all skill sets to explore and visualize their data, from simple pie charts to highly detailed geospatial charts. Application Programming Interface (API)**: Application Programming Interface (API) is a programmatic interface for executing functions of an application in an automated or manual fashion without using a CLI or User Interface. Buckets : Buckets are the basic containers that hold your data. Everything that you store in Cloud Storage must be contained in a bucket. You can use buckets to organize your data and control access to your data, but unlike directories and folders, you cannot nest buckets. Catalog : This term may have many meanings depending on context. Review below: Service Catalog - A service catalog is a comprehensive list of cloud computing services that an organization offers its customers. The catalog is the only portion of the company's service portfolio that is published and provided to customers as a support to the sale or delivery of offered services. Data Catalog - A collection of business information describing the available datasets within an organization. Metastore Catalog - A collection of technical and operational metadata allowing a query engine to overlay a virtual table on a collection of discrete data files. Connector Catalog - The named representation of a connector within the virtual warehouse of a presto instance. Command Line Interface (CLI) : A command-line interface (CLI) is a text-based user interface (UI) used to run programs, manage computer files and interact with the computer. dBeaver : DBeaver is a SQL client software application and a database administration tool. For relational databases it uses the JDBC application programming interface to interact with databases via a JDBC driver. For other databases it uses proprietary database drivers. Federation : A federated database is a system in which several databases appear to function as a single entity. Each component database in the system is completely self-sustained and functional. When an application queries the federated database, the system figures out which of its component databases contains the data being requested and passes the request to it. Federated databases can be thought of as database virtualization in much the same way that storage virtualization makes several drives appear as one. MinIO : MinIO is a high-performance, S3 compatible object store. It is built for large scale AI/ML, data lake and database workloads. It runs on-prem and on any cloud (public or private) and from the data center to the edge. MinIO is software-defined and open source under GNU AGPL v3. Object Storage : Object storage is a data storage architecture for storing unstructured data, which sections data into units\u2014objects\u2014and stores them in a structurally flat data environment. Each object includes the data, metadata, and a unique identifier that applications can use for easy access and retrieval. Presto : Presto is a distributed database query engine (written in Java) that uses the SQL query language. Its architecture allows users to query data sources such as Hadoop, Cassandra, Kafka, AWS S3, Alluxio, MySQL, MongoDB and Teradata, and allows use of multiple data sources within a query. Presto is community-driven open-source software released under the Apache License. Presto's architecture is very similar to other database management systems using cluster computing, sometimes called massively parallel processing (MPP). SPARK : Apache Spark is an open-source unified analytics engine for large-scale data processing. Spark provides an interface for programming clusters with implicit data parallelism and fault tolerance. Spark can be used with watsonx.data but is not included in the watsonsx.data environment image provided. TechZone (IBM Technology Zone) : IBM Technology Zone is the platform where the developer edition of watsonx.data with the sample data sets has been provisioned. Generally, it allows Go To Market teams and Business Partners to easily build technical 'Show Me' live environments, POTs, prototypes, and MVPs, which can then be customized and shared with peers and customers to experience IBM Technology. VNC (Virtual Network Computing) : VNC is a cross-platform screen-sharing system that uses the Remote Frame Buffer (RFB) protocol. VNC was created to control another computer remotely. You may know it best for its role in tech support services. Use of VNC is optional. VNC can be used after the WireGuard VPN has been activated to access the watsonx.data server. WireGuard : WireGuard is a communication protocol and free and open-source software that implements encrypted virtual private networks, and was designed with the goals of ease of use, high speed performance, and low attack surface. You will need to install the Wireguard software and download the server VPN certificate in order to access the watsonx.data server.","title":"Glossary"},{"location":"wxd-ingest/","text":"Ingesting Data In this lab we will use the ingest tool (lh-tool) alongside the IBM watsonx.data developer edition that is running in this lab. The Ingest tool is a separate install and currently needs to be downloaded after IBM watsonx.data is started. The lab image contains a copy of this code so you will not need to download it. In addition, there is a staging file (yellowtaxi-parquet) found in the sample data directory that will be used for loading data into the system. As the root user, switch to the client bin directory. cd /root/ibm-lh-client/bin Ingest data into the IBM watsonx.data Before running the utility, we need to retrieve several credentials for MinIO and the keystore password. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') export LH_KEYSTORE_PASSWORD=$(docker exec ibm-lh-presto printenv | grep LH_KEYSTORE_PASSWORD | sed 's/.*=//') We need to generate three export lines and create a directory that will be used later in another script. The staging directory is used to move files between this system and the docker container that the ibm-lh tool is running in. export staging=/root/ibm-lh-client/localstorage/volumes/infra/staging mkdir -p ${staging} cat <<EOF > ${staging}/keys.sh #!/bin/bash export access_key=$LH_S3_ACCESS_KEY export secret_key=$LH_S3_SECRET_KEY export keystore_password=$LH_KEYSTORE_PASSWORD EOF chmod +x ${staging}/keys.sh A copy of the MinIO SSL certificate needs to be copied from the docker container. In addition, the file that we want loaded into watsonx.data will be moved into the staging file directory. docker cp ibm-lh-presto:/mnt/infra/tls/lh-ssl-ts.jks ${staging}/lh-ssl-ts.jks \\cp -f /sampledata/yellow_tripdata_2022-01.parquet ${staging}/. Create a hive schema for staging the ingest file Before ingesting the file, we need to create a new schema that we will use for the table being loaded. Your TechZone reservation will include the server name and port number to connect to the watsonx.data UI. In the watsonx.data UI select the Data Explorer. You should see a screen like the following. Use the \"Create\" pulldown and select Create schema in the hive_data catalog. Select the hive_data catalog and use staging as the new schema name. Press the Create button to finish the creation of the schema. You should see the new staging schema under hive_data . You need to repeat the same process again, but this time you are going to add a schema called ingest in the iceberg_data catalog. You should see the new ingest schema in the navigator screen. Start the IBM tools Container To access the tools container, we issue the ibm-lh command with the data-load option. ./ibm-lh data-copy /////////////////////////////////////// /////////////////////////////////////// _ _ _ _ | |__ _, ,_ | || |_ _ | || '_ \\ / /\\//| |_ _| || |_ | | || |_) || | | |_ _| || | | | |_||_.__/ |_| |_| |_||_| |_| /////////////////////////////////////// /////////////////////////////////////// Once inside the utility, you can use the following command to get more details on the data-copy option. ibm-lh data-copy --help Exit from the tools container by using the exit command. exit The following script is used to ingest the taxi data (yellow_tripdata_2022_01) into watsonx.data. Choose the script which corresponds to the release of watsonx.data that you are currently running. Watsonx.data Version 1.0.3 cat <<EOF > ${staging}/ingest-local.sh #!/bin/bash dir=/mnt/infra/staging cd \\${dir} source ./keys.sh table_name=\"iceberg_data.ingest.yellow_tripdata_2022_01_localfile\" file=\"yellow_tripdata_2022-01.parquet\" ibm-lh data-copy \\\\ --source-data-files \\${dir}/\\${file} \\\\ --target-tables \\${table_name} \\\\ --ingestion-engine-endpoint \"hostname=ibm-lh-presto-svc,port=8443\" \\\\ --staging-location s3://iceberg-bucket/ingest/ \\ --staging-hive-catalog hive_data \\ --staging-hive-schema staging \\ --staging-s3-creds \\\\ \"AWS_SECRET_ACCESS_KEY=\\${secret_key}\\\\ ,AWS_ACCESS_KEY_ID=\\${access_key}\\\\ ,AWS_REGION=us-east-1\\\\ ,BUCKET_NAME=iceberg-bucket\\\\ ,ENDPOINT_URL=http://ibm-lh-minio:9000\" \\\\ --create-if-not-exist \\\\ --trust-store-path \\${dir}/lh-ssl-ts.jks \\\\ --trust-store-password \\${keystore_password} \\\\ --dbuser ibmlhadmin \\\\ --dbpassword password EOF sed -i '/^$/d' ${staging}/ingest-local.sh chmod +x ${staging}/ingest-local.sh Watsonx.data Version 1.1.0 In version 1.1.0, the --staging-s3-creds are replaced with an environment variable called STAGING_S3_CREDS . cat <<EOF > ${staging}/ingest-local.sh #!/bin/bash dir=/mnt/infra/staging cd \\${dir} source ./keys.sh table_name=\"iceberg_data.ingest.yellow_tripdata_2022_01_localfile\" file=\"yellow_tripdata_2022-01.parquet\" export STAGING_S3_CREDS=\"AWS_SECRET_ACCESS_KEY=\\${secret_key}\\\\ ,AWS_ACCESS_KEY_ID=\\${access_key}\\\\ ,AWS_REGION=us-east-1\\\\ ,BUCKET_NAME=iceberg-bucket\\\\ ,ENDPOINT_URL=http://ibm-lh-minio:9000\" ibm-lh data-copy \\\\ --source-data-files \\${dir}/\\${file} \\\\ --target-tables \\${table_name} \\\\ --ingestion-engine-endpoint \"hostname=ibm-lh-presto-svc,port=8443\" \\\\ --staging-location s3://iceberg-bucket/ingest/ \\\\ --staging-hive-catalog hive_data \\\\ --staging-hive-schema staging \\\\ --create-if-not-exist \\\\ --trust-store-path \\${dir}/lh-ssl-ts.jks \\\\ --trust-store-password \\${keystore_password} \\\\ --dbuser ibmlhadmin \\\\ --dbpassword password EOF sed -i '/^$/d' ${staging}/ingest-local.sh chmod +x ${staging}/ingest-local.sh Start the Ingest Process Start the ibm-lh container again: ./ibm-lh data-copy Now run the ingest job inside the tool container. /mnt/infra/staging/ingest-local.sh Start data migration Ingesting SECTION: cmdline Reading parquet file:/staging/yellow_tripdata_2022-01.parquet Inferring source schema... Schema inferred Ingesting source folder s3://dev-bucket-01/ingest/stage_1686085369_19_ea7fa9994c96/ into target table ingest.yellow_tripdata_2022_01_localfile The specified table does not exist Target table does not exist.. creating Current State: RUNNING Rows Ingested: 408575 Current State: RUNNING Rows Ingested: 52 Current State: 100% FINISHED Done ingesting into table: ingest.yellow_tripdata_2022_01_localfile Complete migration After ingesting the data, exit the docker container. exit Refresh the IBM watsonx.data UI to view the iceberg_data catalog in the Data Explorer. Click on the yellow_tripdata table to see the schema definition. Then click on the Data sample tab to see a snippet of the data. Now we can use the UI to run a query against this imported data. Select the SQL icon on the left side of the display. On the line where the yellow_tripdate table is located, click the icon at the end of the name. This will display a drop-down list. Select \"Generate SELECT\". This will generate a SQL statement in the window to the right of the table name. Now execute the query to see what the results are. That completes the labs! Congratulations you are done!","title":"Ingesting Data"},{"location":"wxd-ingest/#ingesting-data","text":"In this lab we will use the ingest tool (lh-tool) alongside the IBM watsonx.data developer edition that is running in this lab. The Ingest tool is a separate install and currently needs to be downloaded after IBM watsonx.data is started. The lab image contains a copy of this code so you will not need to download it. In addition, there is a staging file (yellowtaxi-parquet) found in the sample data directory that will be used for loading data into the system. As the root user, switch to the client bin directory. cd /root/ibm-lh-client/bin","title":"Ingesting Data"},{"location":"wxd-ingest/#ingest-data-into-the-ibm-watsonxdata","text":"Before running the utility, we need to retrieve several credentials for MinIO and the keystore password. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') export LH_KEYSTORE_PASSWORD=$(docker exec ibm-lh-presto printenv | grep LH_KEYSTORE_PASSWORD | sed 's/.*=//') We need to generate three export lines and create a directory that will be used later in another script. The staging directory is used to move files between this system and the docker container that the ibm-lh tool is running in. export staging=/root/ibm-lh-client/localstorage/volumes/infra/staging mkdir -p ${staging} cat <<EOF > ${staging}/keys.sh #!/bin/bash export access_key=$LH_S3_ACCESS_KEY export secret_key=$LH_S3_SECRET_KEY export keystore_password=$LH_KEYSTORE_PASSWORD EOF chmod +x ${staging}/keys.sh A copy of the MinIO SSL certificate needs to be copied from the docker container. In addition, the file that we want loaded into watsonx.data will be moved into the staging file directory. docker cp ibm-lh-presto:/mnt/infra/tls/lh-ssl-ts.jks ${staging}/lh-ssl-ts.jks \\cp -f /sampledata/yellow_tripdata_2022-01.parquet ${staging}/.","title":"Ingest data into the IBM watsonx.data"},{"location":"wxd-ingest/#create-a-hive-schema-for-staging-the-ingest-file","text":"Before ingesting the file, we need to create a new schema that we will use for the table being loaded. Your TechZone reservation will include the server name and port number to connect to the watsonx.data UI. In the watsonx.data UI select the Data Explorer. You should see a screen like the following. Use the \"Create\" pulldown and select Create schema in the hive_data catalog. Select the hive_data catalog and use staging as the new schema name. Press the Create button to finish the creation of the schema. You should see the new staging schema under hive_data . You need to repeat the same process again, but this time you are going to add a schema called ingest in the iceberg_data catalog. You should see the new ingest schema in the navigator screen.","title":"Create a hive schema for staging the ingest file"},{"location":"wxd-ingest/#start-the-ibm-tools-container","text":"To access the tools container, we issue the ibm-lh command with the data-load option. ./ibm-lh data-copy /////////////////////////////////////// /////////////////////////////////////// _ _ _ _ | |__ _, ,_ | || |_ _ | || '_ \\ / /\\//| |_ _| || |_ | | || |_) || | | |_ _| || | | | |_||_.__/ |_| |_| |_||_| |_| /////////////////////////////////////// /////////////////////////////////////// Once inside the utility, you can use the following command to get more details on the data-copy option. ibm-lh data-copy --help Exit from the tools container by using the exit command. exit The following script is used to ingest the taxi data (yellow_tripdata_2022_01) into watsonx.data. Choose the script which corresponds to the release of watsonx.data that you are currently running.","title":"Start the IBM tools Container"},{"location":"wxd-ingest/#watsonxdata-version-103","text":"cat <<EOF > ${staging}/ingest-local.sh #!/bin/bash dir=/mnt/infra/staging cd \\${dir} source ./keys.sh table_name=\"iceberg_data.ingest.yellow_tripdata_2022_01_localfile\" file=\"yellow_tripdata_2022-01.parquet\" ibm-lh data-copy \\\\ --source-data-files \\${dir}/\\${file} \\\\ --target-tables \\${table_name} \\\\ --ingestion-engine-endpoint \"hostname=ibm-lh-presto-svc,port=8443\" \\\\ --staging-location s3://iceberg-bucket/ingest/ \\ --staging-hive-catalog hive_data \\ --staging-hive-schema staging \\ --staging-s3-creds \\\\ \"AWS_SECRET_ACCESS_KEY=\\${secret_key}\\\\ ,AWS_ACCESS_KEY_ID=\\${access_key}\\\\ ,AWS_REGION=us-east-1\\\\ ,BUCKET_NAME=iceberg-bucket\\\\ ,ENDPOINT_URL=http://ibm-lh-minio:9000\" \\\\ --create-if-not-exist \\\\ --trust-store-path \\${dir}/lh-ssl-ts.jks \\\\ --trust-store-password \\${keystore_password} \\\\ --dbuser ibmlhadmin \\\\ --dbpassword password EOF sed -i '/^$/d' ${staging}/ingest-local.sh chmod +x ${staging}/ingest-local.sh","title":"Watsonx.data Version 1.0.3"},{"location":"wxd-ingest/#watsonxdata-version-110","text":"In version 1.1.0, the --staging-s3-creds are replaced with an environment variable called STAGING_S3_CREDS . cat <<EOF > ${staging}/ingest-local.sh #!/bin/bash dir=/mnt/infra/staging cd \\${dir} source ./keys.sh table_name=\"iceberg_data.ingest.yellow_tripdata_2022_01_localfile\" file=\"yellow_tripdata_2022-01.parquet\" export STAGING_S3_CREDS=\"AWS_SECRET_ACCESS_KEY=\\${secret_key}\\\\ ,AWS_ACCESS_KEY_ID=\\${access_key}\\\\ ,AWS_REGION=us-east-1\\\\ ,BUCKET_NAME=iceberg-bucket\\\\ ,ENDPOINT_URL=http://ibm-lh-minio:9000\" ibm-lh data-copy \\\\ --source-data-files \\${dir}/\\${file} \\\\ --target-tables \\${table_name} \\\\ --ingestion-engine-endpoint \"hostname=ibm-lh-presto-svc,port=8443\" \\\\ --staging-location s3://iceberg-bucket/ingest/ \\\\ --staging-hive-catalog hive_data \\\\ --staging-hive-schema staging \\\\ --create-if-not-exist \\\\ --trust-store-path \\${dir}/lh-ssl-ts.jks \\\\ --trust-store-password \\${keystore_password} \\\\ --dbuser ibmlhadmin \\\\ --dbpassword password EOF sed -i '/^$/d' ${staging}/ingest-local.sh chmod +x ${staging}/ingest-local.sh","title":"Watsonx.data Version 1.1.0"},{"location":"wxd-ingest/#start-the-ingest-process","text":"Start the ibm-lh container again: ./ibm-lh data-copy Now run the ingest job inside the tool container. /mnt/infra/staging/ingest-local.sh Start data migration Ingesting SECTION: cmdline Reading parquet file:/staging/yellow_tripdata_2022-01.parquet Inferring source schema... Schema inferred Ingesting source folder s3://dev-bucket-01/ingest/stage_1686085369_19_ea7fa9994c96/ into target table ingest.yellow_tripdata_2022_01_localfile The specified table does not exist Target table does not exist.. creating Current State: RUNNING Rows Ingested: 408575 Current State: RUNNING Rows Ingested: 52 Current State: 100% FINISHED Done ingesting into table: ingest.yellow_tripdata_2022_01_localfile Complete migration After ingesting the data, exit the docker container. exit Refresh the IBM watsonx.data UI to view the iceberg_data catalog in the Data Explorer. Click on the yellow_tripdata table to see the schema definition. Then click on the Data sample tab to see a snippet of the data. Now we can use the UI to run a query against this imported data. Select the SQL icon on the left side of the display. On the line where the yellow_tripdate table is located, click the icon at the end of the name. This will display a drop-down list. Select \"Generate SELECT\". This will generate a SQL statement in the window to the right of the table name. Now execute the query to see what the results are. That completes the labs! Congratulations you are done!","title":"Start the Ingest Process"},{"location":"wxd-intro/","text":"IBM Watson's Great Outdoors Proof of Concept Lab Welcome to the Watson's Great Outdoors Proof of Concept lab. Upon the completion of this lab, you have the skills necessary to perform a POC in a customer environment. This lab uses the watsonx.data developer package. The Developer package is meant to be used on single nodes, so it has some restrictions compared to a deployment on a cluster. However, the concepts and commands used in the developer edition environment are similar to those used in a cluster. Where commands differ, a separate presentation or video will be provided to highlight the differences. Watsonx.data Developer Image The watsonx.data system is running on a virtual machine with the following resources: 4 vCPUs 19Gb of memory 400Gb of disk This is sufficient capacity for running this POC, but should not be used for performance testing or dealing with large data sets.","title":"Introduction"},{"location":"wxd-intro/#ibm-watsons-great-outdoors-proof-of-concept-lab","text":"Welcome to the Watson's Great Outdoors Proof of Concept lab. Upon the completion of this lab, you have the skills necessary to perform a POC in a customer environment. This lab uses the watsonx.data developer package. The Developer package is meant to be used on single nodes, so it has some restrictions compared to a deployment on a cluster. However, the concepts and commands used in the developer edition environment are similar to those used in a cluster. Where commands differ, a separate presentation or video will be provided to highlight the differences.","title":"IBM Watson's Great Outdoors Proof of Concept Lab"},{"location":"wxd-intro/#watsonxdata-developer-image","text":"The watsonx.data system is running on a virtual machine with the following resources: 4 vCPUs 19Gb of memory 400Gb of disk This is sufficient capacity for running this POC, but should not be used for performance testing or dealing with large data sets.","title":"Watsonx.data Developer Image"},{"location":"wxd-jupyter/","text":"Jupyter Notebook The watsonx.data server includes the Jupyter Notebook service which provides an interactive way of exploring the features of the Presto database. The link to the Jupyter Notebook table of contents is provided in your TechZone reservation. When you initially open the link, it will request a password to view the Table of Contents: The default password for the notebook is watsonx.data . The initial screen will display the list of files that are in the notebook directory. You can upload Jupyter notebooks into the system using the Upload button found at the top right of the screen. If you want to view the current list of notebooks in the system, double-click on the Table_of_Contents.ipynb file and the Table of Contents will be displayed. There are 11 notebooks provided in the system, and a brief description of the notebooks are found below. Introduction to Jupyter Notebooks If you are not familiar with the use of Jupyter notebooks, this will be a good starting point. To view the notebook, click on the blue arrow found at the bottom of the box. This will open a new tab in your browser with the contents of the notebook. This notebook provides an introduction to what Jupyter Notebooks are and what the common tasks are that you can perform in a notebook. Watsonx.data Credentials This is a key notebook for you to use during your work with the watsonx.data system. This notebook provides details on the userids and passwords for the services that are running in the server. There is no need to use a terminal command line to determine what the credentials are! In addition to the userids and passwords, this notebook provides a convenient way of downloading the certificate required to connect to the Presto database. Simply click on the certificate link and it will be downloaded to your local machine. Presto Magic Commands Magic commands are special macros found in Jupyter notebooks that simplify many tasks, including the ability to run SQL commands against a database. This notebook provides an introduction to what magic commands are and how you can use the Presto magic commands to connect and query the Presto database. Introduction to Presto SQL The watsonx.data lab has two ways of running SQL against the Presto database: Presto CLI commands Python/Pandas/Magic commands This notebook contains all the SQL that is run in the Presto SQL section of the lab. Instead of using the presto-cli command, this notebook uses magic commands to simplify the SQL execution. You can choose either method to explore Presto SQL. Presto Federation Presto provides the ability to federate queries across different servers. This notebook explores the ability to federate a PostgreSQL table with a table found in Presto. This lab requires some knowledge of the watsonx.data UI, so it is recommended you become familiar with the UI before running this lab. Python with watsonx.data Accessing the Presto database in Python requires the use of the prestodb module which implements features of the DBAPI standard. The notebook demonstrates how to connect to the database and retrieve results. Pandas Dataframes with watsonx.data Pandas dataframes are commonly used in Jupyter notebooks to analyze data. This code will connect to Presto using a Pandas dataframe and display some data from an existing table that was created in Presto. Note that the certificate required for this notebook is provided in the environment. Accessing watsonx.data with Spark This notebook demonstrates how Spark can connect to watsonx.data and manipulate the data. This system has a local, minimally configured Spark engine that will be used to access the Presto database. This engine is sufficient to demonstrate the steps needed to connect to watsonx.data and access the data that resides in the Presto catalogs. Connecting to Db2 This notebook demonstrates connecting to the local Db2 server using Jupyter notebooks. Connecting to PostgreSQL This notebook demonstrates connecting to the local PostgreSQL server using Jupyter notebooks. Connecting to MySQL This notebook demonstrates connecting to the local MySQL server using Jupyter notebooks. Connect to Milvus This notebook demonstrates connecting to the local Milvus vector database.","title":"Jupyter Notebook"},{"location":"wxd-jupyter/#jupyter-notebook","text":"The watsonx.data server includes the Jupyter Notebook service which provides an interactive way of exploring the features of the Presto database. The link to the Jupyter Notebook table of contents is provided in your TechZone reservation. When you initially open the link, it will request a password to view the Table of Contents: The default password for the notebook is watsonx.data . The initial screen will display the list of files that are in the notebook directory. You can upload Jupyter notebooks into the system using the Upload button found at the top right of the screen. If you want to view the current list of notebooks in the system, double-click on the Table_of_Contents.ipynb file and the Table of Contents will be displayed. There are 11 notebooks provided in the system, and a brief description of the notebooks are found below.","title":"Jupyter Notebook"},{"location":"wxd-jupyter/#introduction-to-jupyter-notebooks","text":"If you are not familiar with the use of Jupyter notebooks, this will be a good starting point. To view the notebook, click on the blue arrow found at the bottom of the box. This will open a new tab in your browser with the contents of the notebook. This notebook provides an introduction to what Jupyter Notebooks are and what the common tasks are that you can perform in a notebook.","title":"Introduction to Jupyter Notebooks"},{"location":"wxd-jupyter/#watsonxdata-credentials","text":"This is a key notebook for you to use during your work with the watsonx.data system. This notebook provides details on the userids and passwords for the services that are running in the server. There is no need to use a terminal command line to determine what the credentials are! In addition to the userids and passwords, this notebook provides a convenient way of downloading the certificate required to connect to the Presto database. Simply click on the certificate link and it will be downloaded to your local machine.","title":"Watsonx.data Credentials"},{"location":"wxd-jupyter/#presto-magic-commands","text":"Magic commands are special macros found in Jupyter notebooks that simplify many tasks, including the ability to run SQL commands against a database. This notebook provides an introduction to what magic commands are and how you can use the Presto magic commands to connect and query the Presto database.","title":"Presto Magic Commands"},{"location":"wxd-jupyter/#introduction-to-presto-sql","text":"The watsonx.data lab has two ways of running SQL against the Presto database: Presto CLI commands Python/Pandas/Magic commands This notebook contains all the SQL that is run in the Presto SQL section of the lab. Instead of using the presto-cli command, this notebook uses magic commands to simplify the SQL execution. You can choose either method to explore Presto SQL.","title":"Introduction to Presto SQL"},{"location":"wxd-jupyter/#presto-federation","text":"Presto provides the ability to federate queries across different servers. This notebook explores the ability to federate a PostgreSQL table with a table found in Presto. This lab requires some knowledge of the watsonx.data UI, so it is recommended you become familiar with the UI before running this lab.","title":"Presto Federation"},{"location":"wxd-jupyter/#python-with-watsonxdata","text":"Accessing the Presto database in Python requires the use of the prestodb module which implements features of the DBAPI standard. The notebook demonstrates how to connect to the database and retrieve results.","title":"Python with watsonx.data"},{"location":"wxd-jupyter/#pandas-dataframes-with-watsonxdata","text":"Pandas dataframes are commonly used in Jupyter notebooks to analyze data. This code will connect to Presto using a Pandas dataframe and display some data from an existing table that was created in Presto. Note that the certificate required for this notebook is provided in the environment.","title":"Pandas Dataframes with watsonx.data"},{"location":"wxd-jupyter/#accessing-watsonxdata-with-spark","text":"This notebook demonstrates how Spark can connect to watsonx.data and manipulate the data. This system has a local, minimally configured Spark engine that will be used to access the Presto database. This engine is sufficient to demonstrate the steps needed to connect to watsonx.data and access the data that resides in the Presto catalogs.","title":"Accessing watsonx.data with Spark"},{"location":"wxd-jupyter/#connecting-to-db2","text":"This notebook demonstrates connecting to the local Db2 server using Jupyter notebooks.","title":"Connecting to Db2"},{"location":"wxd-jupyter/#connecting-to-postgresql","text":"This notebook demonstrates connecting to the local PostgreSQL server using Jupyter notebooks.","title":"Connecting to PostgreSQL"},{"location":"wxd-jupyter/#connecting-to-mysql","text":"This notebook demonstrates connecting to the local MySQL server using Jupyter notebooks.","title":"Connecting to MySQL"},{"location":"wxd-jupyter/#connect-to-milvus","text":"This notebook demonstrates connecting to the local Milvus vector database.","title":"Connect to Milvus"},{"location":"wxd-lab-instructions/","text":"Lab Conventions and Startup URL Conventions Your TechZone reservation contains a number of URLs for the services provided in the watsonx.data server. The URL will contain the name of the server and the corresponding port number for the service. Throughout the documentation, the server name will be referred to as region.techzone-server.com and port number is referred to as port . Where you see these URLs, replace them with the values found in your reservation. Commands Throughout the labs, any command that needs to be executed will be highlighted in a grey box: cd /root/ibm-lh-dev/bin A copy icon is usually found on the far right-hand side of the command box. Use this to copy the text and paste it into your command window. You can also select the text and copy it that way. Notes : Some commands may span multiple lines, so make sure you copy everything in the box if you are not using the copy button Commands pasted into a terminal window will require that you hit the Return or Enter key for the command to be executed Commands pasted into a Presto CLI window will execute automatically System Startup The watsonx.data server is started as part of the lab. If at any time you must restart the system for any reason, follow these commands. Make sure that you have an open terminal session and use the following command to connect to the watsonx.data server. ssh -p port watsonx@region.techzone-server.com Password is watsonx.data . Next switch to the root userid. sudo su - Switch to the development code bin directory. cd /root/ibm-lh-dev/bin Once you have switched to the development directory, you can start running watsonx.data commands. You must start the watsonx.data service using either of these commands: systemctl start watsonx.service or export LH_RUN_MODE=diag ./start If you want to start the prestissimo engine, you must use the following syntax: cd /root/ibm-lh-dev/bin export LH_RUN_MODE=diag ./start prestissimo Note: Using the systemctl or start command will take a few minutes to complete. There will not be any status messages displayed when using the systemctl command, so if you want to watch the startup sequence, use the start command instead. You must set LH_RUN_MODE to diag to open up the ports in the various watsonx.data containers. If you do not set this environment variable, you will not be able to access several services externally. You can check the status with the following command. ./status.sh --all Output will look similar to: using /root/ibm-lh-dev/localstorage/volumes as data root directory for user: root/1001 infra config location is /root/ibm-lh-dev/localstorage/volumes/infra lhconsole-ui running 0.0.0.0:9443->8443/tcp, :::9443->8443/tcp lhconsole-nodeclient-svc running 3001/tcp lhconsole-javaapi-svc running 8090/tcp lhconsole-api running 3333/tcp, 8081/tcp ibm-lh-presto running 0.0.0.0:8443->8443/tcp, :::8443->8443/tcp ibm-lh-hive-metastore running ibm-lh-postgres running 5432/tcp ibm-lh-minio running To confirm that the software is working, run the following commands to validate the installation. Presto Engine Test Check the Presto engine by connecting to a schema. First, we need to make sure that the Presto engine has completed all startup tasks. The following command is not part of watsonx.data, but has been included to simplify checking the status of the Presto service. check_presto Waiting for Presto to start. ........................... Ready Note : If the starting message may take up to 5 minutes when the system first initializes. Once the command returns \"Ready\" you can connect to the presto CLI. ./presto-cli --catalog tpch --schema tiny Note : If the Presto engine has not yet started (you didn't run the check_presto script), the next command may result in a useless Java error message. You may need to wait for a minute for attempting to run the statement again. Check the record count of the customer table. select * from customer limit 10; All Presto commands end with a semi-colon. The result set should include the a number of rows (the results will be random). custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+---------------------------------------+-----------+-----------------+---------+------------+------------------------------------------------------------------------------------------------------------------- 1 | Customer#000000001 | IVhzIApeRb ot,c,E | 15 | 25-989-741-2988 | 711.56 | BUILDING | to the even, regular platelets. regular, ironic epitaphs nag e 2 | Customer#000000002 | XSTf4,NCwDVaWNe6tEgvwfmRchLXak | 13 | 23-768-687-3665 | 121.65 | AUTOMOBILE | l accounts. blithely ironic theodolites integrate boldly: caref 3 | Customer#000000003 | MG9kdTD2WBHm | 1 | 11-719-748-3364 | 7498.12 | AUTOMOBILE | deposits eat slyly ironic, even instructions. express foxes detect slyly. blithely even accounts abov 4 | Customer#000000004 | XxVSJsLAGtn | 4 | 14-128-190-5944 | 2866.83 | MACHINERY | requests. final, regular ideas sleep final accou 5 | Customer#000000005 | KvpyuHCplrB84WgAiGV6sYpZq7Tj | 3 | 13-750-942-6364 | 794.47 | HOUSEHOLD | n accounts will have to unwind. foxes cajole accor 6 | Customer#000000006 | sKZz0CsnMD7mp4Xd0YrBvx,LREYKUWAh yVn | 20 | 30-114-968-4951 | 7638.57 | AUTOMOBILE | tions. even deposits boost according to the slyly bold packages. final accounts cajole requests. furious 7 | Customer#000000007 | TcGe5gaZNgVePxU5kRrvXBfkasDTea | 18 | 28-190-982-9759 | 9561.95 | AUTOMOBILE | ainst the ironic, express theodolites. express, even pinto beans among the exp 8 | Customer#000000008 | I0B10bB0AymmC, 0PrRYBCP1yGJ8xcBPmWhl5 | 17 | 27-147-574-9335 | 6819.74 | BUILDING | among the slyly regular theodolites kindle blithely courts. carefully even theodolites haggle slyly along the ide 9 | Customer#000000009 | xKiAFTjUsCuxfeleNqefumTrjS | 8 | 18-338-906-3675 | 8324.07 | FURNITURE | r theodolites according to the requests wake thinly excuses: pending requests haggle furiousl 10 | Customer#000000010 | 6LrEaV6KR6PLVcgl2ArL Q3rqzLzcT1 v2 | 5 | 15-741-346-9870 | 2753.54 | HOUSEHOLD | es regular deposits haggle. fur (10 rows) The output on your screen will look similar to the following: The arrows on the far right side indicate that there is more output to view. Press the right and left arrows on your keyboard to scroll the display. If the result set is small, all of the results will display on the screen and no scrolling will be available unless the results are wider than the screen size. When thje display shows (END) you have reached the bottom of the output. If the display shows a colon ( : ) at the bottom of the screen, you can use the up and down arrow keys to scroll a record at a time, or the Page Up and Page Down keys to scroll a page at a time. To quit viewing the output, press the Q key. Quit the Presto CLI. The Presto quit command can be used with or without a semicolon. quit; Congratulations, your system is now up and running!","title":"Lab Conventions and Startup"},{"location":"wxd-lab-instructions/#lab-conventions-and-startup","text":"","title":"Lab Conventions and Startup"},{"location":"wxd-lab-instructions/#url-conventions","text":"Your TechZone reservation contains a number of URLs for the services provided in the watsonx.data server. The URL will contain the name of the server and the corresponding port number for the service. Throughout the documentation, the server name will be referred to as region.techzone-server.com and port number is referred to as port . Where you see these URLs, replace them with the values found in your reservation.","title":"URL Conventions"},{"location":"wxd-lab-instructions/#commands","text":"Throughout the labs, any command that needs to be executed will be highlighted in a grey box: cd /root/ibm-lh-dev/bin A copy icon is usually found on the far right-hand side of the command box. Use this to copy the text and paste it into your command window. You can also select the text and copy it that way. Notes : Some commands may span multiple lines, so make sure you copy everything in the box if you are not using the copy button Commands pasted into a terminal window will require that you hit the Return or Enter key for the command to be executed Commands pasted into a Presto CLI window will execute automatically","title":"Commands"},{"location":"wxd-lab-instructions/#system-startup","text":"The watsonx.data server is started as part of the lab. If at any time you must restart the system for any reason, follow these commands. Make sure that you have an open terminal session and use the following command to connect to the watsonx.data server. ssh -p port watsonx@region.techzone-server.com Password is watsonx.data . Next switch to the root userid. sudo su - Switch to the development code bin directory. cd /root/ibm-lh-dev/bin Once you have switched to the development directory, you can start running watsonx.data commands. You must start the watsonx.data service using either of these commands: systemctl start watsonx.service or export LH_RUN_MODE=diag ./start If you want to start the prestissimo engine, you must use the following syntax: cd /root/ibm-lh-dev/bin export LH_RUN_MODE=diag ./start prestissimo Note: Using the systemctl or start command will take a few minutes to complete. There will not be any status messages displayed when using the systemctl command, so if you want to watch the startup sequence, use the start command instead. You must set LH_RUN_MODE to diag to open up the ports in the various watsonx.data containers. If you do not set this environment variable, you will not be able to access several services externally. You can check the status with the following command. ./status.sh --all Output will look similar to: using /root/ibm-lh-dev/localstorage/volumes as data root directory for user: root/1001 infra config location is /root/ibm-lh-dev/localstorage/volumes/infra lhconsole-ui running 0.0.0.0:9443->8443/tcp, :::9443->8443/tcp lhconsole-nodeclient-svc running 3001/tcp lhconsole-javaapi-svc running 8090/tcp lhconsole-api running 3333/tcp, 8081/tcp ibm-lh-presto running 0.0.0.0:8443->8443/tcp, :::8443->8443/tcp ibm-lh-hive-metastore running ibm-lh-postgres running 5432/tcp ibm-lh-minio running To confirm that the software is working, run the following commands to validate the installation.","title":"System Startup"},{"location":"wxd-lab-instructions/#presto-engine-test","text":"Check the Presto engine by connecting to a schema. First, we need to make sure that the Presto engine has completed all startup tasks. The following command is not part of watsonx.data, but has been included to simplify checking the status of the Presto service. check_presto Waiting for Presto to start. ........................... Ready Note : If the starting message may take up to 5 minutes when the system first initializes. Once the command returns \"Ready\" you can connect to the presto CLI. ./presto-cli --catalog tpch --schema tiny Note : If the Presto engine has not yet started (you didn't run the check_presto script), the next command may result in a useless Java error message. You may need to wait for a minute for attempting to run the statement again. Check the record count of the customer table. select * from customer limit 10; All Presto commands end with a semi-colon. The result set should include the a number of rows (the results will be random). custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+---------------------------------------+-----------+-----------------+---------+------------+------------------------------------------------------------------------------------------------------------------- 1 | Customer#000000001 | IVhzIApeRb ot,c,E | 15 | 25-989-741-2988 | 711.56 | BUILDING | to the even, regular platelets. regular, ironic epitaphs nag e 2 | Customer#000000002 | XSTf4,NCwDVaWNe6tEgvwfmRchLXak | 13 | 23-768-687-3665 | 121.65 | AUTOMOBILE | l accounts. blithely ironic theodolites integrate boldly: caref 3 | Customer#000000003 | MG9kdTD2WBHm | 1 | 11-719-748-3364 | 7498.12 | AUTOMOBILE | deposits eat slyly ironic, even instructions. express foxes detect slyly. blithely even accounts abov 4 | Customer#000000004 | XxVSJsLAGtn | 4 | 14-128-190-5944 | 2866.83 | MACHINERY | requests. final, regular ideas sleep final accou 5 | Customer#000000005 | KvpyuHCplrB84WgAiGV6sYpZq7Tj | 3 | 13-750-942-6364 | 794.47 | HOUSEHOLD | n accounts will have to unwind. foxes cajole accor 6 | Customer#000000006 | sKZz0CsnMD7mp4Xd0YrBvx,LREYKUWAh yVn | 20 | 30-114-968-4951 | 7638.57 | AUTOMOBILE | tions. even deposits boost according to the slyly bold packages. final accounts cajole requests. furious 7 | Customer#000000007 | TcGe5gaZNgVePxU5kRrvXBfkasDTea | 18 | 28-190-982-9759 | 9561.95 | AUTOMOBILE | ainst the ironic, express theodolites. express, even pinto beans among the exp 8 | Customer#000000008 | I0B10bB0AymmC, 0PrRYBCP1yGJ8xcBPmWhl5 | 17 | 27-147-574-9335 | 6819.74 | BUILDING | among the slyly regular theodolites kindle blithely courts. carefully even theodolites haggle slyly along the ide 9 | Customer#000000009 | xKiAFTjUsCuxfeleNqefumTrjS | 8 | 18-338-906-3675 | 8324.07 | FURNITURE | r theodolites according to the requests wake thinly excuses: pending requests haggle furiousl 10 | Customer#000000010 | 6LrEaV6KR6PLVcgl2ArL Q3rqzLzcT1 v2 | 5 | 15-741-346-9870 | 2753.54 | HOUSEHOLD | es regular deposits haggle. fur (10 rows) The output on your screen will look similar to the following: The arrows on the far right side indicate that there is more output to view. Press the right and left arrows on your keyboard to scroll the display. If the result set is small, all of the results will display on the screen and no scrolling will be available unless the results are wider than the screen size. When thje display shows (END) you have reached the bottom of the output. If the display shows a colon ( : ) at the bottom of the screen, you can use the up and down arrow keys to scroll a record at a time, or the Page Up and Page Down keys to scroll a page at a time. To quit viewing the output, press the Q key. Quit the Presto CLI. The Presto quit command can be used with or without a semicolon. quit; Congratulations, your system is now up and running!","title":"Presto Engine Test"},{"location":"wxd-milvus/","text":"Watsonx Cross Platform Demonstration Watsonx is IBM's platform committed to injecting generative AI into services that span across customer's data lifecycle. Each of the services offer a unique experience but when combined together, the business value is even stronger. Here, we have created a cross platform demo combining watsonx.ai and watsonx.data. This Demo Features: Connecting and creating a project in watsonx.ai Scraping data from wikipedia and other web articles into a Jupyter Notebook Inserting web data into watsonx.data Vectorizing data from Cloud Object Storage in watsonx.data and inserting it into the Milvus vector database Feeding the Milvus embeddings into a Large Language Model via watsonx.ai to generate a response to a question In part 1, we'll pull data using the wikipedia API, split the article content into manageable chunks and insert it into a watsonx.data Hive table. In part 2, we'll create vector embeddings with the wikipedia data in watsonx.data and insert them into the Milvus vector database. Finally, in part 3, we'll use watsonx.ai to query Milvus with various questions, get the relevant documents, embed them into the LLM context and prompt the LLM to generate a useful response. Services Used in this Demo IBM Cloud watsonx.data (Developer edition hosted in a virtual machine) watsonx.ai (Saas on IBM Cloud) Resources The following resources are provided for you to run this demonstration. Box Folder with Videos and Details GitHub Repository with Instructions","title":"Watsonx Cross Platform Demonstration"},{"location":"wxd-milvus/#watsonx-cross-platform-demonstration","text":"Watsonx is IBM's platform committed to injecting generative AI into services that span across customer's data lifecycle. Each of the services offer a unique experience but when combined together, the business value is even stronger. Here, we have created a cross platform demo combining watsonx.ai and watsonx.data. This Demo Features: Connecting and creating a project in watsonx.ai Scraping data from wikipedia and other web articles into a Jupyter Notebook Inserting web data into watsonx.data Vectorizing data from Cloud Object Storage in watsonx.data and inserting it into the Milvus vector database Feeding the Milvus embeddings into a Large Language Model via watsonx.ai to generate a response to a question In part 1, we'll pull data using the wikipedia API, split the article content into manageable chunks and insert it into a watsonx.data Hive table. In part 2, we'll create vector embeddings with the wikipedia data in watsonx.data and insert them into the Milvus vector database. Finally, in part 3, we'll use watsonx.ai to query Milvus with various questions, get the relevant documents, embed them into the LLM context and prompt the LLM to generate a useful response.","title":"Watsonx Cross Platform Demonstration"},{"location":"wxd-milvus/#services-used-in-this-demo","text":"IBM Cloud watsonx.data (Developer edition hosted in a virtual machine) watsonx.ai (Saas on IBM Cloud)","title":"Services Used in this Demo"},{"location":"wxd-milvus/#resources","text":"The following resources are provided for you to run this demonstration. Box Folder with Videos and Details GitHub Repository with Instructions","title":"Resources"},{"location":"wxd-minio/","text":"Using the MinIO console UI MinIO is a high-performance, S3 compatible object store. Rather than connect to an external S3 object store, we are going to use MinIO locally to run with watsonx.data. To connect to MinIO, you will need to extract the MinIO credentials by querying the docker container. You must be the root user to issue these commands. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY MinIO Userid : c4643026087cc21989eb5c12 MinIO Password: 93da45c5af87abd86c9dbc83 You can get all passwords for the system when you are logged in as the watsonx user by using the following command. cat /certs/passwords Your TechZone reservation will include the server name and port number to use when connecting to the MinIO. The default port number is 9001, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Open your browser and navigate to: Minio console - http://region.techzone-server.com:port Note : Firefox on OSX occasionally freezes when connecting to the MinIO console. The Safari browser is much more reliable. Login with object store credentials found above (These will be different for your system). You should see current buckets in MinIO. We are going to examine these buckets after we populate them with some data. Creating Schemas and Tables Not all catalogs support creation of schemas - as an example, the TPCH catalog is not writeable. We will use the iceberg_data catalog for this exercise. We will need to get some details before we continue. Make sure you are connected as the root user and are in the proper directory. cd /root/ibm-lh-dev/bin Login to the Presto CLI. ./presto-cli --catalog iceberg_data Create schema workshop in catalog iceberg_data . Note how we are using the iceberg-bucket bucket which you should have seen in the MinIO object browser. CREATE SCHEMA IF NOT EXISTS workshop with (location='s3a://iceberg-bucket/'); Show the schemas available. show schemas; Schema ---------- workshop (1 row) Use the workshop schema. use workshop; Creating tables Create a new Apache Iceberg table using existing data in the sample Customer table as part of the TPCH catalog schema called TINY. create table customer as select * from tpch.tiny.customer; Show the tables. show tables; Table ---------- customer (1 row) Quit Presto. quit; \u2003 Refresh the Minio screen (see button on the far-right side). You should now see new objects under iceberg-bucket Click on the bucket name and you will see the customer table. Selecting the customer object will show that there is data and metadata in there. How do we know that this data is based on Apache iceberg? If you open the file under metadata , you should see metadata information for the data we are storing in parquet file format. Do I really need Apache Iceberg? YES, YOU DO! However, it is good to understand why? Metadata is also stored in the Parquet file format but only for the single parquet file. If we add more data/partitions, the data is split into multiple Parquet files, and we don't have a mechanism to get the table to parquet files mapping. Run the following example to understand this better. You need to get the access keys for MinIO before running the following lab. Make sure you are still connected as root . export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') Open the developer sandbox to connect to MinIO, download the selected parquet file and inspect the parquet file contents. ./dev-sandbox.sh Update the Python files to be executable (makes our commands more convenient). chmod +x /scripts/*.py List all files in the object store (MinIO). /scripts/s3-inspect.py --host ibm-lh-minio-svc:9000 --accessKey $LH_S3_ACCESS_KEY --secretKey $LH_S3_SECRET_KEY --bucket iceberg-bucket iceberg-bucket b'customer/data/e9536a5e-14a1-4823-98ed-cc22d6fc38db.parquet' 2023-06-06 14:31:47.778000+00:00 6737d7268fcb3eb459b675f27f716f48 75373 None iceberg-bucket b'customer/metadata/00000-e26c56e0-c4d7-4625-8b06-422429f6ba8d.metadata.json' 2023-06-06 14:31:48.629000+00:00 2e722c7dd83c1dd260a7e6c9503c0e04 3272 None iceberg-bucket b'customer/metadata/7cb074a4-3da7-4184-9db8-567383bb588a-m0.avro' 2023-06-06 14:31:48.401000+00:00 655a5568207cc399b8297f1488ef77e7 6342 None iceberg-bucket b'customer/metadata/snap-6143645832277262458-1-7cb074a4-3da7-4184-9db8-567383bb588a.avro' 2023-06-06 14:31:48.445000+00:00 0c3714299d43ae86a46eabdcaac1351e 3753 None You can extract the string with the following command. PARQUET=$(/scripts/s3-inspect.py --host ibm-lh-minio-svc:9000 --accessKey $LH_S3_ACCESS_KEY --secretKey $LH_S3_SECRET_KEY --bucket iceberg-bucket | grep -o -m 1 \".*'customer.*parquet\" | sed -n \"s/.*b'//p\") The file name that is retrieved is substituted into the next command. Note: The file name found in $PARQUET will be different on your system. /scripts/s3-download.py --host ibm-lh-minio-svc:9000 --accessKey $LH_S3_ACCESS_KEY --secretKey $LH_S3_SECRET_KEY --bucket iceberg-bucket --srcFile $PARQUET --destFile /tmp/x.parquet \u2003 Describe the File Contents. /scripts/describe-parquet.py /tmp/x.parquet ---------------------- metadata: created_by: num_columns: 8 num_rows: 1500 num_row_groups: 1 format_version: 1.0 serialized_size: 851 ---------------------- ---------------------- schema: custkey: int64 name: binary address: binary nationkey: int64 phone: binary acctbal: double mktsegment: binary comment: binary ---------------------- ---------------------- row group 0: num_columns: 8 num_rows: 1500 total_byte_size: 74555 ---------------------- ---------------------- row group 0, column 1: file_offset: 0 file_path: physical_type: BYTE_ARRAY num_values: 1500 path_in_schema: name is_stats_set: True statistics: has_min_max: False min: None max: None null_count: 0 distinct_count: 0 num_values: 1500 physical_type: BYTE_ARRAY logical_type: None converted_type (legacy): NONE compression: GZIP encodings: ('DELTA_BYTE_ARRAY',) has_dictionary_page: False dictionary_page_offset: None data_page_offset: 112 total_compressed_size: 599 total_uncompressed_size: 2806 ---------------------- Note : In this instance we used an insert into select * from customer with no partitioning defined there was only 1 parquet file and only 1 row group. This is not the norm, and we deliberately did this to show you the value of using Apache Iceberg file format which can be used by multiple runtimes to access Iceberg data stored in parquet format and managed by hive metastore. Exit from the Sandbox. exit MinIO CLI The MinIO Client mc command line tool provides an alternative to UNIX commands like ls , cat , cp , mirror , and diff with support for both file systems and Amazon S3-compatible cloud storage services. The mc commandline tool is built for compatibility with the AWS S3 API and is tested with MinIO and AWS S3 for expected functionality and behavior. Complete details and restrictions around the use of the CLI command can be found on the MinIO Client page. You can use the MinIO CLI from a variety of clients. The MinIO ports are open in the developer edition image, which provides an alternative to loading data directly from your workstation rather than using the MinIO UI interface. Minio System Alias Before running commands against the MinIO server, an alias must be created that includes the access and secret key. The values can be extracted from the system by listing the contents of the /certs/passwords file or by running the passwords command as the root user. cat /certs/passwords The values for the MinIO access and secret key can also be exported with the following code: export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY The alias command has the following syntax: mc alias set alias-name hostname:port access_key secret_key For a local connection, we will use the following values: Alias Name - watsonxdata Hostname \u2013 watsonxdata Port \u2013 9000 Access Key \u2013 $LH_S3_ACCESS_KEY Secret Key - $LH_S3_SECRET_KEY If you are using an external client to connect to the MinIO service, you will need the URL and Port number from the TechZone reservation. The access key and secret key will be the same values that are found above. Hostname \u2013 region.techzone-server.com Port \u2013 12345 The alias for local access is found below. mc alias set watsonxdata http://watsonxdata:9000 $LH_S3_ACCESS_KEY $LH_S3_SECRET_KEY Added `watsonxdata` successfully. List Buckets The mc command provides us with a number of commands that allows us to manage buckets and files within them. The following command checks to see what buckets currently exist in the system. mc ls tree watsonxdata [2023-09-29 14:38:19 EDT] 0B hive-bucket/ [2023-09-29 14:38:19 EDT] 0B iceberg-bucket/ You can view the contents of a bucket by traversing down the path. mc ls tree watsonxdata/hive-bucket [2023-10-13 10:34:36 EDT] 0B gosalesdw/ [2023-10-13 10:34:36 EDT] 0B hive_sql/ [2023-10-13 10:34:36 EDT] 0B ontime/ [2023-10-13 10:34:36 EDT] 0B taxi/ Create a Bucket At this point we will create a new bucket to hold some data. Use the mb (make bucket) command. The command requires the alias name for the MinIO connection followed by the name of the bucket. mc mb alias-name/new-bucket The following code will create a new bucket in the system called sampledata . mc mb watsonxdata/sampledata Bucket created successfully `watsonxdata/sampledata`. We can double check that the bucket it there. mc ls tree watsonxdata [2023-09-29 14:38:19 EDT] 0B hive-bucket/ [2023-09-29 14:38:19 EDT] 0B iceberg-bucket/ [2023-10-13 10:39:47 EDT] 0B sampledata/ Loading Data One of the most powerful features of the MinIO CLI is its ability to load data directory from your workstation into the bucket, rather than having to use the MinIO UI. It is also significantly faster than using the UI interface. The next example will load data into the bucket that was just created. The directory that we will be using to load data from is called /sampledata and found in the root directory of the watsonx.data server. ls /sampledata/csv gosales ontime taxi Next we will load the data from each one of these directories into the sampledata bucket. The mc command allows you to select which files to place into a bucket, or an entire directory with recursion. In this case we are loading all three directories the files into the bucket. Note the use of the / at the end of the directory name to prevent the directory name csv from being used as the high-level directory name in the target bucket. mc cp --recursive /sampledata/csv/ watsonxdata/sampledata/ ...data/csv/taxi/taxi.csv: 306.16 MiB / 306.16 MiB \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 147.91 MiB/s 2s We can double-check that our files are there with the --files option: mc tree --files watsonxdata/sampledata/ watsonxdata/sampledata/ \u251c\u2500 gosales \u2502 \u251c\u2500 DIST_INVENTORY_FACT.csv \u2502 \u251c\u2500 DIST_PRODUCT_FORECAST_FACT.csv \u2502 \u251c\u2500 DIST_RETURNED_ITEMS_FACT.csv \u2502 \u251c\u2500 DIST_RETURN_REASON_DIM.csv .... \u2502 \u251c\u2500 EMP_EMPLOYEE_DIM.csv \u2502 \u251c\u2500 SLS_SALES_TARG_FACT.csv \u2502 \u251c\u2500 gosales_createtable.sql \u2502 \u2514\u2500 gosales_load_postgres.sql \u251c\u2500 ontime \u2502 \u251c\u2500 aircraft.csv \u2502 \u251c\u2500 airline_id.csv \u2502 \u251c\u2500 airport_id.csv \u2502 \u251c\u2500 cancellation.csv \u2502 \u2514\u2500 ontime.csv \u2514\u2500 taxi \u2514\u2500 taxi.csv Delete a File or Bucket Use the rb (Remove bucket) command to remove a bucket and its contents. You can remove individual objects by using the rm (Remove) command by fully qualifying the object. The next command will remove the ontime.csv file from the ontime folder. mc rm watsonxdata/sampledata/ontime/ontime.csv Removed `watsonxdata/sampledata/ontime/ontime.csv`. The delete bucket command will fail if you still have data in the bucket. mc rb watsonxdata/sampledata mc: `watsonxdata/sampledata` is not empty. Retry this command with `--force` flag if you want to remove `watsonxdata/sampledata` and all its contents Adding the --force option will remove the bucket and all the data in it. Use with caution! mc rb --force watsonxdata/sampledata Removed `watsonxdata/sampledata` successfully.","title":"MinIO UI"},{"location":"wxd-minio/#using-the-minio-console-ui","text":"MinIO is a high-performance, S3 compatible object store. Rather than connect to an external S3 object store, we are going to use MinIO locally to run with watsonx.data. To connect to MinIO, you will need to extract the MinIO credentials by querying the docker container. You must be the root user to issue these commands. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY MinIO Userid : c4643026087cc21989eb5c12 MinIO Password: 93da45c5af87abd86c9dbc83 You can get all passwords for the system when you are logged in as the watsonx user by using the following command. cat /certs/passwords Your TechZone reservation will include the server name and port number to use when connecting to the MinIO. The default port number is 9001, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Open your browser and navigate to: Minio console - http://region.techzone-server.com:port Note : Firefox on OSX occasionally freezes when connecting to the MinIO console. The Safari browser is much more reliable. Login with object store credentials found above (These will be different for your system). You should see current buckets in MinIO. We are going to examine these buckets after we populate them with some data.","title":"Using the MinIO console UI"},{"location":"wxd-minio/#creating-schemas-and-tables","text":"Not all catalogs support creation of schemas - as an example, the TPCH catalog is not writeable. We will use the iceberg_data catalog for this exercise. We will need to get some details before we continue. Make sure you are connected as the root user and are in the proper directory. cd /root/ibm-lh-dev/bin Login to the Presto CLI. ./presto-cli --catalog iceberg_data Create schema workshop in catalog iceberg_data . Note how we are using the iceberg-bucket bucket which you should have seen in the MinIO object browser. CREATE SCHEMA IF NOT EXISTS workshop with (location='s3a://iceberg-bucket/'); Show the schemas available. show schemas; Schema ---------- workshop (1 row) Use the workshop schema. use workshop;","title":"Creating Schemas and Tables"},{"location":"wxd-minio/#creating-tables","text":"Create a new Apache Iceberg table using existing data in the sample Customer table as part of the TPCH catalog schema called TINY. create table customer as select * from tpch.tiny.customer; Show the tables. show tables; Table ---------- customer (1 row) Quit Presto. quit; \u2003 Refresh the Minio screen (see button on the far-right side). You should now see new objects under iceberg-bucket Click on the bucket name and you will see the customer table. Selecting the customer object will show that there is data and metadata in there. How do we know that this data is based on Apache iceberg? If you open the file under metadata , you should see metadata information for the data we are storing in parquet file format.","title":"Creating tables"},{"location":"wxd-minio/#do-i-really-need-apache-iceberg","text":"YES, YOU DO! However, it is good to understand why? Metadata is also stored in the Parquet file format but only for the single parquet file. If we add more data/partitions, the data is split into multiple Parquet files, and we don't have a mechanism to get the table to parquet files mapping. Run the following example to understand this better. You need to get the access keys for MinIO before running the following lab. Make sure you are still connected as root . export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') Open the developer sandbox to connect to MinIO, download the selected parquet file and inspect the parquet file contents. ./dev-sandbox.sh Update the Python files to be executable (makes our commands more convenient). chmod +x /scripts/*.py List all files in the object store (MinIO). /scripts/s3-inspect.py --host ibm-lh-minio-svc:9000 --accessKey $LH_S3_ACCESS_KEY --secretKey $LH_S3_SECRET_KEY --bucket iceberg-bucket iceberg-bucket b'customer/data/e9536a5e-14a1-4823-98ed-cc22d6fc38db.parquet' 2023-06-06 14:31:47.778000+00:00 6737d7268fcb3eb459b675f27f716f48 75373 None iceberg-bucket b'customer/metadata/00000-e26c56e0-c4d7-4625-8b06-422429f6ba8d.metadata.json' 2023-06-06 14:31:48.629000+00:00 2e722c7dd83c1dd260a7e6c9503c0e04 3272 None iceberg-bucket b'customer/metadata/7cb074a4-3da7-4184-9db8-567383bb588a-m0.avro' 2023-06-06 14:31:48.401000+00:00 655a5568207cc399b8297f1488ef77e7 6342 None iceberg-bucket b'customer/metadata/snap-6143645832277262458-1-7cb074a4-3da7-4184-9db8-567383bb588a.avro' 2023-06-06 14:31:48.445000+00:00 0c3714299d43ae86a46eabdcaac1351e 3753 None You can extract the string with the following command. PARQUET=$(/scripts/s3-inspect.py --host ibm-lh-minio-svc:9000 --accessKey $LH_S3_ACCESS_KEY --secretKey $LH_S3_SECRET_KEY --bucket iceberg-bucket | grep -o -m 1 \".*'customer.*parquet\" | sed -n \"s/.*b'//p\") The file name that is retrieved is substituted into the next command. Note: The file name found in $PARQUET will be different on your system. /scripts/s3-download.py --host ibm-lh-minio-svc:9000 --accessKey $LH_S3_ACCESS_KEY --secretKey $LH_S3_SECRET_KEY --bucket iceberg-bucket --srcFile $PARQUET --destFile /tmp/x.parquet \u2003 Describe the File Contents. /scripts/describe-parquet.py /tmp/x.parquet ---------------------- metadata: created_by: num_columns: 8 num_rows: 1500 num_row_groups: 1 format_version: 1.0 serialized_size: 851 ---------------------- ---------------------- schema: custkey: int64 name: binary address: binary nationkey: int64 phone: binary acctbal: double mktsegment: binary comment: binary ---------------------- ---------------------- row group 0: num_columns: 8 num_rows: 1500 total_byte_size: 74555 ---------------------- ---------------------- row group 0, column 1: file_offset: 0 file_path: physical_type: BYTE_ARRAY num_values: 1500 path_in_schema: name is_stats_set: True statistics: has_min_max: False min: None max: None null_count: 0 distinct_count: 0 num_values: 1500 physical_type: BYTE_ARRAY logical_type: None converted_type (legacy): NONE compression: GZIP encodings: ('DELTA_BYTE_ARRAY',) has_dictionary_page: False dictionary_page_offset: None data_page_offset: 112 total_compressed_size: 599 total_uncompressed_size: 2806 ---------------------- Note : In this instance we used an insert into select * from customer with no partitioning defined there was only 1 parquet file and only 1 row group. This is not the norm, and we deliberately did this to show you the value of using Apache Iceberg file format which can be used by multiple runtimes to access Iceberg data stored in parquet format and managed by hive metastore. Exit from the Sandbox. exit","title":"Do I really need Apache Iceberg?"},{"location":"wxd-minio/#minio-cli","text":"The MinIO Client mc command line tool provides an alternative to UNIX commands like ls , cat , cp , mirror , and diff with support for both file systems and Amazon S3-compatible cloud storage services. The mc commandline tool is built for compatibility with the AWS S3 API and is tested with MinIO and AWS S3 for expected functionality and behavior. Complete details and restrictions around the use of the CLI command can be found on the MinIO Client page. You can use the MinIO CLI from a variety of clients. The MinIO ports are open in the developer edition image, which provides an alternative to loading data directly from your workstation rather than using the MinIO UI interface.","title":"MinIO CLI"},{"location":"wxd-minio/#minio-system-alias","text":"Before running commands against the MinIO server, an alias must be created that includes the access and secret key. The values can be extracted from the system by listing the contents of the /certs/passwords file or by running the passwords command as the root user. cat /certs/passwords The values for the MinIO access and secret key can also be exported with the following code: export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY The alias command has the following syntax: mc alias set alias-name hostname:port access_key secret_key For a local connection, we will use the following values: Alias Name - watsonxdata Hostname \u2013 watsonxdata Port \u2013 9000 Access Key \u2013 $LH_S3_ACCESS_KEY Secret Key - $LH_S3_SECRET_KEY If you are using an external client to connect to the MinIO service, you will need the URL and Port number from the TechZone reservation. The access key and secret key will be the same values that are found above. Hostname \u2013 region.techzone-server.com Port \u2013 12345 The alias for local access is found below. mc alias set watsonxdata http://watsonxdata:9000 $LH_S3_ACCESS_KEY $LH_S3_SECRET_KEY Added `watsonxdata` successfully.","title":"Minio System Alias"},{"location":"wxd-minio/#list-buckets","text":"The mc command provides us with a number of commands that allows us to manage buckets and files within them. The following command checks to see what buckets currently exist in the system. mc ls tree watsonxdata [2023-09-29 14:38:19 EDT] 0B hive-bucket/ [2023-09-29 14:38:19 EDT] 0B iceberg-bucket/ You can view the contents of a bucket by traversing down the path. mc ls tree watsonxdata/hive-bucket [2023-10-13 10:34:36 EDT] 0B gosalesdw/ [2023-10-13 10:34:36 EDT] 0B hive_sql/ [2023-10-13 10:34:36 EDT] 0B ontime/ [2023-10-13 10:34:36 EDT] 0B taxi/","title":"List Buckets"},{"location":"wxd-minio/#create-a-bucket","text":"At this point we will create a new bucket to hold some data. Use the mb (make bucket) command. The command requires the alias name for the MinIO connection followed by the name of the bucket. mc mb alias-name/new-bucket The following code will create a new bucket in the system called sampledata . mc mb watsonxdata/sampledata Bucket created successfully `watsonxdata/sampledata`. We can double check that the bucket it there. mc ls tree watsonxdata [2023-09-29 14:38:19 EDT] 0B hive-bucket/ [2023-09-29 14:38:19 EDT] 0B iceberg-bucket/ [2023-10-13 10:39:47 EDT] 0B sampledata/","title":"Create a Bucket"},{"location":"wxd-minio/#loading-data","text":"One of the most powerful features of the MinIO CLI is its ability to load data directory from your workstation into the bucket, rather than having to use the MinIO UI. It is also significantly faster than using the UI interface. The next example will load data into the bucket that was just created. The directory that we will be using to load data from is called /sampledata and found in the root directory of the watsonx.data server. ls /sampledata/csv gosales ontime taxi Next we will load the data from each one of these directories into the sampledata bucket. The mc command allows you to select which files to place into a bucket, or an entire directory with recursion. In this case we are loading all three directories the files into the bucket. Note the use of the / at the end of the directory name to prevent the directory name csv from being used as the high-level directory name in the target bucket. mc cp --recursive /sampledata/csv/ watsonxdata/sampledata/ ...data/csv/taxi/taxi.csv: 306.16 MiB / 306.16 MiB \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 147.91 MiB/s 2s We can double-check that our files are there with the --files option: mc tree --files watsonxdata/sampledata/ watsonxdata/sampledata/ \u251c\u2500 gosales \u2502 \u251c\u2500 DIST_INVENTORY_FACT.csv \u2502 \u251c\u2500 DIST_PRODUCT_FORECAST_FACT.csv \u2502 \u251c\u2500 DIST_RETURNED_ITEMS_FACT.csv \u2502 \u251c\u2500 DIST_RETURN_REASON_DIM.csv .... \u2502 \u251c\u2500 EMP_EMPLOYEE_DIM.csv \u2502 \u251c\u2500 SLS_SALES_TARG_FACT.csv \u2502 \u251c\u2500 gosales_createtable.sql \u2502 \u2514\u2500 gosales_load_postgres.sql \u251c\u2500 ontime \u2502 \u251c\u2500 aircraft.csv \u2502 \u251c\u2500 airline_id.csv \u2502 \u251c\u2500 airport_id.csv \u2502 \u251c\u2500 cancellation.csv \u2502 \u2514\u2500 ontime.csv \u2514\u2500 taxi \u2514\u2500 taxi.csv","title":"Loading Data"},{"location":"wxd-minio/#delete-a-file-or-bucket","text":"Use the rb (Remove bucket) command to remove a bucket and its contents. You can remove individual objects by using the rm (Remove) command by fully qualifying the object. The next command will remove the ontime.csv file from the ontime folder. mc rm watsonxdata/sampledata/ontime/ontime.csv Removed `watsonxdata/sampledata/ontime/ontime.csv`. The delete bucket command will fail if you still have data in the bucket. mc rb watsonxdata/sampledata mc: `watsonxdata/sampledata` is not empty. Retry this command with `--force` flag if you want to remove `watsonxdata/sampledata` and all its contents Adding the --force option will remove the bucket and all the data in it. Use with caution! mc rb --force watsonxdata/sampledata Removed `watsonxdata/sampledata` successfully.","title":"Delete a File or Bucket"},{"location":"wxd-objectstore/","text":"Working with Object Store Buckets In this lab, we will run through some exercises to understand how the watsonx.data can be configured to work with multiple buckets, using IBM COS, in addition to the out of the box MinIO bucket. In the GA version, there will be a user experience to facilitate such setup, however this lab will help you understand some service-service interactions & configurations. Why do we need to do this? In this lab, we will use multiple buckets as this is also how we can illustrate compute-storage separation. Out of the box, both in SaaS and Software, a tiny Object Store bucket is allocated, primarily for getting started use cases. Customers would need to point to their own bucket for their data. The use of a remote bucket (in this example, MinIO) also showcases the \u201copen\u201d aspect of the watsonx.data system. Customers own their data and can physically access the iceberg-ed bucket using other applications or engines, even custom ones that they build themselves. Customers would also have requirements to place (data sovereignty) buckets in specific locations. Compute/analytics engines may need to run in different locations, say closer to applications and connect to buckets in other networks/geos. There will also be situations where the same engine federates data across multiple buckets (and other database connections). As part of the GA release, there will also be authorization & data access rules that will control which user/group can access buckets even within the same engine. In Enterprise/Production environments, engines are expected to be ephemeral or there can be multiple engines. These engines when they come up will connect to different object store buckets. The list of engines will include Db2, NZ, IBM Analytics Engine for Spark, apart from Presto. The shared meta-store is critical in all of this as it helps provide relevant schema information to the engines. Create new bucket in MinIO Open your browser and navigate to the MinIO console. Check to see if the MinIO credentials exist in your terminal session. printf \"\\nAccess Key: $LH_S3_ACCESS_KEY \\nSecret Key: $LH_S3_SECRET_KEY\\n\" Userid : fcf1ec270e05a5031ca27bc9 Password: a671febd9e1e3826cf8cdcf5 If these values are blank, you need to run the following command. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') Click on the Buckets tab to show the current buckets in the MinIO system. You can see that we have two buckets used for the labs. We need to create a new bucket to use for our schema. Press the \u201cCreate Bucket +\u201d option on the right side of the screen. Note : The size and contents of the existing buckets will be different on your system. Enter a bucket name (customer) and then press Create Bucket. You should now see your new bucket below. Open your browser and connect to the watsonx.data UI: Navigate to the Infrastructure manager by clicking on the icon below the Home symbol. Get the S3 bucket credentials. printf \"\\nAccess Key: $LH_S3_ACCESS_KEY \\nSecret Key: $LH_S3_SECRET_KEY\\n\" Click on the Add component menu and select Add bucket. Fill in the dialog with the following values. Bucket type \u2013 MinIO Bucket name \u2013 customer Display name \u2013 customer Endpoint \u2013 http://ibm-lh-minio-svc:9000 Access key \u2013 $LH_S3_ACCESS_KEY (contents of this value) Secret key \u2013 $LH_S3_SECRET_KEY (contents of this value) Activate now \u2013 Yes Catalog type - Apache Iceberg Catalog name - customer When done press Add and Activate now. Your UI should change to display the new bucket (Your screen may be slightly different). Note : This step may take a minute to complete. At this point you need to Associate the bucket with the Presto engine. When you hover your mouse over the Customer catalog and the Associate icon will display. If you do not see the Associate icon, refresh the browser page. Press the associate button and the following dialog will display. Select the presto-01 engine and then press the Save and restart engine button. Associate button and wait for the screen to refresh. Note : Your display will be different. Exploring the Customer bucket First check to make sure that the Presto engine has finished starting. While the watsonx.data UI has restarted the Presto process, it takes a few seconds to become available. check_presto Switch to the bin directory as the root user. sudo su - cd /root/ibm-lh-dev/bin Connect to Presto using the new customer catalog. ./presto-cli --catalog customer We will create a schema where we store our table data using the new catalog name we created for the customer bucket. CREATE SCHEMA IF NOT EXISTS newworkshop with (location='s3a://customer/'); Switch to the new schema. use newworkshop; Use the following SQL to create a new table in the customer bucket. create table customer as select * from tpch.tiny.customer; CREATE TABLE: 1500 rows Quit Presto. quit; You can use the Developer sandbox (bin/dev-sandbox.sh), as described in MinIO UI , to inspect the Customer bucket with the s3-inspect utility. It's easier to use the MinIO console to view the bucket instead. Open your browser and navigate to the MinIO console. From the main screen select Object Browser and view the contents of the customer bucket. Note : You can continue to add new buckets when working with the watsonx.data UI. However, if you delete the catalog or bucket in the UI, you may find that you may not be able to re-catalog it. If you find that this happens, create another bucket, or rename the original one if that is possible.","title":"Working with Object Store Buckets"},{"location":"wxd-objectstore/#working-with-object-store-buckets","text":"In this lab, we will run through some exercises to understand how the watsonx.data can be configured to work with multiple buckets, using IBM COS, in addition to the out of the box MinIO bucket. In the GA version, there will be a user experience to facilitate such setup, however this lab will help you understand some service-service interactions & configurations.","title":"Working with Object Store Buckets"},{"location":"wxd-objectstore/#why-do-we-need-to-do-this","text":"In this lab, we will use multiple buckets as this is also how we can illustrate compute-storage separation. Out of the box, both in SaaS and Software, a tiny Object Store bucket is allocated, primarily for getting started use cases. Customers would need to point to their own bucket for their data. The use of a remote bucket (in this example, MinIO) also showcases the \u201copen\u201d aspect of the watsonx.data system. Customers own their data and can physically access the iceberg-ed bucket using other applications or engines, even custom ones that they build themselves. Customers would also have requirements to place (data sovereignty) buckets in specific locations. Compute/analytics engines may need to run in different locations, say closer to applications and connect to buckets in other networks/geos. There will also be situations where the same engine federates data across multiple buckets (and other database connections). As part of the GA release, there will also be authorization & data access rules that will control which user/group can access buckets even within the same engine. In Enterprise/Production environments, engines are expected to be ephemeral or there can be multiple engines. These engines when they come up will connect to different object store buckets. The list of engines will include Db2, NZ, IBM Analytics Engine for Spark, apart from Presto. The shared meta-store is critical in all of this as it helps provide relevant schema information to the engines.","title":"Why do we need to do this?"},{"location":"wxd-objectstore/#create-new-bucket-in-minio","text":"Open your browser and navigate to the MinIO console. Check to see if the MinIO credentials exist in your terminal session. printf \"\\nAccess Key: $LH_S3_ACCESS_KEY \\nSecret Key: $LH_S3_SECRET_KEY\\n\" Userid : fcf1ec270e05a5031ca27bc9 Password: a671febd9e1e3826cf8cdcf5 If these values are blank, you need to run the following command. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') Click on the Buckets tab to show the current buckets in the MinIO system. You can see that we have two buckets used for the labs. We need to create a new bucket to use for our schema. Press the \u201cCreate Bucket +\u201d option on the right side of the screen. Note : The size and contents of the existing buckets will be different on your system. Enter a bucket name (customer) and then press Create Bucket. You should now see your new bucket below. Open your browser and connect to the watsonx.data UI: Navigate to the Infrastructure manager by clicking on the icon below the Home symbol. Get the S3 bucket credentials. printf \"\\nAccess Key: $LH_S3_ACCESS_KEY \\nSecret Key: $LH_S3_SECRET_KEY\\n\" Click on the Add component menu and select Add bucket. Fill in the dialog with the following values. Bucket type \u2013 MinIO Bucket name \u2013 customer Display name \u2013 customer Endpoint \u2013 http://ibm-lh-minio-svc:9000 Access key \u2013 $LH_S3_ACCESS_KEY (contents of this value) Secret key \u2013 $LH_S3_SECRET_KEY (contents of this value) Activate now \u2013 Yes Catalog type - Apache Iceberg Catalog name - customer When done press Add and Activate now. Your UI should change to display the new bucket (Your screen may be slightly different). Note : This step may take a minute to complete. At this point you need to Associate the bucket with the Presto engine. When you hover your mouse over the Customer catalog and the Associate icon will display. If you do not see the Associate icon, refresh the browser page. Press the associate button and the following dialog will display. Select the presto-01 engine and then press the Save and restart engine button. Associate button and wait for the screen to refresh. Note : Your display will be different.","title":"Create new bucket in MinIO"},{"location":"wxd-objectstore/#exploring-the-customer-bucket","text":"First check to make sure that the Presto engine has finished starting. While the watsonx.data UI has restarted the Presto process, it takes a few seconds to become available. check_presto Switch to the bin directory as the root user. sudo su - cd /root/ibm-lh-dev/bin Connect to Presto using the new customer catalog. ./presto-cli --catalog customer We will create a schema where we store our table data using the new catalog name we created for the customer bucket. CREATE SCHEMA IF NOT EXISTS newworkshop with (location='s3a://customer/'); Switch to the new schema. use newworkshop; Use the following SQL to create a new table in the customer bucket. create table customer as select * from tpch.tiny.customer; CREATE TABLE: 1500 rows Quit Presto. quit; You can use the Developer sandbox (bin/dev-sandbox.sh), as described in MinIO UI , to inspect the Customer bucket with the s3-inspect utility. It's easier to use the MinIO console to view the bucket instead. Open your browser and navigate to the MinIO console. From the main screen select Object Browser and view the contents of the customer bucket. Note : You can continue to add new buckets when working with the watsonx.data UI. However, if you delete the catalog or bucket in the UI, you may find that you may not be able to re-catalog it. If you find that this happens, create another bucket, or rename the original one if that is possible.","title":"Exploring the Customer bucket"},{"location":"wxd-presto/","text":"Using the Presto console UI Your TechZone reservation will include the server name and port number to use when connecting to the Presto UI. The default port number is 8443 and the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Presto console - https://region.techzone-server.com:port Credentials: username: ibmlhadmin password: password The Presto console allows you to do the following: Monitor state of the cluster Queries being executed Queries in queue Data throughput Query details (text and plan) Note : The Presto console is very valuable when it comes to diagnosing problems with any queries you run in the watsonx.data environment. If a query fails you can find more details in the Presto console using the instructions below. On the main Presto screen, click the Finished Button (middle of the screen). A list of finished queries will display below the tab bar. You can scroll through the list of queries and get details of the execution plans. If you scroll through the list, you should see the test query \"select * from customer limit 5\". If you had a query that failed, look for the SQL in this list and continue on with the next step. Click on the query ID to see details of the execution plan that Presto produced. You can get more information about the query by clicking on any of the tabs that are on this screen. For instance, the Live Plan tab will show a visual explain of the stages that the query went through during execution. Scrolling to the bottom of this screen will also display any error messages that may have been produced by the SQL. Take time to check out the other information that is available for the query including the stage performance.","title":"Presto UI"},{"location":"wxd-presto/#using-the-presto-console-ui","text":"Your TechZone reservation will include the server name and port number to use when connecting to the Presto UI. The default port number is 8443 and the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Presto console - https://region.techzone-server.com:port Credentials: username: ibmlhadmin password: password The Presto console allows you to do the following: Monitor state of the cluster Queries being executed Queries in queue Data throughput Query details (text and plan) Note : The Presto console is very valuable when it comes to diagnosing problems with any queries you run in the watsonx.data environment. If a query fails you can find more details in the Presto console using the instructions below. On the main Presto screen, click the Finished Button (middle of the screen). A list of finished queries will display below the tab bar. You can scroll through the list of queries and get details of the execution plans. If you scroll through the list, you should see the test query \"select * from customer limit 5\". If you had a query that failed, look for the SQL in this list and continue on with the next step. Click on the query ID to see details of the execution plan that Presto produced. You can get more information about the query by clicking on any of the tabs that are on this screen. For instance, the Live Plan tab will show a visual explain of the stages that the query went through during execution. Scrolling to the bottom of this screen will also display any error messages that may have been produced by the SQL. Take time to check out the other information that is available for the query including the stage performance.","title":"Using the Presto console UI"},{"location":"wxd-prestocli/","text":"Watsonx.data Introduction Watsonx.data is based on open source PrestoDB, a distributed query engine that enables querying data stored in open file formats using open table formats for optimization or performance. Some of the characteristics which you will learn and see in action include: Compute processing is performed in memory and in parallel. Data is pipelined between query stages and over the network reducing latency overhead that one would have if disk I/O were involved. All the below tasks will be done using the Developer edition of watsonx.data. Using watsonx.data Connectivity to watsonx.data can be done using the following methods: Command line interface (CLI) JDBC drivers watsonx.data UI Connecting to watsonx.data and executing queries using CLI Open the watsonx.data CLI using the development directory. Make sure you are the root user. whoami If not, switch to the root user. sudo su - Change to the development directory. cd /root/ibm-lh-dev/bin Start the Presto CLI. ./presto-cli We are going to inspect the available catalogs in the watsonx.data system. A watsonx.data catalog contains schemas and references a data source via a connector. A connector is like a driver for a database. Watsonx.data connectors are an implementation of Presto's SPI which allows Presto to interact with a resource. There are several built-in connectors for JMX, Hive, TPCH etc., some of which you will use as part of the labs. Display the catalogs. show catalogs; Catalog --------------- hive_data iceberg_data jmx system tpcds tpch (6 rows) Let's look up what schemas are available with any given catalog. We will use the TPCH catalog which is an internal PrestoDB auto-generated catalog and look at the available schemas. show schemas in tpch; Schema -------------------- information_schema sf1 sf100 sf1000 sf10000 sf100000 sf300 sf3000 sf30000 tiny (10 rows) Quit the presto-cli interface by executing the \u201cquit;\u201d command. quit; You can connect to a specific catalog and schema and look at the tables etc. ./presto-cli --catalog tpch --schema tiny presto:tiny> You will notice that the Presto prompt includes the name of the schema we are currently connected to. Look at the available tables in the TPCH catalog under the tiny schema. show tables; Table ---------- customer lineitem nation orders part partsupp region supplier (8 rows) Inspect schema of the customer table. describe customer; Column | Type | Extra | Comment ------------+--------------+-------+--------- custkey | bigint | | name | varchar(25) | | address | varchar(40) | | nationkey | bigint | | phone | varchar(15) | | acctbal | double | | mktsegment | varchar(10) | | comment | varchar(117) | | (8 rows) You could also use the syntax below to achieve the same result. show columns from customer; Column | Type | Extra | Comment -----------+--------------+-------+--------- custkey | bigint | | name | varchar(25) | | address | varchar(40) | | nationkey | bigint | | phone | varchar(15) | | acctbal | double | | mktsegment | varchar(10) | | comment | varchar(117) | | (8 rows) Inspect available functions. show functions like 'date%'; Function | Return Type | Argument Types | Function Type | Deterministic | Description | Variable Arity | Built In | Temporary | Language -------------+--------------------------+----------------------------------------------------------------+---------------+---------------+-------------------------------------------------------------+----------------+----------+-----------+---------- date | date | timestamp | scalar | true | | false | true | false | date | date | timestamp with time zone | scalar | true | | false | true | false | date | date | varchar(x) | scalar | true | | false | true | false | date_add | date | varchar(x), bigint, date | scalar | true | add the specified amount of date to the given date | false | true | false | date_add | time | varchar(x), bigint, time | scalar | true | add the specified amount of time to the given time | false | true | false | date_add | time with time zone | varchar(x), bigint, time with time zone | scalar | true | add the specified amount of time to the given time | false | true | false | date_add | timestamp | varchar(x), bigint, timestamp | scalar | true | add the specified amount of time to the given timestamp | false | true | false | date_add | timestamp with time zone | varchar(x), bigint, timestamp with time zone | scalar | true | add the specified amount of time to the given timestamp | false | true | false | date_diff | bigint | varchar(x), date, date | scalar | true | difference of the given dates in the given unit | false | true | false | date_diff | bigint | varchar(x), time with time zone, time with time zone | scalar | true | difference of the given times in the given unit | false | true | false | date_diff | bigint | varchar(x), time, time | scalar | true | difference of the given times in the given unit | false | true | false | date_diff | bigint | varchar(x), timestamp with time zone, timestamp with time zone | scalar | true | difference of the given times in the given unit | false | true | false | date_diff | bigint | varchar(x), timestamp, timestamp | scalar | true | difference of the given times in the given unit | false | true | false | date_format | varchar | timestamp with time zone, varchar(x) | scalar | true | | false | true | false | date_format | varchar | timestamp, varchar(x) | scalar | true | | false | true | false | date_parse | timestamp | varchar(x), varchar(y) | scalar | true | | false | true | false | date_trunc | date | varchar(x), date | scalar | true | truncate to the specified precision in the session timezone | false | true | false | date_trunc | time | varchar(x), time | scalar | true | truncate to the specified precision in the session timezone | false | true | false | date_trunc | time with time zone | varchar(x), time with time zone | scalar | true | truncate to the specified precision | false | true | false | date_trunc | timestamp | varchar(x), timestamp | scalar | true | truncate to the specified precision in the session timezone | false | true | false | date_trunc | timestamp with time zone | varchar(x), timestamp with time zone | scalar | true | truncate to the specified precision | false | true | false | (21 rows) Switch to a different schema. use sf1; Display the Tables in the schema. show tables; Table ---------- customer lineitem nation orders part partsupp region supplier (8 rows) Query data from customer table. select * from customer limit 5; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+------------------------------------------+-----------+-----------------+---------+------------+------------------------------------------------------------------------------------------------------- 37501 | Customer#000037501 | Ftb6T5ImHuJ | 2 | 12-397-688-6719 | -324.85 | HOUSEHOLD | pending ideas use carefully. express, ironic platelets use among the furiously regular instructions. 37502 | Customer#000037502 | ppCVXCFV,4JJ97IibbcMB5,aPByjYL07vmOLO 3m | 18 | 28-515-931-4624 | 5179.2 | BUILDING | express deposits. pending, regular deposits wake furiously bold deposits. regular 37503 | Customer#000037503 | Cg60cN3LGIUpLpXn0vRffQl8 | 13 | 23-977-571-7365 | 1862.32 | BUILDING | ular deposits. furiously ironic deposits integrate carefully among the iron 37504 | Customer#000037504 | E1 IiMlCfW7I4 1b9wfDZR | 21 | 31-460-590-3623 | 2955.33 | HOUSEHOLD | s believe slyly final foxes. furiously e 37505 | Customer#000037505 | Ad,XVdA6XAa0h aukZHUo5Mxh,ZRwVR3k7b7 | 3 | 13-521-760-7263 | 3243.15 | FURNITURE | ites according to the quickly bold instru (5 rows) Gather statistics on a given table. show stats for customer; column_name | data_size | distinct_values_count | nulls_fraction | row_count | low_value | high_value -------------+-------------+-----------------------+----------------+-----------+-----------+------------ custkey | NULL | 150039.0 | 0.0 | NULL | 1 | 150000 name | 2700000.0 | 149980.0 | 0.0 | NULL | NULL | NULL address | 3758056.0 | 150043.0 | 0.0 | NULL | NULL | NULL nationkey | NULL | 25.0 | 0.0 | NULL | 0 | 24 phone | 2250000.0 | 150018.0 | 0.0 | NULL | NULL | NULL acctbal | NULL | 140166.0 | 0.0 | NULL | -999.99 | 9999.99 mktsegment | 1349610.0 | 5.0 | 0.0 | NULL | NULL | NULL comment | 1.0876099E7 | 149987.0 | 0.0 | NULL | NULL | NULL NULL | NULL | NULL | NULL | 150000.0 | NULL | NULL (9 rows) Quit Presto. quit;","title":"Presto CLI"},{"location":"wxd-prestocli/#watsonxdata-introduction","text":"Watsonx.data is based on open source PrestoDB, a distributed query engine that enables querying data stored in open file formats using open table formats for optimization or performance. Some of the characteristics which you will learn and see in action include: Compute processing is performed in memory and in parallel. Data is pipelined between query stages and over the network reducing latency overhead that one would have if disk I/O were involved. All the below tasks will be done using the Developer edition of watsonx.data.","title":"Watsonx.data Introduction"},{"location":"wxd-prestocli/#using-watsonxdata","text":"Connectivity to watsonx.data can be done using the following methods: Command line interface (CLI) JDBC drivers watsonx.data UI","title":"Using watsonx.data"},{"location":"wxd-prestocli/#connecting-to-watsonxdata-and-executing-queries-using-cli","text":"Open the watsonx.data CLI using the development directory. Make sure you are the root user. whoami If not, switch to the root user. sudo su - Change to the development directory. cd /root/ibm-lh-dev/bin Start the Presto CLI. ./presto-cli We are going to inspect the available catalogs in the watsonx.data system. A watsonx.data catalog contains schemas and references a data source via a connector. A connector is like a driver for a database. Watsonx.data connectors are an implementation of Presto's SPI which allows Presto to interact with a resource. There are several built-in connectors for JMX, Hive, TPCH etc., some of which you will use as part of the labs. Display the catalogs. show catalogs; Catalog --------------- hive_data iceberg_data jmx system tpcds tpch (6 rows) Let's look up what schemas are available with any given catalog. We will use the TPCH catalog which is an internal PrestoDB auto-generated catalog and look at the available schemas. show schemas in tpch; Schema -------------------- information_schema sf1 sf100 sf1000 sf10000 sf100000 sf300 sf3000 sf30000 tiny (10 rows) Quit the presto-cli interface by executing the \u201cquit;\u201d command. quit; You can connect to a specific catalog and schema and look at the tables etc. ./presto-cli --catalog tpch --schema tiny presto:tiny> You will notice that the Presto prompt includes the name of the schema we are currently connected to. Look at the available tables in the TPCH catalog under the tiny schema. show tables; Table ---------- customer lineitem nation orders part partsupp region supplier (8 rows) Inspect schema of the customer table. describe customer; Column | Type | Extra | Comment ------------+--------------+-------+--------- custkey | bigint | | name | varchar(25) | | address | varchar(40) | | nationkey | bigint | | phone | varchar(15) | | acctbal | double | | mktsegment | varchar(10) | | comment | varchar(117) | | (8 rows) You could also use the syntax below to achieve the same result. show columns from customer; Column | Type | Extra | Comment -----------+--------------+-------+--------- custkey | bigint | | name | varchar(25) | | address | varchar(40) | | nationkey | bigint | | phone | varchar(15) | | acctbal | double | | mktsegment | varchar(10) | | comment | varchar(117) | | (8 rows) Inspect available functions. show functions like 'date%'; Function | Return Type | Argument Types | Function Type | Deterministic | Description | Variable Arity | Built In | Temporary | Language -------------+--------------------------+----------------------------------------------------------------+---------------+---------------+-------------------------------------------------------------+----------------+----------+-----------+---------- date | date | timestamp | scalar | true | | false | true | false | date | date | timestamp with time zone | scalar | true | | false | true | false | date | date | varchar(x) | scalar | true | | false | true | false | date_add | date | varchar(x), bigint, date | scalar | true | add the specified amount of date to the given date | false | true | false | date_add | time | varchar(x), bigint, time | scalar | true | add the specified amount of time to the given time | false | true | false | date_add | time with time zone | varchar(x), bigint, time with time zone | scalar | true | add the specified amount of time to the given time | false | true | false | date_add | timestamp | varchar(x), bigint, timestamp | scalar | true | add the specified amount of time to the given timestamp | false | true | false | date_add | timestamp with time zone | varchar(x), bigint, timestamp with time zone | scalar | true | add the specified amount of time to the given timestamp | false | true | false | date_diff | bigint | varchar(x), date, date | scalar | true | difference of the given dates in the given unit | false | true | false | date_diff | bigint | varchar(x), time with time zone, time with time zone | scalar | true | difference of the given times in the given unit | false | true | false | date_diff | bigint | varchar(x), time, time | scalar | true | difference of the given times in the given unit | false | true | false | date_diff | bigint | varchar(x), timestamp with time zone, timestamp with time zone | scalar | true | difference of the given times in the given unit | false | true | false | date_diff | bigint | varchar(x), timestamp, timestamp | scalar | true | difference of the given times in the given unit | false | true | false | date_format | varchar | timestamp with time zone, varchar(x) | scalar | true | | false | true | false | date_format | varchar | timestamp, varchar(x) | scalar | true | | false | true | false | date_parse | timestamp | varchar(x), varchar(y) | scalar | true | | false | true | false | date_trunc | date | varchar(x), date | scalar | true | truncate to the specified precision in the session timezone | false | true | false | date_trunc | time | varchar(x), time | scalar | true | truncate to the specified precision in the session timezone | false | true | false | date_trunc | time with time zone | varchar(x), time with time zone | scalar | true | truncate to the specified precision | false | true | false | date_trunc | timestamp | varchar(x), timestamp | scalar | true | truncate to the specified precision in the session timezone | false | true | false | date_trunc | timestamp with time zone | varchar(x), timestamp with time zone | scalar | true | truncate to the specified precision | false | true | false | (21 rows) Switch to a different schema. use sf1; Display the Tables in the schema. show tables; Table ---------- customer lineitem nation orders part partsupp region supplier (8 rows) Query data from customer table. select * from customer limit 5; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+------------------------------------------+-----------+-----------------+---------+------------+------------------------------------------------------------------------------------------------------- 37501 | Customer#000037501 | Ftb6T5ImHuJ | 2 | 12-397-688-6719 | -324.85 | HOUSEHOLD | pending ideas use carefully. express, ironic platelets use among the furiously regular instructions. 37502 | Customer#000037502 | ppCVXCFV,4JJ97IibbcMB5,aPByjYL07vmOLO 3m | 18 | 28-515-931-4624 | 5179.2 | BUILDING | express deposits. pending, regular deposits wake furiously bold deposits. regular 37503 | Customer#000037503 | Cg60cN3LGIUpLpXn0vRffQl8 | 13 | 23-977-571-7365 | 1862.32 | BUILDING | ular deposits. furiously ironic deposits integrate carefully among the iron 37504 | Customer#000037504 | E1 IiMlCfW7I4 1b9wfDZR | 21 | 31-460-590-3623 | 2955.33 | HOUSEHOLD | s believe slyly final foxes. furiously e 37505 | Customer#000037505 | Ad,XVdA6XAa0h aukZHUo5Mxh,ZRwVR3k7b7 | 3 | 13-521-760-7263 | 3243.15 | FURNITURE | ites according to the quickly bold instru (5 rows) Gather statistics on a given table. show stats for customer; column_name | data_size | distinct_values_count | nulls_fraction | row_count | low_value | high_value -------------+-------------+-----------------------+----------------+-----------+-----------+------------ custkey | NULL | 150039.0 | 0.0 | NULL | 1 | 150000 name | 2700000.0 | 149980.0 | 0.0 | NULL | NULL | NULL address | 3758056.0 | 150043.0 | 0.0 | NULL | NULL | NULL nationkey | NULL | 25.0 | 0.0 | NULL | 0 | 24 phone | 2250000.0 | 150018.0 | 0.0 | NULL | NULL | NULL acctbal | NULL | 140166.0 | 0.0 | NULL | -999.99 | 9999.99 mktsegment | 1349610.0 | 5.0 | 0.0 | NULL | NULL | NULL comment | 1.0876099E7 | 149987.0 | 0.0 | NULL | NULL | NULL NULL | NULL | NULL | NULL | 150000.0 | NULL | NULL (9 rows) Quit Presto. quit;","title":"Connecting to watsonx.data and executing queries using CLI"},{"location":"wxd-quick/","text":"Quick Start The following sections describe how to get started quickly with the watsonx.data developer system. If you are not familiar with the tools mentioned below, select the details link for more instructions. Requesting an IBM userid Requesting a TechZone image Accessing the Image SSH Access Open Ports Passwords Portainer Console Documentation IBM Userid An IBMid is needed to access IBM Technology Zone. If you do not have an IBMid, click on the following link and request a new IBMid. https://techzone.ibm.com More details: Creating an IBM Userid Requesting a TechZone image Log into TechZone ( https://techzone.ibm.com ) and search for the watsonx.data Developer Base Image or use the following link. https://techzone.ibm.com/collection/ibm-watsonxdata-developer-base-image Problem with reservations failing? Check the TechZone status page at https://techzone.status.io . More details: Reserving a TechZone image Accessing the Image The email from TechZone indicating that the image is ready will contain a link to your reservations. Click on the link and search for the watsonx.data reservation. More details: Accessing a TechZone image SSH Access Your TechZone reservation will include the server name and port number to use when connecting using ssh. The port number is referred to as port in the command below, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Open a terminal window and use the following syntax to connect as the watsonx userid. ssh -p port watsonx@region.techzone-server.com The port number and server name are provided as part of the TechZone reservation details. To become the root user, issue the following command. sudo su - Password for both users is watsonx.data . You can copy files into and out of the server using the following syntax: scp -P port myfile.txt watsonx@region.techzone-server.com:/tmp/myfile.txt scp -P port watsonx@region.techzone-server.com:/tmp/myfile.txt myfile.txt More details: SSH Access Open Ports The following URLs and Ports are used to access the watsonx.data services. Most browsers will work with these URLs. However, Mac OSX users should be aware that accessing the MinIO console may occasionally cause Firefox and Chrome to lock up. If you find that this occurs, try using Safari which appears to work fine. The ports that are used in the lab are listed below. Note that the internal port number is always the same when running in the VMware image using the VM Remote Console. When using your workstation's browser, you will need to use the server name and port number supplied in the TechZone reservation. Service Port Active watsonx.data management console 9443 Yes Presto console 8443 Yes MinIO console (S3 buckets) 9001 Yes MinIO S3 Endpoint 9000 Yes Portainer (Docker container management) 6443 Yes Apache Superset (Query and Graphing) 8088 No Jupyter Notebook 8888 Yes Presto External Port 8443 Yes Hive metadata Port 9043 Yes MySQL External Port 3306 Yes Postgres External Port 5432 Yes Db2 Database Port 50000 Yes VNC Port 5901 No Note : The following ports are not active unless the service is started: Apache Superset (8088) VNC Terminal Display (5901) More details: Open Ports Passwords This table lists the passwords for the services that have \"fixed\" userids and passwords. Service Userid Password Virtual Machine watsonx watsonx.data Virtual Machine root watsonx.data watsonx.data UI ibmlhadmin password Jupyter Notebook none watsonx.data Presto ibmlhadmin password Minio Generated Generated Postgres admin Generated Apache Superset admin admin Portainer admin watsonx.data Db2 db2inst1 db2inst1 MySQL root password VNC Windows none watsonx. VNC OSX none watsonx.data Use the following commands to get the generated userid and password for MinIO. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed \"s/.*=//\") export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY Use the following command to get the password for Postgres. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD You can get all passwords for the system when you are logged by issuing the following command: cat /certs/passwords If the passwords do not appear to work, you may need to regenerate them. The following must be run as the root user. sudo su - passwords The passwords command will refresh the passwords and also display them. If this command is not run as root, an error message will be displayed because the password file cannot be updated as the watsonx user. More details: Passwords Portainer This lab system has Portainer installed. Portainer provides an administrative interface to the Docker images that are running on this system. You can use this console to check that all the containers are running and see what resources they are using. Open your TechZone reservation and select the Portainer link to connect to it. Credentials: userid: admin password: watsonx.data More details: Portainer Documentation The following links provide more information on the components in this lab. watsonx.data - https://www.ibm.com/docs/en/watsonxdata/1.0.x Presto SQL - https://prestodb.io/docs/current/sql.html Presto Console - https://prestodb.io/docs/current/admin/web-interface.html MinIO - https://min.io/docs/minio/linux/administration/minio-console.html Apache Superset - https://superset.apache.org/docs/creating-charts-dashboards/exploring-data dBeaver - https://dbeaver.com/docs/wiki/Application-Window-Overview/ Db2 SQL - https://www.ibm.com/docs/en/db2/11.5?topic=queries-select-statement PostgreSQL SQL - https://www.postgresql.org/docs/current/sql.html","title":"Quick Start"},{"location":"wxd-quick/#quick-start","text":"The following sections describe how to get started quickly with the watsonx.data developer system. If you are not familiar with the tools mentioned below, select the details link for more instructions. Requesting an IBM userid Requesting a TechZone image Accessing the Image SSH Access Open Ports Passwords Portainer Console Documentation","title":"Quick Start"},{"location":"wxd-quick/#ibm-userid","text":"An IBMid is needed to access IBM Technology Zone. If you do not have an IBMid, click on the following link and request a new IBMid. https://techzone.ibm.com More details: Creating an IBM Userid","title":"IBM Userid"},{"location":"wxd-quick/#requesting-a-techzone-image","text":"Log into TechZone ( https://techzone.ibm.com ) and search for the watsonx.data Developer Base Image or use the following link. https://techzone.ibm.com/collection/ibm-watsonxdata-developer-base-image Problem with reservations failing? Check the TechZone status page at https://techzone.status.io . More details: Reserving a TechZone image","title":"Requesting a TechZone image"},{"location":"wxd-quick/#accessing-the-image","text":"The email from TechZone indicating that the image is ready will contain a link to your reservations. Click on the link and search for the watsonx.data reservation. More details: Accessing a TechZone image","title":"Accessing the Image"},{"location":"wxd-quick/#ssh-access","text":"Your TechZone reservation will include the server name and port number to use when connecting using ssh. The port number is referred to as port in the command below, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Open a terminal window and use the following syntax to connect as the watsonx userid. ssh -p port watsonx@region.techzone-server.com The port number and server name are provided as part of the TechZone reservation details. To become the root user, issue the following command. sudo su - Password for both users is watsonx.data . You can copy files into and out of the server using the following syntax: scp -P port myfile.txt watsonx@region.techzone-server.com:/tmp/myfile.txt scp -P port watsonx@region.techzone-server.com:/tmp/myfile.txt myfile.txt More details: SSH Access","title":"SSH Access"},{"location":"wxd-quick/#open-ports","text":"The following URLs and Ports are used to access the watsonx.data services. Most browsers will work with these URLs. However, Mac OSX users should be aware that accessing the MinIO console may occasionally cause Firefox and Chrome to lock up. If you find that this occurs, try using Safari which appears to work fine. The ports that are used in the lab are listed below. Note that the internal port number is always the same when running in the VMware image using the VM Remote Console. When using your workstation's browser, you will need to use the server name and port number supplied in the TechZone reservation. Service Port Active watsonx.data management console 9443 Yes Presto console 8443 Yes MinIO console (S3 buckets) 9001 Yes MinIO S3 Endpoint 9000 Yes Portainer (Docker container management) 6443 Yes Apache Superset (Query and Graphing) 8088 No Jupyter Notebook 8888 Yes Presto External Port 8443 Yes Hive metadata Port 9043 Yes MySQL External Port 3306 Yes Postgres External Port 5432 Yes Db2 Database Port 50000 Yes VNC Port 5901 No Note : The following ports are not active unless the service is started: Apache Superset (8088) VNC Terminal Display (5901) More details: Open Ports","title":"Open Ports"},{"location":"wxd-quick/#passwords","text":"This table lists the passwords for the services that have \"fixed\" userids and passwords. Service Userid Password Virtual Machine watsonx watsonx.data Virtual Machine root watsonx.data watsonx.data UI ibmlhadmin password Jupyter Notebook none watsonx.data Presto ibmlhadmin password Minio Generated Generated Postgres admin Generated Apache Superset admin admin Portainer admin watsonx.data Db2 db2inst1 db2inst1 MySQL root password VNC Windows none watsonx. VNC OSX none watsonx.data Use the following commands to get the generated userid and password for MinIO. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed \"s/.*=//\") export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY Use the following command to get the password for Postgres. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD You can get all passwords for the system when you are logged by issuing the following command: cat /certs/passwords If the passwords do not appear to work, you may need to regenerate them. The following must be run as the root user. sudo su - passwords The passwords command will refresh the passwords and also display them. If this command is not run as root, an error message will be displayed because the password file cannot be updated as the watsonx user. More details: Passwords","title":"Passwords"},{"location":"wxd-quick/#portainer","text":"This lab system has Portainer installed. Portainer provides an administrative interface to the Docker images that are running on this system. You can use this console to check that all the containers are running and see what resources they are using. Open your TechZone reservation and select the Portainer link to connect to it. Credentials: userid: admin password: watsonx.data More details: Portainer","title":"Portainer"},{"location":"wxd-quick/#documentation","text":"The following links provide more information on the components in this lab. watsonx.data - https://www.ibm.com/docs/en/watsonxdata/1.0.x Presto SQL - https://prestodb.io/docs/current/sql.html Presto Console - https://prestodb.io/docs/current/admin/web-interface.html MinIO - https://min.io/docs/minio/linux/administration/minio-console.html Apache Superset - https://superset.apache.org/docs/creating-charts-dashboards/exploring-data dBeaver - https://dbeaver.com/docs/wiki/Application-Window-Overview/ Db2 SQL - https://www.ibm.com/docs/en/db2/11.5?topic=queries-select-statement PostgreSQL SQL - https://www.postgresql.org/docs/current/sql.html","title":"Documentation"},{"location":"wxd-reference-access/","text":"Accessing the watsonx.data TechZone Image The reservation email from TechZone is extremely important since it provides a link to your reservation. Click on the View My Reservations to access your reservations. Click on the reservation that corresponds to the watsonx.data reservation. The menu button that is beside the arrow provides options to extend or delete the reservation. When you click on reservation details option, or the reservation box, the browser will display the details of your image. Scroll down to the bottom of the web page to access the VM Remote Console. You can access the logon screen of the virtual machine by pressing the VM Remote Console button. It is not necessary to use the VM console except unless you want to use the dBeaver program. Select the watsonx user and use watsonx.data as the password. Refer to the section on VM Remote Console for more details.","title":"Accessing the reservation"},{"location":"wxd-reference-access/#accessing-the-watsonxdata-techzone-image","text":"The reservation email from TechZone is extremely important since it provides a link to your reservation. Click on the View My Reservations to access your reservations. Click on the reservation that corresponds to the watsonx.data reservation. The menu button that is beside the arrow provides options to extend or delete the reservation. When you click on reservation details option, or the reservation box, the browser will display the details of your image. Scroll down to the bottom of the web page to access the VM Remote Console. You can access the logon screen of the virtual machine by pressing the VM Remote Console button. It is not necessary to use the VM console except unless you want to use the dBeaver program. Select the watsonx user and use watsonx.data as the password. Refer to the section on VM Remote Console for more details.","title":"Accessing the watsonx.data TechZone Image"},{"location":"wxd-reference-documentation/","text":"Documentation The following links provide more information on the components in this lab. watsonx.data - https://www.ibm.com/docs/en/watsonxdata/1.1.x Presto SQL - https://prestodb.io/docs/current/sql.html Presto Console - https://prestodb.io/docs/current/admin/web-interface.html MinIO - https://min.io/docs/minio/linux/administration/minio-console.html MinIO CLI - https://min.io/docs/minio/linux/reference/minio-mc.html dBeaver - https://dbeaver.com/docs/wiki/Application-Window-Overview/ PostgreSQL SQL - https://www.postgresql.org/docs/current/sql.html Milvus Vector Database - https://milvus.io/docs","title":"Documentation"},{"location":"wxd-reference-documentation/#documentation","text":"The following links provide more information on the components in this lab. watsonx.data - https://www.ibm.com/docs/en/watsonxdata/1.1.x Presto SQL - https://prestodb.io/docs/current/sql.html Presto Console - https://prestodb.io/docs/current/admin/web-interface.html MinIO - https://min.io/docs/minio/linux/administration/minio-console.html MinIO CLI - https://min.io/docs/minio/linux/reference/minio-mc.html dBeaver - https://dbeaver.com/docs/wiki/Application-Window-Overview/ PostgreSQL SQL - https://www.postgresql.org/docs/current/sql.html Milvus Vector Database - https://milvus.io/docs","title":"Documentation"},{"location":"wxd-reference-ibmid/","text":"Requesting an IBM Userid. An IBMid is needed to access IBM Technology Zone. If you do not have an IBMid, click on the following link. https://techzone.ibm.com You should see the following login screen for TechZone. Click on the `Create an IBMid`` button and proceed to fill in the details on this form: Once you have verified your account, you can continue onto logging into the TechZone server.","title":"Requesting an IBM Userid."},{"location":"wxd-reference-ibmid/#requesting-an-ibm-userid","text":"An IBMid is needed to access IBM Technology Zone. If you do not have an IBMid, click on the following link. https://techzone.ibm.com You should see the following login screen for TechZone. Click on the `Create an IBMid`` button and proceed to fill in the details on this form: Once you have verified your account, you can continue onto logging into the TechZone server.","title":"Requesting an IBM Userid."},{"location":"wxd-reference-passwords/","text":"Passwords This table lists the passwords for the services that have \"fixed\" userids and passwords. Service Userid Password Virtual Machine watsonx watsonx.data Virtual Machine root watsonx.data watsonx.data UI ibmlhadmin password Presto ibmlhadmin password Minio Generated Generated Postgres admin Generated Portainer admin watsonx.data Thrift lh-default Generated Jupyter watsonx.data Milvus ibmlhadmin password SSH Browser watsonx watsonx.data Use the following commands to get the generated userid and password for MinIO. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY Use the following command to get the password for Postgres. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD You can get all passwords for the system when you are logged in by issuing the following command: cat /certs/passwords If the passwords do not appear to work, you may need to regenerate them. The following must be run as the root user. sudo su - passwords The passwords command will refresh the passwords and also display them. If this command is not run as root, an error message will be displayed because the password file cannot be updated as the watsonx user. Watsonx.data Connection Certificate When connecting to the watsonx.data Presto database, you will need to have the connection certificate available to the client that you are using. Usually this location is your workstation, but it could be another service like CP4D. To extract the certificate to your local file system, use the following command in a terminal window. Replace the port and regions.techzone-server.com with the SSH values found in the TechZone reservation. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Credentials notebook. There you will find links to the certificates. If you need to generate the certificate, you can use the following commands from within a local terminal session: Generate Certificate This command will generate a certificate called presto.crt . You can print the contents of the file and use that for input into CP4D dialogs that require the certificate text. rm -f presto.crt echo QUIT | openssl s_client -showcerts -connect localhost:8443 | awk '/-----BEGIN CERTIFICATE-----/ {p=1}; p; /-----END CERTIFICATE-----/ {p=0}' > presto.crt cat presto.crt Generate Java Key Store The following command will require a password for the keystore. The password can be anything you want, but it is set to watsonx.data in the Developer Edition. You must also accept the list of DNS names that are displayed in the list. The default is no! The keystore that is created is called presto-key.jks . rm -f presto-key.jks keytool -import -alias presto-cert -file ./presto.cert -keystore ./presto-key.jks","title":"Userids and Passwords"},{"location":"wxd-reference-passwords/#passwords","text":"This table lists the passwords for the services that have \"fixed\" userids and passwords. Service Userid Password Virtual Machine watsonx watsonx.data Virtual Machine root watsonx.data watsonx.data UI ibmlhadmin password Presto ibmlhadmin password Minio Generated Generated Postgres admin Generated Portainer admin watsonx.data Thrift lh-default Generated Jupyter watsonx.data Milvus ibmlhadmin password SSH Browser watsonx watsonx.data Use the following commands to get the generated userid and password for MinIO. export LH_S3_ACCESS_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_ACCESS_KEY | sed 's/.*=//') export LH_S3_SECRET_KEY=$(docker exec ibm-lh-presto printenv | grep LH_S3_SECRET_KEY | sed 's/.*=//') echo \"MinIO Userid : \" $LH_S3_ACCESS_KEY echo \"MinIO Password: \" $LH_S3_SECRET_KEY Use the following command to get the password for Postgres. export POSTGRES_PASSWORD=$(docker exec ibm-lh-postgres printenv | grep POSTGRES_PASSWORD | sed 's/.*=//') echo \"Postgres Userid : admin\" echo \"Postgres Password : \" $POSTGRES_PASSWORD You can get all passwords for the system when you are logged in by issuing the following command: cat /certs/passwords If the passwords do not appear to work, you may need to regenerate them. The following must be run as the root user. sudo su - passwords The passwords command will refresh the passwords and also display them. If this command is not run as root, an error message will be displayed because the password file cannot be updated as the watsonx user.","title":"Passwords"},{"location":"wxd-reference-passwords/#watsonxdata-connection-certificate","text":"When connecting to the watsonx.data Presto database, you will need to have the connection certificate available to the client that you are using. Usually this location is your workstation, but it could be another service like CP4D. To extract the certificate to your local file system, use the following command in a terminal window. Replace the port and regions.techzone-server.com with the SSH values found in the TechZone reservation. scp -P port watsonx@region.techzone-server.com:/certs/presto-key.jks /Users/myname/Downloads Change the target directory to a location that you can remember! You can also download the certificate by using the Jupyter Notebook link and opening the Credentials notebook. There you will find links to the certificates. If you need to generate the certificate, you can use the following commands from within a local terminal session:","title":"Watsonx.data Connection Certificate"},{"location":"wxd-reference-passwords/#generate-certificate","text":"This command will generate a certificate called presto.crt . You can print the contents of the file and use that for input into CP4D dialogs that require the certificate text. rm -f presto.crt echo QUIT | openssl s_client -showcerts -connect localhost:8443 | awk '/-----BEGIN CERTIFICATE-----/ {p=1}; p; /-----END CERTIFICATE-----/ {p=0}' > presto.crt cat presto.crt","title":"Generate Certificate"},{"location":"wxd-reference-passwords/#generate-java-key-store","text":"The following command will require a password for the keystore. The password can be anything you want, but it is set to watsonx.data in the Developer Edition. You must also accept the list of DNS names that are displayed in the list. The default is no! The keystore that is created is called presto-key.jks . rm -f presto-key.jks keytool -import -alias presto-cert -file ./presto.cert -keystore ./presto-key.jks","title":"Generate Java Key Store"},{"location":"wxd-reference-portainer/","text":"Portainer This lab system has Portainer installed. Portainer provides an administrative interface to the Docker images that are running on this system. You can use this console to check that all the containers are running and see what resources they are using. Your TechZone reservation will include the server name and port number to use when connecting to Portainer. Open your browser and navigate to: Portainer console - https://region.techzone-server.com:port Credentials: userid: admin password: watsonx.data Once you have logged in, you should select \u201cGet Started\u201d. The next screen displays the main control panel for Portainer. Select the Local server. This screen provides details on the containers, images, volumes, and networks that make up your docker installation. To view the containers that are running, select the container icon. From within this view, you can view the details of any container, including the environment settings, the current logs, and allow you to shell into the environment. For more details on Portainer, see the Portainer documentation .","title":"Portainer Console"},{"location":"wxd-reference-portainer/#portainer","text":"This lab system has Portainer installed. Portainer provides an administrative interface to the Docker images that are running on this system. You can use this console to check that all the containers are running and see what resources they are using. Your TechZone reservation will include the server name and port number to use when connecting to Portainer. Open your browser and navigate to: Portainer console - https://region.techzone-server.com:port Credentials: userid: admin password: watsonx.data Once you have logged in, you should select \u201cGet Started\u201d. The next screen displays the main control panel for Portainer. Select the Local server. This screen provides details on the containers, images, volumes, and networks that make up your docker installation. To view the containers that are running, select the container icon. From within this view, you can view the details of any container, including the environment settings, the current logs, and allow you to shell into the environment. For more details on Portainer, see the Portainer documentation .","title":"Portainer"},{"location":"wxd-reference-ports/","text":"Watsonx.data Ports The top of your TechZone reservation will contain a list of published services at the top of the details page. These URLs and Port numbers are needed to access the watsonx.data services. The list will contain the following information: SSH for watsonx userid - ssh -p 20200 watsonx@region.techzone-services.com Portainer console - https://region.techzone-services.com:44449 SSH Browser - https:/region.techzone-services.com:46241 Presto console - https://region.techzone-services.com:49618 Presto Port - Server: region.techzone-services.com Port: 49618 Jupyter Notebook - http://region.techzone-services.com:12435 Minio Endpoint - Server: region.techzone-services.com Port: 29652 Minio console - http://region.techzone-services.com:45050 Hive Thrift URL - thrift://region.techzone-services.com:22211 Watsonx UI - https://region.techzone-services.com:37997 Open Port 1 - Server: region.techzone-services.com Port: 47354 Open Port 2 - Server: region.techzone-services.com Port: 48932 Milvus Endpoint - Server: region.techzone-services.com Port: 31452 There are two additional ports which are available for use with any service you install in the system. These ports are: Open Port 1 - Server: region.techzone-services.com: Port: 47354 Open Port 2 - Server: region.techzone-services.com: Port: 48932 The server URL will be different for each region and data center that your machine is provisioned on. The server name is usually in the format: region.techzone-services.com:port The port number that is provided in the reservation is mapped to the proper port number in the server. For instance, the Presto Port number is 8443 in the server, but the reservation above shows a port number of 43943. Use the following rules for determining what server name and port number to use when connecting to the databases: If you are using a program \"inside\" the watsonx server, the host is watsonxdata or localhost . Some systems will require the watsonx service name (ibm-lh-postgres) and these are highlighted in the documentation. The port number will always be the native port (i.e. 8443 for Presto). If you are using a program \"outside\" the watsonx server, the host is the one provided in your reservation region.techzone-services.com and the port will the one that is included as part of the URL (i.e. 43943 in the example above). Watsonx.data Open Ports The following URLs and Ports are used to access the watsonx.data services. Most browsers will work with these URLs. Note : Mac OSX users should be aware that accessing the MinIO console may occasionally cause Firefox and Chrome to lock up. If you find that this occurs, try using Safari which appears to work fine. The ports that are used in the lab listed below, including their available when you first access the lab. The internal port number is always the same when running in the VMware image using the VM Remote Console. When using your workstation's browser, you will need to use the server name and port number supplied in the TechZone reservation. Service Port Active watsonx.data management console 9443 Yes Presto console 8443 Yes Jupyter Notebook 8888 Yes MinIO console (S3 buckets) 9001 Yes MinIO S3 Endpoint 9000 Yes Portainer (Docker container management) 6443 Yes Presto External Port 8443 Yes Hive metadata Port 9043 Yes Milvus 19530 Yes Open Port 1 10000 Yes Open Port 2 10001 Yes Follow these steps if you receive a certificate error in Firefox. Select Advanced. Choose \u201cAccept the Risk and Continue\u201d. If you are using Google Chrome, you can bypass the error message by typing in \u201cthisisunsafe\u201d or clicking on the \"Proceed to 192.168.252.2 (unsafe)\" link.","title":"Available Ports"},{"location":"wxd-reference-ports/#watsonxdata-ports","text":"The top of your TechZone reservation will contain a list of published services at the top of the details page. These URLs and Port numbers are needed to access the watsonx.data services. The list will contain the following information: SSH for watsonx userid - ssh -p 20200 watsonx@region.techzone-services.com Portainer console - https://region.techzone-services.com:44449 SSH Browser - https:/region.techzone-services.com:46241 Presto console - https://region.techzone-services.com:49618 Presto Port - Server: region.techzone-services.com Port: 49618 Jupyter Notebook - http://region.techzone-services.com:12435 Minio Endpoint - Server: region.techzone-services.com Port: 29652 Minio console - http://region.techzone-services.com:45050 Hive Thrift URL - thrift://region.techzone-services.com:22211 Watsonx UI - https://region.techzone-services.com:37997 Open Port 1 - Server: region.techzone-services.com Port: 47354 Open Port 2 - Server: region.techzone-services.com Port: 48932 Milvus Endpoint - Server: region.techzone-services.com Port: 31452 There are two additional ports which are available for use with any service you install in the system. These ports are: Open Port 1 - Server: region.techzone-services.com: Port: 47354 Open Port 2 - Server: region.techzone-services.com: Port: 48932 The server URL will be different for each region and data center that your machine is provisioned on. The server name is usually in the format: region.techzone-services.com:port The port number that is provided in the reservation is mapped to the proper port number in the server. For instance, the Presto Port number is 8443 in the server, but the reservation above shows a port number of 43943. Use the following rules for determining what server name and port number to use when connecting to the databases: If you are using a program \"inside\" the watsonx server, the host is watsonxdata or localhost . Some systems will require the watsonx service name (ibm-lh-postgres) and these are highlighted in the documentation. The port number will always be the native port (i.e. 8443 for Presto). If you are using a program \"outside\" the watsonx server, the host is the one provided in your reservation region.techzone-services.com and the port will the one that is included as part of the URL (i.e. 43943 in the example above).","title":"Watsonx.data Ports"},{"location":"wxd-reference-ports/#watsonxdata-open-ports","text":"The following URLs and Ports are used to access the watsonx.data services. Most browsers will work with these URLs. Note : Mac OSX users should be aware that accessing the MinIO console may occasionally cause Firefox and Chrome to lock up. If you find that this occurs, try using Safari which appears to work fine. The ports that are used in the lab listed below, including their available when you first access the lab. The internal port number is always the same when running in the VMware image using the VM Remote Console. When using your workstation's browser, you will need to use the server name and port number supplied in the TechZone reservation. Service Port Active watsonx.data management console 9443 Yes Presto console 8443 Yes Jupyter Notebook 8888 Yes MinIO console (S3 buckets) 9001 Yes MinIO S3 Endpoint 9000 Yes Portainer (Docker container management) 6443 Yes Presto External Port 8443 Yes Hive metadata Port 9043 Yes Milvus 19530 Yes Open Port 1 10000 Yes Open Port 2 10001 Yes Follow these steps if you receive a certificate error in Firefox. Select Advanced. Choose \u201cAccept the Risk and Continue\u201d. If you are using Google Chrome, you can bypass the error message by typing in \u201cthisisunsafe\u201d or clicking on the \"Proceed to 192.168.252.2 (unsafe)\" link.","title":"Watsonx.data Open Ports"},{"location":"wxd-reference-ssh/","text":"SSH Access All the commands in the lab will require you execute commands in a terminal window. Access to a terminal window can be accomplished in the three ways as described below: Use the SSH Command Locally Use SSH Browser Window Terminal window in the VM If you are unable to use ssh because of connection restrictions, the Browser Window SSH option is the easiest one to use. SSH Command Your TechZone reservation will include the server name and port number to use when connecting using ssh. The port number is referred to as port in the command below, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. You have the choice of using the VM Remote console and logging in as the watsonx user to issues commands, or using a local terminal shell (iTerm, Hyper, terminal) to run commands against the watsonx.data server. You can have multiple connections into the machine at any one time. It will be easier to cut-and-paste commands into a local terminal shell. The VM Remote Console does not support cut-and-paste operation from outside the virtual console environment. Open a terminal window and use the following syntax to connect as the watsonx userid. ssh -p port watsonx@region.techzone-server.com The port number and server name are provided as part of the TechZone reservation details. To become the root user, issue the following command. sudo su - Password for both users is watsonx.data . Web Browser Terminal An SSH service in a browser window is provided in this image. As part of the reservation, you will see a URL with the following description: SSH Browser - http://region.techzone-server.com:port When you first click on this link, the browser will display a login prompt. The userid is watsonx and the password is watsonx.data . Once you press the Sign in button, you will see a blank display. Press the browser \"refresh\" button, and you should see the login prompt. Patience! Sometimes it takes a few \"refresh\" commands to get the login prompt to display. It may take 5-6 attempts before it wakes up. Don't give up too soon! It will eventually display the login prompt. The userid is watsonx and the password is watsonx.data . You are now using a terminal session inside the watsonx.data server. Since you have logged in as the watsonx user, you must use the sudo su - command to become the root user. Note that you are not in the correct directory to run commands. You must issue the following command to be in the command directory. cd /root/ibm-lh-dev/bin Cut and Paste The Browser SSH screen supports full cut and paste operations. This makes it easy to copy scripts into this window without having to retype the commands. All the commands in the lab can now be run from within this browser rather than using the VM Remote console. If at any time you accidentally close this window, you can open another one using the SSH browser link in the reservation. Terminal Window in the VM If you use the Remote VM Console , you can log into the watsonx.data user and use a Terminal shell to run commands against the watsonx.data server. Select the Terminal application in the virtual machine to issue commands. This will open up the terminal window. At this point you are connected as the watsonx user. You can ignore any lab instructions that ask you to ssh into the watsonx server. To become the root user, you must enter the following command in the terminal window. sudo su - Now as the root user you will be ready to run the commands found in the lab. Cut and Paste The VM Remote Console does not support cut and paste operations from outside the VM environment. Cut and paste is supported inside the virtual machine, but attempting to paste something from you workstation into the VM Console will fail. Copying Files If you need to move files into or out of the virtual machine, you can use the following commands. To copy a file into the virtual machine use the following syntax: scp -P port myfile.txt watsonx@region.techzone-server.com:/tmp/myfile.txt The filename myfile.txt will be copied to the /tmp directory. The temporary directory is useful since you can copy the file to multiple places from within the Linux environment. Multiple files can be moved by using wildcard characters using the following syntax: scp -P port myfile.* watsonx@region.techzone-server.com:/tmp To move files from the image back to your local system requires you reverse the file specification. scp -P port watsonx@region.techzone-server.com:/tmp/myfile.txt /Downloads/myfile.txt You can also use wildcards to select more than one file.","title":"SSH and SCP Commands"},{"location":"wxd-reference-ssh/#ssh-access","text":"All the commands in the lab will require you execute commands in a terminal window. Access to a terminal window can be accomplished in the three ways as described below: Use the SSH Command Locally Use SSH Browser Window Terminal window in the VM If you are unable to use ssh because of connection restrictions, the Browser Window SSH option is the easiest one to use.","title":"SSH Access"},{"location":"wxd-reference-ssh/#ssh-command","text":"Your TechZone reservation will include the server name and port number to use when connecting using ssh. The port number is referred to as port in the command below, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. You have the choice of using the VM Remote console and logging in as the watsonx user to issues commands, or using a local terminal shell (iTerm, Hyper, terminal) to run commands against the watsonx.data server. You can have multiple connections into the machine at any one time. It will be easier to cut-and-paste commands into a local terminal shell. The VM Remote Console does not support cut-and-paste operation from outside the virtual console environment. Open a terminal window and use the following syntax to connect as the watsonx userid. ssh -p port watsonx@region.techzone-server.com The port number and server name are provided as part of the TechZone reservation details. To become the root user, issue the following command. sudo su - Password for both users is watsonx.data .","title":"SSH Command"},{"location":"wxd-reference-ssh/#web-browser-terminal","text":"An SSH service in a browser window is provided in this image. As part of the reservation, you will see a URL with the following description: SSH Browser - http://region.techzone-server.com:port When you first click on this link, the browser will display a login prompt. The userid is watsonx and the password is watsonx.data . Once you press the Sign in button, you will see a blank display. Press the browser \"refresh\" button, and you should see the login prompt. Patience! Sometimes it takes a few \"refresh\" commands to get the login prompt to display. It may take 5-6 attempts before it wakes up. Don't give up too soon! It will eventually display the login prompt. The userid is watsonx and the password is watsonx.data . You are now using a terminal session inside the watsonx.data server. Since you have logged in as the watsonx user, you must use the sudo su - command to become the root user. Note that you are not in the correct directory to run commands. You must issue the following command to be in the command directory. cd /root/ibm-lh-dev/bin Cut and Paste The Browser SSH screen supports full cut and paste operations. This makes it easy to copy scripts into this window without having to retype the commands. All the commands in the lab can now be run from within this browser rather than using the VM Remote console. If at any time you accidentally close this window, you can open another one using the SSH browser link in the reservation.","title":"Web Browser Terminal"},{"location":"wxd-reference-ssh/#terminal-window-in-the-vm","text":"If you use the Remote VM Console , you can log into the watsonx.data user and use a Terminal shell to run commands against the watsonx.data server. Select the Terminal application in the virtual machine to issue commands. This will open up the terminal window. At this point you are connected as the watsonx user. You can ignore any lab instructions that ask you to ssh into the watsonx server. To become the root user, you must enter the following command in the terminal window. sudo su - Now as the root user you will be ready to run the commands found in the lab. Cut and Paste The VM Remote Console does not support cut and paste operations from outside the VM environment. Cut and paste is supported inside the virtual machine, but attempting to paste something from you workstation into the VM Console will fail.","title":"Terminal Window in the VM"},{"location":"wxd-reference-ssh/#copying-files","text":"If you need to move files into or out of the virtual machine, you can use the following commands. To copy a file into the virtual machine use the following syntax: scp -P port myfile.txt watsonx@region.techzone-server.com:/tmp/myfile.txt The filename myfile.txt will be copied to the /tmp directory. The temporary directory is useful since you can copy the file to multiple places from within the Linux environment. Multiple files can be moved by using wildcard characters using the following syntax: scp -P port myfile.* watsonx@region.techzone-server.com:/tmp To move files from the image back to your local system requires you reverse the file specification. scp -P port watsonx@region.techzone-server.com:/tmp/myfile.txt /Downloads/myfile.txt You can also use wildcards to select more than one file.","title":"Copying Files"},{"location":"wxd-reference-techzone/","text":"Requesting a TechZone image Log into TechZone ( https://techzone.ibm.com ) and search for the watsonx.data Developer Base Image or use the following link. https://techzone.ibm.com/collection/ibm-watsonxdata-developer-base-image If you have not logged into the IBM Cloud site, you will be asked to authenticate with your IBM userid. If you do not have an IBM userid, you will need to register for one. This lab is open to IBMers and Business Partners. Once you have logged in, you should see the following. Select the Environment tab on the far-left side. Note : There may be more than one environment available. Choose the IBM watsonx.data Development POC R1M1 . The version number may change as newer versions of watsonx.data are released. Make sure to sure to select the POC image and not the standard Developer edition versions. Press the Reserve button. Select \u201creserve now\u201d (why wait?). For \u201cPurpose\u201d select Self Education. This will expand to request additional information. Fill in the purpose field with something meaningful (watsonx.data education). Next select preferred Geography for the image. Note: The data centers and geographies available will change over time. The current release is only available in the Americas (WDC04 data center). Choose any of the regions that are closest to your location. Note : The TechZone scheduler will pick a location in your region that has capacity to deploy your image. Previously you needed to pick a physical location (DAL10, WDC04, TOK02, etc...). The number of locations has expanded to 4 North American, 4 European and 2 AP locations which will hopefully provide more capacity to deploy the lab. If you find that your reservation is not being provisioned, check the status of the TechZone environment by referring to the TechZone status page at https://techzone.status.io . Next select the end date for the lab. Make sure you select enough time for you to use the POC! It defaults to 2 days, but you can extend the reservation! You do not need to enable VPN Access . Once you have completed the form, check the box indicating that you agree to the terms and conditions of using TechZone, and click SUBMIT on the bottom right-hand corner. At this point you will need to wait patiently for an email that acknowledges that your request has been placed into Provisioning mode. Eventually you will receive an email confirming that the system is ready to be used. Note that this can take a number of hours depending on the load on the TechZone servers. You may also get a message telling you that the system provisioning has Failed. Ignore the reason field since it is usually related to an environment failure caused by lack of resources. Check the status of TechZone first ( https://techzone.status.io ). If the systems appear to be okay, try requesting another image or using a different server location if possible. Contact TechZone support if you are having difficulties provisioning a system.","title":"Requesting an image"},{"location":"wxd-reference-techzone/#requesting-a-techzone-image","text":"Log into TechZone ( https://techzone.ibm.com ) and search for the watsonx.data Developer Base Image or use the following link. https://techzone.ibm.com/collection/ibm-watsonxdata-developer-base-image If you have not logged into the IBM Cloud site, you will be asked to authenticate with your IBM userid. If you do not have an IBM userid, you will need to register for one. This lab is open to IBMers and Business Partners. Once you have logged in, you should see the following. Select the Environment tab on the far-left side. Note : There may be more than one environment available. Choose the IBM watsonx.data Development POC R1M1 . The version number may change as newer versions of watsonx.data are released. Make sure to sure to select the POC image and not the standard Developer edition versions. Press the Reserve button. Select \u201creserve now\u201d (why wait?). For \u201cPurpose\u201d select Self Education. This will expand to request additional information. Fill in the purpose field with something meaningful (watsonx.data education). Next select preferred Geography for the image. Note: The data centers and geographies available will change over time. The current release is only available in the Americas (WDC04 data center). Choose any of the regions that are closest to your location. Note : The TechZone scheduler will pick a location in your region that has capacity to deploy your image. Previously you needed to pick a physical location (DAL10, WDC04, TOK02, etc...). The number of locations has expanded to 4 North American, 4 European and 2 AP locations which will hopefully provide more capacity to deploy the lab. If you find that your reservation is not being provisioned, check the status of the TechZone environment by referring to the TechZone status page at https://techzone.status.io . Next select the end date for the lab. Make sure you select enough time for you to use the POC! It defaults to 2 days, but you can extend the reservation! You do not need to enable VPN Access . Once you have completed the form, check the box indicating that you agree to the terms and conditions of using TechZone, and click SUBMIT on the bottom right-hand corner. At this point you will need to wait patiently for an email that acknowledges that your request has been placed into Provisioning mode. Eventually you will receive an email confirming that the system is ready to be used. Note that this can take a number of hours depending on the load on the TechZone servers. You may also get a message telling you that the system provisioning has Failed. Ignore the reason field since it is usually related to an environment failure caused by lack of resources. Check the status of TechZone first ( https://techzone.status.io ). If the systems appear to be okay, try requesting another image or using a different server location if possible. Contact TechZone support if you are having difficulties provisioning a system.","title":"Requesting a TechZone image"},{"location":"wxd-reference-vnc/","text":"Using the VM Remote Console The watsonx server that has been provisioned has no physical monitor attached to it (headless is what it is commonly referred to) and so we need to use a different technique to view the desktop of the main user or the system (watsonx). The first thing to consider is whether you need to use the VM Remote Console at all. All the services like the watsonx.data UI, MinIO, Presto, Apache Superset and Portainer, are all web-based servers which means you just need to use your own browser to access these programs. Connecting into the watsonx virtual machine can be done using the secure shell command (ssh) which provides access to all the low-level commands you might need to use like starting the Apache Superset service. Note that Apache Superset is not up and running by default, so you will need to start it before attempting to connect to it. So what's the VM Remote Console required for? One program that has been provided to view the database schemas is dBeaver, a community edition of software that provides a query interface to 100's of data sources, including the watsonx.data environment. You can only use this program using the VM Remote Console. You do have the option of installing this software on your own machine if you wish. Find your email message that contains details of your reservation. Details of what the reservations and the page containing details of the reservation can be found in the Accessing the reservation section. Once the details appear, scroll down to the bottom of the web page, and you will see the VM Remote Console button. You can access the logon screen of the virtual machine by pressing the VM Remote Console button. Clicking on this button will display the logon screen for the server. Select the watsonx user and use watsonx.data as the password. You can open this window in a separate browser window, or place it into fullscreen mode. Note that you may need to increase the size of your browser window (or change the scaling in the browser) to see all the virtual desktop. At this point you have access to the desktop of the watsonx user and can issue commands from within this environment. As mentioned previously, you do not need to use this interface to use the lab.","title":"VM Remote Console"},{"location":"wxd-reference-vnc/#using-the-vm-remote-console","text":"The watsonx server that has been provisioned has no physical monitor attached to it (headless is what it is commonly referred to) and so we need to use a different technique to view the desktop of the main user or the system (watsonx). The first thing to consider is whether you need to use the VM Remote Console at all. All the services like the watsonx.data UI, MinIO, Presto, Apache Superset and Portainer, are all web-based servers which means you just need to use your own browser to access these programs. Connecting into the watsonx virtual machine can be done using the secure shell command (ssh) which provides access to all the low-level commands you might need to use like starting the Apache Superset service. Note that Apache Superset is not up and running by default, so you will need to start it before attempting to connect to it. So what's the VM Remote Console required for? One program that has been provided to view the database schemas is dBeaver, a community edition of software that provides a query interface to 100's of data sources, including the watsonx.data environment. You can only use this program using the VM Remote Console. You do have the option of installing this software on your own machine if you wish. Find your email message that contains details of your reservation. Details of what the reservations and the page containing details of the reservation can be found in the Accessing the reservation section. Once the details appear, scroll down to the bottom of the web page, and you will see the VM Remote Console button. You can access the logon screen of the virtual machine by pressing the VM Remote Console button. Clicking on this button will display the logon screen for the server. Select the watsonx user and use watsonx.data as the password. You can open this window in a separate browser window, or place it into fullscreen mode. Note that you may need to increase the size of your browser window (or change the scaling in the browser) to see all the virtual desktop. At this point you have access to the desktop of the watsonx user and can issue commands from within this environment. As mentioned previously, you do not need to use this interface to use the lab.","title":"Using the VM Remote Console"},{"location":"wxd-revisions/","text":"Revisions January 16, 2024 Initial publication.","title":"Revisions"},{"location":"wxd-revisions/#revisions","text":"","title":"Revisions"},{"location":"wxd-revisions/#january-16-2024","text":"Initial publication.","title":"January 16, 2024"},{"location":"wxd-startwatsonx/","text":"Lab Instructions URL Conventions Your TechZone reservation contains a number of URLs for the services provided in the watsonx.data server. The URL will contain the name of the server and the corresponding port number for the service. Throughout the documentation, the server name will be referred to as region.techzone-server.com and port number is referred to as port . Where you see these URLS, replace them with the values found in your reservation. Commands Throughout the labs, any command that needs to be executed will be highlighted in a grey box: cd /root/ibm-lh-dev/bin A copy icon is usually found on the far right-hand side of the command box. Use this to copy the text and paste it into your command window. You can also select the text and copy it that way. Note that some commands may span multiple lines, so make sure you copy everything in the box. System Check Your TechZone reservation will include the server name and port number to use when connecting using ssh. The port number is referred to as port in the command below, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Make sure that you have an open terminal session and use the following command to connect to the watsonx.data server. ssh -p port watsonx@region.techzone-server.com Password is watsonx.data . Next switch to the root userid. sudo su - Switch to the development code bin directory. cd /root/ibm-lh-dev/bin Once you have switched to the development directory, you can start running watsonx.data commands. You can check the status with the following command. ./status.sh --all Output will look similar to: using /root/ibm-lh-dev/localstorage/volumes as data root directory for user: root/1001 infra config location is /root/ibm-lh-dev/localstorage/volumes/infra lhconsole-ui running 0.0.0.0:9443->8443/tcp, :::9443->8443/tcp lhconsole-nodeclient-svc running 3001/tcp lhconsole-javaapi-svc running 8090/tcp lhconsole-api running 3333/tcp, 8081/tcp ibm-lh-presto running 0.0.0.0:8443->8443/tcp, :::8443->8443/tcp ibm-lh-hive-metastore running ibm-lh-postgres running 5432/tcp ibm-lh-minio running To confirm that the software is working, run the following commands to validate the installation. Presto Engine Test Check the Presto engine by connecting to a schema. First, we need to make sure that the Presto engine has completed all startup tasks. The following command is not part of watsonx.data, but has been included to simplify checking the status of the Presto service. check_presto Waiting for Presto to start. ........................... Ready Note : If the starting message may take up to 5 minutes when the system first initializes. Once the command returns \"Ready\" you can connect to the presto CLI. ./presto-cli --catalog tpch --schema tiny Check the record count of the customer table. Note : If the Presto engine has not yet started (you didn't run the check_presto script), the next command may result in a useless Java error message. You may need to wait for a minute for attempting to run the statement again. select * from customer limit 10; All Presto commands end with a semi-colon. The result set should include the a number of rows (the results will be random). custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+---------------------------------------+-----------+-----------------+---------+------------+------------------------------------------------------------------------------------------------------------------- 1 | Customer#000000001 | IVhzIApeRb ot,c,E | 15 | 25-989-741-2988 | 711.56 | BUILDING | to the even, regular platelets. regular, ironic epitaphs nag e 2 | Customer#000000002 | XSTf4,NCwDVaWNe6tEgvwfmRchLXak | 13 | 23-768-687-3665 | 121.65 | AUTOMOBILE | l accounts. blithely ironic theodolites integrate boldly: caref 3 | Customer#000000003 | MG9kdTD2WBHm | 1 | 11-719-748-3364 | 7498.12 | AUTOMOBILE | deposits eat slyly ironic, even instructions. express foxes detect slyly. blithely even accounts abov 4 | Customer#000000004 | XxVSJsLAGtn | 4 | 14-128-190-5944 | 2866.83 | MACHINERY | requests. final, regular ideas sleep final accou 5 | Customer#000000005 | KvpyuHCplrB84WgAiGV6sYpZq7Tj | 3 | 13-750-942-6364 | 794.47 | HOUSEHOLD | n accounts will have to unwind. foxes cajole accor 6 | Customer#000000006 | sKZz0CsnMD7mp4Xd0YrBvx,LREYKUWAh yVn | 20 | 30-114-968-4951 | 7638.57 | AUTOMOBILE | tions. even deposits boost according to the slyly bold packages. final accounts cajole requests. furious 7 | Customer#000000007 | TcGe5gaZNgVePxU5kRrvXBfkasDTea | 18 | 28-190-982-9759 | 9561.95 | AUTOMOBILE | ainst the ironic, express theodolites. express, even pinto beans among the exp 8 | Customer#000000008 | I0B10bB0AymmC, 0PrRYBCP1yGJ8xcBPmWhl5 | 17 | 27-147-574-9335 | 6819.74 | BUILDING | among the slyly regular theodolites kindle blithely courts. carefully even theodolites haggle slyly along the ide 9 | Customer#000000009 | xKiAFTjUsCuxfeleNqefumTrjS | 8 | 18-338-906-3675 | 8324.07 | FURNITURE | r theodolites according to the requests wake thinly excuses: pending requests haggle furiousl 10 | Customer#000000010 | 6LrEaV6KR6PLVcgl2ArL Q3rqzLzcT1 v2 | 5 | 15-741-346-9870 | 2753.54 | HOUSEHOLD | es regular deposits haggle. fur (10 rows) The output on your screen will look similar to the following: The arrows on the far right side indicate that there is more output to view. Press the right and left arrows on your keyboard to scroll the display. If the result set is small, all of the results will display on the screen and no scrolling will be available unless the results are wider than the screen size. When thje display shows (END) you have reached the bottom of the output. If the display shows a colon ( : ) at the bottom of the screen, you can use the up and down arrow keys to scroll a record at a time, or the Page Up and Page Down keys to scroll a page at a time. To quit viewing the output, press the Q key. Quit the Presto CLI. The Presto quit command can be used with or without a semicolon. quit; Congratulations, your system is now up and running!","title":"Lab Instructions"},{"location":"wxd-startwatsonx/#lab-instructions","text":"","title":"Lab Instructions"},{"location":"wxd-startwatsonx/#url-conventions","text":"Your TechZone reservation contains a number of URLs for the services provided in the watsonx.data server. The URL will contain the name of the server and the corresponding port number for the service. Throughout the documentation, the server name will be referred to as region.techzone-server.com and port number is referred to as port . Where you see these URLS, replace them with the values found in your reservation.","title":"URL Conventions"},{"location":"wxd-startwatsonx/#commands","text":"Throughout the labs, any command that needs to be executed will be highlighted in a grey box: cd /root/ibm-lh-dev/bin A copy icon is usually found on the far right-hand side of the command box. Use this to copy the text and paste it into your command window. You can also select the text and copy it that way. Note that some commands may span multiple lines, so make sure you copy everything in the box.","title":"Commands"},{"location":"wxd-startwatsonx/#system-check","text":"Your TechZone reservation will include the server name and port number to use when connecting using ssh. The port number is referred to as port in the command below, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Make sure that you have an open terminal session and use the following command to connect to the watsonx.data server. ssh -p port watsonx@region.techzone-server.com Password is watsonx.data . Next switch to the root userid. sudo su - Switch to the development code bin directory. cd /root/ibm-lh-dev/bin Once you have switched to the development directory, you can start running watsonx.data commands. You can check the status with the following command. ./status.sh --all Output will look similar to: using /root/ibm-lh-dev/localstorage/volumes as data root directory for user: root/1001 infra config location is /root/ibm-lh-dev/localstorage/volumes/infra lhconsole-ui running 0.0.0.0:9443->8443/tcp, :::9443->8443/tcp lhconsole-nodeclient-svc running 3001/tcp lhconsole-javaapi-svc running 8090/tcp lhconsole-api running 3333/tcp, 8081/tcp ibm-lh-presto running 0.0.0.0:8443->8443/tcp, :::8443->8443/tcp ibm-lh-hive-metastore running ibm-lh-postgres running 5432/tcp ibm-lh-minio running To confirm that the software is working, run the following commands to validate the installation.","title":"System Check"},{"location":"wxd-startwatsonx/#presto-engine-test","text":"Check the Presto engine by connecting to a schema. First, we need to make sure that the Presto engine has completed all startup tasks. The following command is not part of watsonx.data, but has been included to simplify checking the status of the Presto service. check_presto Waiting for Presto to start. ........................... Ready Note : If the starting message may take up to 5 minutes when the system first initializes. Once the command returns \"Ready\" you can connect to the presto CLI. ./presto-cli --catalog tpch --schema tiny Check the record count of the customer table. Note : If the Presto engine has not yet started (you didn't run the check_presto script), the next command may result in a useless Java error message. You may need to wait for a minute for attempting to run the statement again. select * from customer limit 10; All Presto commands end with a semi-colon. The result set should include the a number of rows (the results will be random). custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------------------+---------------------------------------+-----------+-----------------+---------+------------+------------------------------------------------------------------------------------------------------------------- 1 | Customer#000000001 | IVhzIApeRb ot,c,E | 15 | 25-989-741-2988 | 711.56 | BUILDING | to the even, regular platelets. regular, ironic epitaphs nag e 2 | Customer#000000002 | XSTf4,NCwDVaWNe6tEgvwfmRchLXak | 13 | 23-768-687-3665 | 121.65 | AUTOMOBILE | l accounts. blithely ironic theodolites integrate boldly: caref 3 | Customer#000000003 | MG9kdTD2WBHm | 1 | 11-719-748-3364 | 7498.12 | AUTOMOBILE | deposits eat slyly ironic, even instructions. express foxes detect slyly. blithely even accounts abov 4 | Customer#000000004 | XxVSJsLAGtn | 4 | 14-128-190-5944 | 2866.83 | MACHINERY | requests. final, regular ideas sleep final accou 5 | Customer#000000005 | KvpyuHCplrB84WgAiGV6sYpZq7Tj | 3 | 13-750-942-6364 | 794.47 | HOUSEHOLD | n accounts will have to unwind. foxes cajole accor 6 | Customer#000000006 | sKZz0CsnMD7mp4Xd0YrBvx,LREYKUWAh yVn | 20 | 30-114-968-4951 | 7638.57 | AUTOMOBILE | tions. even deposits boost according to the slyly bold packages. final accounts cajole requests. furious 7 | Customer#000000007 | TcGe5gaZNgVePxU5kRrvXBfkasDTea | 18 | 28-190-982-9759 | 9561.95 | AUTOMOBILE | ainst the ironic, express theodolites. express, even pinto beans among the exp 8 | Customer#000000008 | I0B10bB0AymmC, 0PrRYBCP1yGJ8xcBPmWhl5 | 17 | 27-147-574-9335 | 6819.74 | BUILDING | among the slyly regular theodolites kindle blithely courts. carefully even theodolites haggle slyly along the ide 9 | Customer#000000009 | xKiAFTjUsCuxfeleNqefumTrjS | 8 | 18-338-906-3675 | 8324.07 | FURNITURE | r theodolites according to the requests wake thinly excuses: pending requests haggle furiousl 10 | Customer#000000010 | 6LrEaV6KR6PLVcgl2ArL Q3rqzLzcT1 v2 | 5 | 15-741-346-9870 | 2753.54 | HOUSEHOLD | es regular deposits haggle. fur (10 rows) The output on your screen will look similar to the following: The arrows on the far right side indicate that there is more output to view. Press the right and left arrows on your keyboard to scroll the display. If the result set is small, all of the results will display on the screen and no scrolling will be available unless the results are wider than the screen size. When thje display shows (END) you have reached the bottom of the output. If the display shows a colon ( : ) at the bottom of the screen, you can use the up and down arrow keys to scroll a record at a time, or the Page Up and Page Down keys to scroll a page at a time. To quit viewing the output, press the Q key. Quit the Presto CLI. The Presto quit command can be used with or without a semicolon. quit; Congratulations, your system is now up and running!","title":"Presto Engine Test"},{"location":"wxd-superset/","text":"Reporting/Dashboarding using Apache Superset Apache Superset is not a part of watsonx.data and is only used to demonstrate the capability to connect to watsonx.data from other BI/Reporting tools. You will need to install Apache Superset as part of this lab. The Superset repository needs to be in sync with the image being downloaded, so these libraries cannot be preloaded into this development image. Open a terminal window and connect via SSH as the watsonx user. Do not connect as the root user. Clone the Apache Superset repository with the git command. This command typically takes less than 1 minute to download the code. git clone https://github.com/apache/superset.git The docker-compose-non-dev.yml file needs to be updated so that Apache Superset can access the same network that watsonx.data is using. cd ./superset cp docker-compose-non-dev.yml docker-compose-non-dev-backup.yml sed '/version: \"3.7\"/q' docker-compose-non-dev.yml > yamlfix.txt cat <<EOF >> yamlfix.txt networks: default: external: True name: ibm-lh-network EOF sed -e '1,/version: \"3.7\"/ d' docker-compose-non-dev.yml >> yamlfix.txt We update the Apache Superset code to version 2.1.0 . sed 's/\\${TAG:-latest-dev}/2.1.0/' yamlfix.txt > docker-compose-non-dev.yml Use docker-compose to start Apache Superset. docker compose -f docker-compose-non-dev.yml up The docker compose command will download the necessary code for Apache Superset and start the service. The terminal session will contain the logging information for the service. The process is running in the foreground so you will see all the messages being produced by the program. If you want to stop the service at any time you will need to press CTRL-C. If you close this terminal window at any time, the process will stop. When you see \"Init Step 4/4\", the service is ready for connections. If you have already installed Apache Superset and you stopped it, there is no need to reinstall the program. Go back to the /home/watsonx/superset directory and run the docker compose program again: Once the service is running, open your browser and navigate to the URL and port that were provided in your TechZone reservation. The credentials for Apache Superset are userid admin , Password admin . \u2003 Setup a Database Connection to watsonx.data Open another terminal window for this next step. Once Apache Superset has started loading examples, you can issue the following command as watsonx or root . docker cp /certs/lh-ssl-ts.crt superset_app:/tmp/lh-ssl-ts.crt In the Apache Superset console, press the Settings button on the far right and select Database connections. Then select the [+ DATABASE] option on the far-right side of the panel. \u2003 A connection dialog will display. Select Presto as the database connection type. In the SQLALCHEMY URI field, enter the following information to connect to the hive_data catalog which contains the GOSALES, ONTIME, and TAXI data. presto://ibmlhadmin:password@ibm-lh-presto-svc:8443/hive_data Enter the following information to connect to the iceberg_data catalog which will contain any tables you created when running the examples in the lab. presto://ibmlhadmin:password@ibm-lh-presto-svc:8443/iceberg_data Select the Advanced tab. Copy the following information into the security box. {\"connect_args\":{\"protocol\":\"https\",\"requests_kwargs\":{\"verify\":\"/tmp/lh-ssl-ts.crt\"}}} Press the Connect button to create the connection. Create reports/charts/dashboards Once the connection has been tested and created for watsonx.data, we can click on Dataset and create a new dataset based on the customer table in the tiny schema. Reports/dashboards can then be created using the very intuitive Superset interface. Note : The Apache Superset team removes, inserts and updates charts on a frequent basis with no advance notification. The example you see below may not be exactly the same when you run the code. This is not something that we can control in the demonstration environment. Select Datasets at the top of the Apache Superset window. Press [+ DATASET]. In the Database field, select Presto. The schemas will take a few seconds to load. Select the workshop schema. Select customer from the list. The display will show the columns associated with this table. On the bottom right-hand corner is a button named CREATE DATASET AND CREATE CHART. Press that to display the following panel. To create a simple Bar Chart, we start by selecting the Bar Chart icon. If you click it once it displays information about the chart type. If you double-click it, the chart builder screen will display. Click on the mktsegment field and drag it into the DIMENSIONS field. Then drag the acctbal field into the METRICS field. The program will ask how the field is to be computed. Select AVG from the list and SAVE. Now press the CREATE CHART button found at the bottom of the screen. Try to create different charts/dashboards if you have time. Note : When you are finished using Apache Superset, press CTRL-C (Control-C) in the terminal window that you used to start it. This will stop the program and release the resources it is using. If you press CTRL-C twice, it immediately kills the program, but it may lose some of the work that you may have done.","title":"Reporting/Dashboarding using Apache Superset"},{"location":"wxd-superset/#reportingdashboarding-using-apache-superset","text":"Apache Superset is not a part of watsonx.data and is only used to demonstrate the capability to connect to watsonx.data from other BI/Reporting tools. You will need to install Apache Superset as part of this lab. The Superset repository needs to be in sync with the image being downloaded, so these libraries cannot be preloaded into this development image. Open a terminal window and connect via SSH as the watsonx user. Do not connect as the root user. Clone the Apache Superset repository with the git command. This command typically takes less than 1 minute to download the code. git clone https://github.com/apache/superset.git The docker-compose-non-dev.yml file needs to be updated so that Apache Superset can access the same network that watsonx.data is using. cd ./superset cp docker-compose-non-dev.yml docker-compose-non-dev-backup.yml sed '/version: \"3.7\"/q' docker-compose-non-dev.yml > yamlfix.txt cat <<EOF >> yamlfix.txt networks: default: external: True name: ibm-lh-network EOF sed -e '1,/version: \"3.7\"/ d' docker-compose-non-dev.yml >> yamlfix.txt We update the Apache Superset code to version 2.1.0 . sed 's/\\${TAG:-latest-dev}/2.1.0/' yamlfix.txt > docker-compose-non-dev.yml Use docker-compose to start Apache Superset. docker compose -f docker-compose-non-dev.yml up The docker compose command will download the necessary code for Apache Superset and start the service. The terminal session will contain the logging information for the service. The process is running in the foreground so you will see all the messages being produced by the program. If you want to stop the service at any time you will need to press CTRL-C. If you close this terminal window at any time, the process will stop. When you see \"Init Step 4/4\", the service is ready for connections. If you have already installed Apache Superset and you stopped it, there is no need to reinstall the program. Go back to the /home/watsonx/superset directory and run the docker compose program again: Once the service is running, open your browser and navigate to the URL and port that were provided in your TechZone reservation. The credentials for Apache Superset are userid admin , Password admin .","title":"Reporting/Dashboarding using Apache Superset"},{"location":"wxd-superset/#setup-a-database-connection-to-watsonxdata","text":"Open another terminal window for this next step. Once Apache Superset has started loading examples, you can issue the following command as watsonx or root . docker cp /certs/lh-ssl-ts.crt superset_app:/tmp/lh-ssl-ts.crt In the Apache Superset console, press the Settings button on the far right and select Database connections. Then select the [+ DATABASE] option on the far-right side of the panel. \u2003 A connection dialog will display. Select Presto as the database connection type. In the SQLALCHEMY URI field, enter the following information to connect to the hive_data catalog which contains the GOSALES, ONTIME, and TAXI data. presto://ibmlhadmin:password@ibm-lh-presto-svc:8443/hive_data Enter the following information to connect to the iceberg_data catalog which will contain any tables you created when running the examples in the lab. presto://ibmlhadmin:password@ibm-lh-presto-svc:8443/iceberg_data Select the Advanced tab. Copy the following information into the security box. {\"connect_args\":{\"protocol\":\"https\",\"requests_kwargs\":{\"verify\":\"/tmp/lh-ssl-ts.crt\"}}} Press the Connect button to create the connection.","title":"Setup a Database Connection to watsonx.data"},{"location":"wxd-superset/#create-reportschartsdashboards","text":"Once the connection has been tested and created for watsonx.data, we can click on Dataset and create a new dataset based on the customer table in the tiny schema. Reports/dashboards can then be created using the very intuitive Superset interface. Note : The Apache Superset team removes, inserts and updates charts on a frequent basis with no advance notification. The example you see below may not be exactly the same when you run the code. This is not something that we can control in the demonstration environment. Select Datasets at the top of the Apache Superset window. Press [+ DATASET]. In the Database field, select Presto. The schemas will take a few seconds to load. Select the workshop schema. Select customer from the list. The display will show the columns associated with this table. On the bottom right-hand corner is a button named CREATE DATASET AND CREATE CHART. Press that to display the following panel. To create a simple Bar Chart, we start by selecting the Bar Chart icon. If you click it once it displays information about the chart type. If you double-click it, the chart builder screen will display. Click on the mktsegment field and drag it into the DIMENSIONS field. Then drag the acctbal field into the METRICS field. The program will ask how the field is to be computed. Select AVG from the list and SAVE. Now press the CREATE CHART button found at the bottom of the screen. Try to create different charts/dashboards if you have time. Note : When you are finished using Apache Superset, press CTRL-C (Control-C) in the terminal window that you used to start it. This will stop the program and release the resources it is using. If you press CTRL-C twice, it immediately kills the program, but it may lose some of the work that you may have done.","title":"Create reports/charts/dashboards"},{"location":"wxd-systemconnector/","text":"Using Presto System Connector The Presto System connector provides information and metrics about the currently running Presto cluster. You can use this function to monitor the workloads on the Presto cluster using normal SQL queries. Make sure you are the root user and in the proper development directory. cd /root/ibm-lh-dev/bin Start the Presto CLI. ./presto-cli What queries are currently running? select * from \"system\".runtime.queries limit 5; query_id | state | user | source | query | resource_group_id | queued_time_ms | analysis_time_ms | created | started | last_heartbeat | end -----------------------------+----------+------------+------------------+-------------------------------------------------------------+-------------------+----------------+------------------+-------------------------+-------------------------+-------------------------+------------------------- 20230626_182942_00007_4suid | FINISHED | ibmlhadmin | presto-cli | show tables | [global] | 0 | 33 | 2023-06-26 18:29:40.628 | 2023-06-26 18:29:40.817 | 2023-06-26 18:29:41.095 | 2023-06-26 18:29:41.118 20230626_182938_00005_4suid | FINISHED | ibmlhadmin | presto-cli | SHOW FUNCTIONS | [global] | 1 | 607 | 2023-06-26 18:29:36.718 | 2023-06-26 18:29:36.777 | 2023-06-26 18:29:37.707 | 2023-06-26 18:29:37.742 20230626_192655_00031_4suid | FINISHED | ibmlhadmin | presto-cli | show schemas | [global] | 1 | 257 | 2023-06-26 19:26:53.739 | 2023-06-26 19:26:54.043 | 2023-06-26 19:26:54.845 | 2023-06-26 19:26:54.866 20230626_183851_00018_4suid | FINISHED | ibmlhadmin | nodejs-client | select * from system.runtime.queries order by query_id desc | [global] | 1 | 27 | 2023-06-26 18:38:49.169 | 2023-06-26 18:38:49.293 | 2023-06-26 18:38:50.084 | 2023-06-26 18:38:50.121 20230626_185405_00021_4suid | FINISHED | ibmlhadmin | presto-go-client | SHOW TABLES | [global] | 0 | 56 | 2023-06-26 18:54:03.542 | 2023-06-26 18:54:03.729 | 2023-06-26 18:54:04.042 | 2023-06-26 18:54:04.041 (5 rows) What tasks make up a query and where is the task running? select * from \"system\".runtime.tasks limit 5; node_id | task_id | stage_execution_id | stage_id | query_id | state | splits | queued_splits | running_splits | completed_splits | split_scheduled_time_ms | split_cpu_time_ms | split_blocked_time_ms | raw_input_bytes | raw_input_rows | processed_input_bytes | processed_input_rows | output_bytes | output_rows | physical_written_bytes | created | start | last_heartbeat | endffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194106_00035_4suid.1.0.0 | 20230626_194106_00035_4suid.1.0 | 20230626_194106_00035_4suid.1 | 20230626_194106_00035_4suid | FINISHED | 1 | 0 | 0 | 1 | 14 | 2 | 0 | 5965 | 36 | 5965 | 36 | 7269 | 36 | 0 | 2023-06-26 19:41:04.606 | 2023-06-26 19:41:04.618 | 2023-06-26 19:41:04.639 | 2023-06-26 19:41:04.665 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194309_00038_4suid.1.0.0 | 20230626_194309_00038_4suid.1.0 | 20230626_194309_00038_4suid.1 | 20230626_194309_00038_4suid | FINISHED | 1 | 0 | 0 | 1 | 15 | 2 | 0 | 6125 | 37 | 6125 | 37 | 866 | 5 | 0 | 2023-06-26 19:43:07.346 | 2023-06-26 19:43:07.357 | 2023-06-26 19:43:07.385 | 2023-06-26 19:43:07.398 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194106_00035_4suid.0.0.0 | 20230626_194106_00035_4suid.0.0 | 20230626_194106_00035_4suid.0 | 20230626_194106_00035_4suid | FINISHED | 16 | 0 | 0 | 16 | 60 | 1 | 440 | 7096 | 36 | 7269 | 36 | 7269 | 36 | 0 | 2023-06-26 19:41:04.611 | 2023-06-26 19:41:04.626 | 2023-06-26 19:41:04.634 | 2023-06-26 19:41:04.682 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194309_00038_4suid.0.0.0 | 20230626_194309_00038_4suid.0.0 | 20230626_194309_00038_4suid.0 | 20230626_194309_00038_4suid | FINISHED | 17 | 0 | 0 | 17 | 108 | 2 | 189 | 1100 | 5 | 866 | 5 | 866 | 5 | 0 | 2023-06-26 19:43:07.356 | 2023-06-26 19:43:07.380 | 2023-06-26 19:43:07.380 | 2023-06-26 19:43:07.419 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194431_00039_4suid.1.0.0 | 20230626_194431_00039_4suid.1.0 | 20230626_194431_00039_4suid.1 | 20230626_194431_00039_4suid | RUNNING | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2023-06-26 19:44:29.346 | 2023-06-26 19:44:29.352 | 2023-06-26 19:44:29.353 | NULL (5 rows) Quit Presto. quit;","title":"System Connector"},{"location":"wxd-systemconnector/#using-presto-system-connector","text":"The Presto System connector provides information and metrics about the currently running Presto cluster. You can use this function to monitor the workloads on the Presto cluster using normal SQL queries. Make sure you are the root user and in the proper development directory. cd /root/ibm-lh-dev/bin Start the Presto CLI. ./presto-cli What queries are currently running? select * from \"system\".runtime.queries limit 5; query_id | state | user | source | query | resource_group_id | queued_time_ms | analysis_time_ms | created | started | last_heartbeat | end -----------------------------+----------+------------+------------------+-------------------------------------------------------------+-------------------+----------------+------------------+-------------------------+-------------------------+-------------------------+------------------------- 20230626_182942_00007_4suid | FINISHED | ibmlhadmin | presto-cli | show tables | [global] | 0 | 33 | 2023-06-26 18:29:40.628 | 2023-06-26 18:29:40.817 | 2023-06-26 18:29:41.095 | 2023-06-26 18:29:41.118 20230626_182938_00005_4suid | FINISHED | ibmlhadmin | presto-cli | SHOW FUNCTIONS | [global] | 1 | 607 | 2023-06-26 18:29:36.718 | 2023-06-26 18:29:36.777 | 2023-06-26 18:29:37.707 | 2023-06-26 18:29:37.742 20230626_192655_00031_4suid | FINISHED | ibmlhadmin | presto-cli | show schemas | [global] | 1 | 257 | 2023-06-26 19:26:53.739 | 2023-06-26 19:26:54.043 | 2023-06-26 19:26:54.845 | 2023-06-26 19:26:54.866 20230626_183851_00018_4suid | FINISHED | ibmlhadmin | nodejs-client | select * from system.runtime.queries order by query_id desc | [global] | 1 | 27 | 2023-06-26 18:38:49.169 | 2023-06-26 18:38:49.293 | 2023-06-26 18:38:50.084 | 2023-06-26 18:38:50.121 20230626_185405_00021_4suid | FINISHED | ibmlhadmin | presto-go-client | SHOW TABLES | [global] | 0 | 56 | 2023-06-26 18:54:03.542 | 2023-06-26 18:54:03.729 | 2023-06-26 18:54:04.042 | 2023-06-26 18:54:04.041 (5 rows) What tasks make up a query and where is the task running? select * from \"system\".runtime.tasks limit 5; node_id | task_id | stage_execution_id | stage_id | query_id | state | splits | queued_splits | running_splits | completed_splits | split_scheduled_time_ms | split_cpu_time_ms | split_blocked_time_ms | raw_input_bytes | raw_input_rows | processed_input_bytes | processed_input_rows | output_bytes | output_rows | physical_written_bytes | created | start | last_heartbeat | endffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194106_00035_4suid.1.0.0 | 20230626_194106_00035_4suid.1.0 | 20230626_194106_00035_4suid.1 | 20230626_194106_00035_4suid | FINISHED | 1 | 0 | 0 | 1 | 14 | 2 | 0 | 5965 | 36 | 5965 | 36 | 7269 | 36 | 0 | 2023-06-26 19:41:04.606 | 2023-06-26 19:41:04.618 | 2023-06-26 19:41:04.639 | 2023-06-26 19:41:04.665 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194309_00038_4suid.1.0.0 | 20230626_194309_00038_4suid.1.0 | 20230626_194309_00038_4suid.1 | 20230626_194309_00038_4suid | FINISHED | 1 | 0 | 0 | 1 | 15 | 2 | 0 | 6125 | 37 | 6125 | 37 | 866 | 5 | 0 | 2023-06-26 19:43:07.346 | 2023-06-26 19:43:07.357 | 2023-06-26 19:43:07.385 | 2023-06-26 19:43:07.398 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194106_00035_4suid.0.0.0 | 20230626_194106_00035_4suid.0.0 | 20230626_194106_00035_4suid.0 | 20230626_194106_00035_4suid | FINISHED | 16 | 0 | 0 | 16 | 60 | 1 | 440 | 7096 | 36 | 7269 | 36 | 7269 | 36 | 0 | 2023-06-26 19:41:04.611 | 2023-06-26 19:41:04.626 | 2023-06-26 19:41:04.634 | 2023-06-26 19:41:04.682 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194309_00038_4suid.0.0.0 | 20230626_194309_00038_4suid.0.0 | 20230626_194309_00038_4suid.0 | 20230626_194309_00038_4suid | FINISHED | 17 | 0 | 0 | 17 | 108 | 2 | 189 | 1100 | 5 | 866 | 5 | 866 | 5 | 0 | 2023-06-26 19:43:07.356 | 2023-06-26 19:43:07.380 | 2023-06-26 19:43:07.380 | 2023-06-26 19:43:07.419 17ffe5e1-affe-4339-b618-0f60723cabf4 | 20230626_194431_00039_4suid.1.0.0 | 20230626_194431_00039_4suid.1.0 | 20230626_194431_00039_4suid.1 | 20230626_194431_00039_4suid | RUNNING | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2023-06-26 19:44:29.346 | 2023-06-26 19:44:29.352 | 2023-06-26 19:44:29.353 | NULL (5 rows) Quit Presto. quit;","title":"Using Presto System Connector"},{"location":"wxd-timetravel/","text":"Time Travel Time travel allows you change the view of the data to a previous time. This is not the same as an AS OF query commonly used in SQL. The data is rolled back to a prior time. Let us look at the snapshots available for the customer table in the workshop schema. We currently have just 1 snapshot. First make sure you are in the proper directory. cd /root/ibm-lh-dev/bin Connect to Presto using the workshop schema. ./presto-cli --catalog iceberg_data --schema workshop Check current snapshots \u2013 STARTING STATE. SELECT * FROM iceberg_data.workshop.\"customer$snapshots\" ORDER BY committed_at; committed_at | snapshot_id | parent_id | operation | manifest_list | summary -----------------------------+---------------------+-----------+-----------+------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 2023-06-05 18:30:12.994 UTC | 6243511110201494487 | NULL | append | s3a://iceberg-bucket/customer/metadata/snap-6243511110201494487-1-b5ab84dc-671a-426a-a734-940baa49a11f.avro | {changed-partition-count=1, added-data-files=1, total-equality-deletes=0, added-records=1500, total-position-deletes=0, added-files-size=75240, total-delete-files=0, total-files-size=75240, total-records=1500, total-data-files=1} (1 row) Capture the first snapshot ID returned by the SQL statement. You will need this value when you run the rollback command. SELECT snapshot_id FROM iceberg_data.workshop.\"customer$snapshots\" ORDER BY committed_at; snapshot_id --------------------- 6243511110201494487 (1 row) Remember that number that was returned with the query above. Insert the following record to change the customer table in the workshop schema. insert into customer values(1501,'Deepak','IBM SVL',16,'123-212-3455', 123,'AUTOMOBILE','Testing snapshots'); \u2003 Let us look at the snapshots available for the customer table in the workshop schema. You should have 2 snapshots. SELECT * FROM iceberg_data.workshop.\"customer$snapshots\" ORDER BY committed_at; committed_at | snapshot_id | parent_id | operation | manifest_list | summary -----------------------------+---------------------+---------------------+-----------+------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 2023-06-05 18:30:12.994 UTC | 6243511110201494487 | NULL | append | s3a://iceberg-bucket/customer/metadata/snap-6243511110201494487-1-b5ab84dc-671a-426a-a734-940baa49a11f.avro | {changed-partition-count=1, added-data-files=1, total-equality-deletes=0, added-records=1500, total-position-deletes=0, added-files-size=75240, total-delete-files=0, total-files-size=75240, total-records=1500, total-data-files=1} 2023-06-05 18:52:49.193 UTC | 7110570704088319509 | 6243511110201494487 | append | s3a://iceberg-bucket/customer/metadata/snap-7110570704088319509-1-ef26bcf1-c122-4ea4-86b7-ba26369be374.avro | {changed-partition-count=1, added-data-files=1, total-equality-deletes=0, added-records=1, total-position-deletes=0, added-files-size=1268, total-delete-files=0, total-files-size=76508, total-records=1501, total-data-files=2} (2 rows) Querying the customer table in the workshop schema, we can see the record inserted with name='Deepak'. select * from customer where name='Deepak'; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------+---------+-----------+--------------+---------+------------+------------------- 1501 | Deepak | IBM SVL | 16 | 123-212-3455 | 123.0 | AUTOMOBILE | Testing snapshots (1 row) We realize that we don't want the recent updates or just want to see what the data was at any point in time to respond to regulatory requirements. We will leverage the out-of-box system function rollback_to_snapshot to rollback to an older snapshot. The syntax for this function is: CALL iceberg_data.system.rollback_to_snapshot('workshop','customer',x); The \"x\" would get replaced with the snapshot_id number that was found in the earlier query. It will be different on your system than the examples above. Copy the next code segment into Presto. CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', You will see output similar to the following: CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', -> At this point you will need to copy and paste your snapshot_id into the Presto command line and press return or enter. You will see following: CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', -> 7230522396120575591 7230522396120575591 Now you will need to terminate the command with a ); to see the final result. ); CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', -> 7230522396120575591 7230522396120575591 -> ); ); CALL Querying the customer table in the workshop schema, we cannot see the record inserted with name='Deepak'. select * from customer where name='Deepak'; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------+---------+-----------+--------------+---------+------------+------------------- (0 rows) Quit Presto. quit;","title":"Time Travel"},{"location":"wxd-timetravel/#time-travel","text":"Time travel allows you change the view of the data to a previous time. This is not the same as an AS OF query commonly used in SQL. The data is rolled back to a prior time. Let us look at the snapshots available for the customer table in the workshop schema. We currently have just 1 snapshot. First make sure you are in the proper directory. cd /root/ibm-lh-dev/bin Connect to Presto using the workshop schema. ./presto-cli --catalog iceberg_data --schema workshop Check current snapshots \u2013 STARTING STATE. SELECT * FROM iceberg_data.workshop.\"customer$snapshots\" ORDER BY committed_at; committed_at | snapshot_id | parent_id | operation | manifest_list | summary -----------------------------+---------------------+-----------+-----------+------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 2023-06-05 18:30:12.994 UTC | 6243511110201494487 | NULL | append | s3a://iceberg-bucket/customer/metadata/snap-6243511110201494487-1-b5ab84dc-671a-426a-a734-940baa49a11f.avro | {changed-partition-count=1, added-data-files=1, total-equality-deletes=0, added-records=1500, total-position-deletes=0, added-files-size=75240, total-delete-files=0, total-files-size=75240, total-records=1500, total-data-files=1} (1 row) Capture the first snapshot ID returned by the SQL statement. You will need this value when you run the rollback command. SELECT snapshot_id FROM iceberg_data.workshop.\"customer$snapshots\" ORDER BY committed_at; snapshot_id --------------------- 6243511110201494487 (1 row) Remember that number that was returned with the query above. Insert the following record to change the customer table in the workshop schema. insert into customer values(1501,'Deepak','IBM SVL',16,'123-212-3455', 123,'AUTOMOBILE','Testing snapshots'); \u2003 Let us look at the snapshots available for the customer table in the workshop schema. You should have 2 snapshots. SELECT * FROM iceberg_data.workshop.\"customer$snapshots\" ORDER BY committed_at; committed_at | snapshot_id | parent_id | operation | manifest_list | summary -----------------------------+---------------------+---------------------+-----------+------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 2023-06-05 18:30:12.994 UTC | 6243511110201494487 | NULL | append | s3a://iceberg-bucket/customer/metadata/snap-6243511110201494487-1-b5ab84dc-671a-426a-a734-940baa49a11f.avro | {changed-partition-count=1, added-data-files=1, total-equality-deletes=0, added-records=1500, total-position-deletes=0, added-files-size=75240, total-delete-files=0, total-files-size=75240, total-records=1500, total-data-files=1} 2023-06-05 18:52:49.193 UTC | 7110570704088319509 | 6243511110201494487 | append | s3a://iceberg-bucket/customer/metadata/snap-7110570704088319509-1-ef26bcf1-c122-4ea4-86b7-ba26369be374.avro | {changed-partition-count=1, added-data-files=1, total-equality-deletes=0, added-records=1, total-position-deletes=0, added-files-size=1268, total-delete-files=0, total-files-size=76508, total-records=1501, total-data-files=2} (2 rows) Querying the customer table in the workshop schema, we can see the record inserted with name='Deepak'. select * from customer where name='Deepak'; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------+---------+-----------+--------------+---------+------------+------------------- 1501 | Deepak | IBM SVL | 16 | 123-212-3455 | 123.0 | AUTOMOBILE | Testing snapshots (1 row) We realize that we don't want the recent updates or just want to see what the data was at any point in time to respond to regulatory requirements. We will leverage the out-of-box system function rollback_to_snapshot to rollback to an older snapshot. The syntax for this function is: CALL iceberg_data.system.rollback_to_snapshot('workshop','customer',x); The \"x\" would get replaced with the snapshot_id number that was found in the earlier query. It will be different on your system than the examples above. Copy the next code segment into Presto. CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', You will see output similar to the following: CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', -> At this point you will need to copy and paste your snapshot_id into the Presto command line and press return or enter. You will see following: CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', -> 7230522396120575591 7230522396120575591 Now you will need to terminate the command with a ); to see the final result. ); CALL iceberg_data.system.rollback_to_snapshot('workshop','customer', -> 7230522396120575591 7230522396120575591 -> ); ); CALL Querying the customer table in the workshop schema, we cannot see the record inserted with name='Deepak'. select * from customer where name='Deepak'; custkey | name | address | nationkey | phone | acctbal | mktsegment | comment ---------+--------+---------+-----------+--------------+---------+------------+------------------- (0 rows) Quit Presto. quit;","title":"Time Travel"},{"location":"wxd-troubleshooting/","text":"Troubleshooting watsonx.data Although we have tried to make the lab as error-free as possible, occasionally things will go wrong. Here is a list of common questions, problems, and potential solutions. What are the passwords for the services I Can't Open up a Terminal Window with VNC or Guacamole A SQL Statement failed but there are no error messages Apache Superset isn't Starting Apache Superset screens differ from the lab Too many incorrect logins using VNC and now I'm blocked Presto doesn't appear to be working Displaying Db2 Schema is failing Queries are failing with a 400 code Queries are failing with a 200 or 500 code Queries are failing with memory errors SSH, VNC and watsonx.data UI are not working No access to Presto/Minio UI after restart Firefox and Chrome freeze when connecting to MinIO What are the passwords for the services? See the section on Passwords . You can get all passwords for the system when you are logged in as the watsonx user by using the following command. cat /certs/passwords You can also use the Jupyter notebook link to display the userids and passwords for the services. I Can't Open up a Terminal Window with VNC or Guacamole First thing to remember is that you can't use VNC and the TechZone VM Remote Console (Guacamole) interface at the same time. Only one can be active at a time. If you can't use terminal windows in VNC If you find that the terminal icons \"spins\" inside the VNC window, this is caused by attempting to connect to the virtual machine by using the VM Remote Console button in your reservation details screen. To fix this problem, you must log out of the VNC session (top right corner of the Linux desktop - press the power button and choose logout). Once VNC logs back in you will be able use the terminal window. A SQL Statement failed, but there are no error messages You need to use the Presto console and search for the SQL statement. Click on the Query ID to find more details of the statement execution and scroll to the bottom of the web page to see any error details. Apache Superset isn't Starting If Superset doesn't start for some reason, you will need to reset it completely to try it again. First make sure you are connected as the watsonx user not root . Make sure you have stopped the terminal session that is running Apache Superset. Next remove the Apache Superset directory. sudo rm -rf /home/watsonx/superset We remove the docker images associated with Apache Superset. If no containers or volumes exist you will get an error message. docker ps -a -q --filter \"name=superset\" | xargs docker container rm --force docker volume list -q --filter \"name=superset\" | xargs docker volume rm --force Download the superset code again. git clone https://github.com/apache/superset.git The docker-compose-non-dev.yml file needs to be updated so that Apache Superset can access the same network that watsonx.data is using. cd ./superset cp docker-compose-non-dev.yml docker-compose-non-dev-backup.yml sed '/version: \"3.7\"/q' docker-compose-non-dev.yml > yamlfix.txt cat <<EOF >> yamlfix.txt networks: default: external: True name: ibm-lh-network EOF sed -e '1,/version: \"3.7\"/ d' docker-compose-non-dev.yml >> yamlfix.txt We update the Apache Superset code to version 2.1.0 . sed 's/\\${TAG:-latest-dev}/2.1.0/' yamlfix.txt > docker-compose-non-dev.yml Use docker-compose to start Apache Superset. nohup docker compose -f docker-compose-non-dev.yml up & The nohup command will issue a message indicating that output will be directed to the nohup.out file. It takes some time for the service to start, so be patient! You can view any output from the Apache Superset system by viewing the nohup.out file in the directory where you installed superset. Apache Superset screens differ from the lab The Apache Superset project makes frequent changes to the types of charts that are available. In some cases they remove or merge charts. Since these charts changes are dynamic, we are not able to guarantee that our examples will look the same as what you might have on your system. Presto doesn't appear to be working If you find that the watsonx.data UI is generating error messages that suggest that queries are not running, or that the Presto service is dead, you can force a soft restart of Presto with the following command: docker restart ibm-lh-presto This will restart the Presto server. If you find that does not fix your problem, you will need to do a hard reset using the following commands: sudo su - cd /root/ibm-lh-dev/bin ./stop_service ibm-lh-presto ./start_service ibm-lh-presto check_presto The command will wait until the service is running before exiting. Displaying Db2 Schema is failing Occasionally when attempting to expand the Db2 catalog (schema), the watsonx.data UI will not display any data or issue an error message. You can try refreshing the browser (not the refresh icon inside the UI) and try again. If you find that this is failing again, open the Query workspace and run the following SQL (replace db2_gosales with the name you cataloged the database with). select count(*) from db2_gosales.gosalesdw.go_org_dim The result should be 123 and hopefully the tables that are part of the schema will display for you. Queries are failing with a 400 code The watsonx.data UI will log you out after a period of inactivity, but doesn't tell you that this has happened. When you attempt to run a query, the error that is returned (400) indicates that you need to log back in again. Queries are failing with a 200 or 500 code A 500 code may indicate the watsonx.data UI has a problem connecting with the Presto engine. First log out of the console and trying logging back on. If that fails to solve the problem, you will need to reboot the console. Open up a terminal window into the server: As the root user, restart the docker container that is running the watsonx.data UI. docker restart lhconsole-nodeclient-svc Queries fail become of insufficient memory If you are running a complex query, you may get an error message similar to \"Query exceeded per-node user memory limit\" or a something similar. Watsonx.data (Presto) attempts to limit the amount of resources being using in a query and will stop a query if it exceeds a certain threshold. You can change the behavior of the system by making the following changes. Note : During this step you will disconnect anyone running a query on the server. What you need to do is make a change to the configuration settings of the Presto engine. AS the root user, enter the docker container for the presto engine: docker exec -it ibm-lh-presto /bin/bash Next, copy the original config file to a safe place in case we make an error: cp /opt/presto/etc/config.properties /opt/presto/etc/config.properties.backup Then update the properties file. cat >> /opt/presto/etc/config.properties << EOL experimental.spiller-spill-path=/tmp experimental.spiller-max-used-space-threshold=0.7 experimental.max-spill-per-node=10GB experimental.query-max-spill-per-node=10GB experimental.spill-enabled=true query.max-memory=10GB query.max-memory-per-node=10GB query.max-total-memory-per-node=10GB query.max-total-memory=10GB EOL Doublecheck that it worked. cat /opt/presto/etc/config.properties | grep experimental experimental.max-spill-per-node=10GB experimental.query-max-spill-per-node=10GB experimental.spill-enabled=true experimental.spiller-max-used-space-threshold=0.7 experimental.spiller-spill-path=/tmp If it is all good then exit the container. exit And now we restart the container. Make sure that you don't impact other users! docker restart ibm-lh-presto Now try running your query again. Note : Once you make this change, only restart presto using the above command, otherwise you will lose the changes. Too many incorrect logins using VNC and now I'm blocked from connecting If you lock yourself out of VNC because of too many incorrect logins, you can reset the service with the following commands. Connect as the root user then run the following command and you should be able to log in again. systemctl restart vncserver@:1 exit SSH, VNC and watsonx.data UI are not working Symptoms: You've tried to use SSH to log into the system, and you get a timeout error. All the Web-based UIs (watsonx.data UI, Presto) fail. Find your email message that contains details of your reservation. Details of what the reservations and the page containing details of the reservation can be found in the Accessing the reservation section. Once the details appear, scroll down to the bottom of the web page, and you will see the VM Remote Console button. You can access the logon screen of the virtual machine by pressing the VM Remote Console button. Clicking on this button will display the logon screen for the server. If you see this screen, the system is running and there is something wrong the watsonx.data service (see instructions below). If you see the following screen: This means your server has been turned off. Click on the Power on button. Make sure to press the Yes button to turn the power on! In a few minutes you should see the logon screen again. Wait for a few minutes for all the services to start, and then you will be able to use SSH, VNC, and watsonx.data UI. Reset watsonx.data If you can log into the watsonx userid using the VM Remove console, you can reset the watsonx.data server with the following steps. SSH into the server as the root user. Then switch to the development code bin directory. cd /root/ibm-lh-dev/bin Check the status of the system with the following command. ./status.sh --all Output will look similar to: using /root/ibm-lh-dev/localstorage/volumes as data root directory for user: root/1001 infra config location is /root/ibm-lh-dev/localstorage/volumes/infra lhconsole-ui running 0.0.0.0:9443->8443/tcp, :::9443->8443/tcp lhconsole-nodeclient-svc running 3001/tcp lhconsole-javaapi-svc running 8090/tcp lhconsole-api running 3333/tcp, 8081/tcp ibm-lh-presto running 0.0.0.0:8443->8443/tcp, :::8443->8443/tcp ibm-lh-hive-metastore running ibm-lh-postgres running 5432/tcp ibm-lh-minio running If the any of the services are not running, you will need to restart the system with the following set of commands. cd /root/ibm-lh-dev/bin ./stop.sh export LH_RUN_MODE=diag ./start.sh Wait for all services to start and then check to see if you can connect to the watsonx.data UI. No access to Presto/Minio UI after restart If you are using a TechZone image that has been suspended, or restarted, you may come across a situation where you are unable to connect to any service that uses the http protocol. The watsonx.service needs to have a diagnostic flag set that opens up these ports, and sometimes this diagnostic setting is not being updated. To manually stop and start the system, you will need to connect with root user privileges and run the following commands: sudo su - cd /root/ibm-lh-dev/bin ./stop.sh export LH_RUN_MODE=diag ./start.sh This set of commands will stop all the services in watsonx.data and restart them in diagnostic mode. This will now open the http ports for use. Firefox and Chrome freeze when connecting to MinIO Firefox and Chrome on OSX will occasionally freeze when connecting to the MinIO console. The Safari browser is much more reliable. This problem appears to be caused by some features which are not properly handled by these browsers.","title":"Troubleshooting watsonx.data"},{"location":"wxd-troubleshooting/#troubleshooting-watsonxdata","text":"Although we have tried to make the lab as error-free as possible, occasionally things will go wrong. Here is a list of common questions, problems, and potential solutions. What are the passwords for the services I Can't Open up a Terminal Window with VNC or Guacamole A SQL Statement failed but there are no error messages Apache Superset isn't Starting Apache Superset screens differ from the lab Too many incorrect logins using VNC and now I'm blocked Presto doesn't appear to be working Displaying Db2 Schema is failing Queries are failing with a 400 code Queries are failing with a 200 or 500 code Queries are failing with memory errors SSH, VNC and watsonx.data UI are not working No access to Presto/Minio UI after restart Firefox and Chrome freeze when connecting to MinIO","title":"Troubleshooting watsonx.data"},{"location":"wxd-troubleshooting/#what-are-the-passwords-for-the-services","text":"See the section on Passwords . You can get all passwords for the system when you are logged in as the watsonx user by using the following command. cat /certs/passwords You can also use the Jupyter notebook link to display the userids and passwords for the services.","title":"What are the passwords for the services?"},{"location":"wxd-troubleshooting/#i-cant-open-up-a-terminal-window-with-vnc-or-guacamole","text":"First thing to remember is that you can't use VNC and the TechZone VM Remote Console (Guacamole) interface at the same time. Only one can be active at a time.","title":"I Can't Open up a Terminal Window with VNC or Guacamole"},{"location":"wxd-troubleshooting/#if-you-cant-use-terminal-windows-in-vnc","text":"If you find that the terminal icons \"spins\" inside the VNC window, this is caused by attempting to connect to the virtual machine by using the VM Remote Console button in your reservation details screen. To fix this problem, you must log out of the VNC session (top right corner of the Linux desktop - press the power button and choose logout). Once VNC logs back in you will be able use the terminal window.","title":"If you can't use terminal windows in VNC"},{"location":"wxd-troubleshooting/#a-sql-statement-failed-but-there-are-no-error-messages","text":"You need to use the Presto console and search for the SQL statement. Click on the Query ID to find more details of the statement execution and scroll to the bottom of the web page to see any error details.","title":"A SQL Statement failed, but there are no error messages"},{"location":"wxd-troubleshooting/#apache-superset-isnt-starting","text":"If Superset doesn't start for some reason, you will need to reset it completely to try it again. First make sure you are connected as the watsonx user not root . Make sure you have stopped the terminal session that is running Apache Superset. Next remove the Apache Superset directory. sudo rm -rf /home/watsonx/superset We remove the docker images associated with Apache Superset. If no containers or volumes exist you will get an error message. docker ps -a -q --filter \"name=superset\" | xargs docker container rm --force docker volume list -q --filter \"name=superset\" | xargs docker volume rm --force Download the superset code again. git clone https://github.com/apache/superset.git The docker-compose-non-dev.yml file needs to be updated so that Apache Superset can access the same network that watsonx.data is using. cd ./superset cp docker-compose-non-dev.yml docker-compose-non-dev-backup.yml sed '/version: \"3.7\"/q' docker-compose-non-dev.yml > yamlfix.txt cat <<EOF >> yamlfix.txt networks: default: external: True name: ibm-lh-network EOF sed -e '1,/version: \"3.7\"/ d' docker-compose-non-dev.yml >> yamlfix.txt We update the Apache Superset code to version 2.1.0 . sed 's/\\${TAG:-latest-dev}/2.1.0/' yamlfix.txt > docker-compose-non-dev.yml Use docker-compose to start Apache Superset. nohup docker compose -f docker-compose-non-dev.yml up & The nohup command will issue a message indicating that output will be directed to the nohup.out file. It takes some time for the service to start, so be patient! You can view any output from the Apache Superset system by viewing the nohup.out file in the directory where you installed superset.","title":"Apache Superset isn't Starting"},{"location":"wxd-troubleshooting/#apache-superset-screens-differ-from-the-lab","text":"The Apache Superset project makes frequent changes to the types of charts that are available. In some cases they remove or merge charts. Since these charts changes are dynamic, we are not able to guarantee that our examples will look the same as what you might have on your system.","title":"Apache Superset screens differ from the lab"},{"location":"wxd-troubleshooting/#presto-doesnt-appear-to-be-working","text":"If you find that the watsonx.data UI is generating error messages that suggest that queries are not running, or that the Presto service is dead, you can force a soft restart of Presto with the following command: docker restart ibm-lh-presto This will restart the Presto server. If you find that does not fix your problem, you will need to do a hard reset using the following commands: sudo su - cd /root/ibm-lh-dev/bin ./stop_service ibm-lh-presto ./start_service ibm-lh-presto check_presto The command will wait until the service is running before exiting.","title":"Presto doesn't appear to be working"},{"location":"wxd-troubleshooting/#displaying-db2-schema-is-failing","text":"Occasionally when attempting to expand the Db2 catalog (schema), the watsonx.data UI will not display any data or issue an error message. You can try refreshing the browser (not the refresh icon inside the UI) and try again. If you find that this is failing again, open the Query workspace and run the following SQL (replace db2_gosales with the name you cataloged the database with). select count(*) from db2_gosales.gosalesdw.go_org_dim The result should be 123 and hopefully the tables that are part of the schema will display for you.","title":"Displaying Db2 Schema is failing"},{"location":"wxd-troubleshooting/#queries-are-failing-with-a-400-code","text":"The watsonx.data UI will log you out after a period of inactivity, but doesn't tell you that this has happened. When you attempt to run a query, the error that is returned (400) indicates that you need to log back in again.","title":"Queries are failing with a 400 code"},{"location":"wxd-troubleshooting/#queries-are-failing-with-a-200-or-500-code","text":"A 500 code may indicate the watsonx.data UI has a problem connecting with the Presto engine. First log out of the console and trying logging back on. If that fails to solve the problem, you will need to reboot the console. Open up a terminal window into the server: As the root user, restart the docker container that is running the watsonx.data UI. docker restart lhconsole-nodeclient-svc","title":"Queries are failing with a 200 or 500 code"},{"location":"wxd-troubleshooting/#queries-fail-become-of-insufficient-memory","text":"If you are running a complex query, you may get an error message similar to \"Query exceeded per-node user memory limit\" or a something similar. Watsonx.data (Presto) attempts to limit the amount of resources being using in a query and will stop a query if it exceeds a certain threshold. You can change the behavior of the system by making the following changes. Note : During this step you will disconnect anyone running a query on the server. What you need to do is make a change to the configuration settings of the Presto engine. AS the root user, enter the docker container for the presto engine: docker exec -it ibm-lh-presto /bin/bash Next, copy the original config file to a safe place in case we make an error: cp /opt/presto/etc/config.properties /opt/presto/etc/config.properties.backup Then update the properties file. cat >> /opt/presto/etc/config.properties << EOL experimental.spiller-spill-path=/tmp experimental.spiller-max-used-space-threshold=0.7 experimental.max-spill-per-node=10GB experimental.query-max-spill-per-node=10GB experimental.spill-enabled=true query.max-memory=10GB query.max-memory-per-node=10GB query.max-total-memory-per-node=10GB query.max-total-memory=10GB EOL Doublecheck that it worked. cat /opt/presto/etc/config.properties | grep experimental experimental.max-spill-per-node=10GB experimental.query-max-spill-per-node=10GB experimental.spill-enabled=true experimental.spiller-max-used-space-threshold=0.7 experimental.spiller-spill-path=/tmp If it is all good then exit the container. exit And now we restart the container. Make sure that you don't impact other users! docker restart ibm-lh-presto Now try running your query again. Note : Once you make this change, only restart presto using the above command, otherwise you will lose the changes.","title":"Queries fail become of insufficient memory"},{"location":"wxd-troubleshooting/#too-many-incorrect-logins-using-vnc-and-now-im-blocked-from-connecting","text":"If you lock yourself out of VNC because of too many incorrect logins, you can reset the service with the following commands. Connect as the root user then run the following command and you should be able to log in again. systemctl restart vncserver@:1 exit","title":"Too many incorrect logins using VNC and now I'm blocked from connecting"},{"location":"wxd-troubleshooting/#ssh-vnc-and-watsonxdata-ui-are-not-working","text":"Symptoms: You've tried to use SSH to log into the system, and you get a timeout error. All the Web-based UIs (watsonx.data UI, Presto) fail. Find your email message that contains details of your reservation. Details of what the reservations and the page containing details of the reservation can be found in the Accessing the reservation section. Once the details appear, scroll down to the bottom of the web page, and you will see the VM Remote Console button. You can access the logon screen of the virtual machine by pressing the VM Remote Console button. Clicking on this button will display the logon screen for the server. If you see this screen, the system is running and there is something wrong the watsonx.data service (see instructions below). If you see the following screen: This means your server has been turned off. Click on the Power on button. Make sure to press the Yes button to turn the power on! In a few minutes you should see the logon screen again. Wait for a few minutes for all the services to start, and then you will be able to use SSH, VNC, and watsonx.data UI.","title":"SSH, VNC and watsonx.data UI are not working"},{"location":"wxd-troubleshooting/#reset-watsonxdata","text":"If you can log into the watsonx userid using the VM Remove console, you can reset the watsonx.data server with the following steps. SSH into the server as the root user. Then switch to the development code bin directory. cd /root/ibm-lh-dev/bin Check the status of the system with the following command. ./status.sh --all Output will look similar to: using /root/ibm-lh-dev/localstorage/volumes as data root directory for user: root/1001 infra config location is /root/ibm-lh-dev/localstorage/volumes/infra lhconsole-ui running 0.0.0.0:9443->8443/tcp, :::9443->8443/tcp lhconsole-nodeclient-svc running 3001/tcp lhconsole-javaapi-svc running 8090/tcp lhconsole-api running 3333/tcp, 8081/tcp ibm-lh-presto running 0.0.0.0:8443->8443/tcp, :::8443->8443/tcp ibm-lh-hive-metastore running ibm-lh-postgres running 5432/tcp ibm-lh-minio running If the any of the services are not running, you will need to restart the system with the following set of commands. cd /root/ibm-lh-dev/bin ./stop.sh export LH_RUN_MODE=diag ./start.sh Wait for all services to start and then check to see if you can connect to the watsonx.data UI.","title":"Reset watsonx.data"},{"location":"wxd-troubleshooting/#no-access-to-prestominio-ui-after-restart","text":"If you are using a TechZone image that has been suspended, or restarted, you may come across a situation where you are unable to connect to any service that uses the http protocol. The watsonx.service needs to have a diagnostic flag set that opens up these ports, and sometimes this diagnostic setting is not being updated. To manually stop and start the system, you will need to connect with root user privileges and run the following commands: sudo su - cd /root/ibm-lh-dev/bin ./stop.sh export LH_RUN_MODE=diag ./start.sh This set of commands will stop all the services in watsonx.data and restart them in diagnostic mode. This will now open the http ports for use.","title":"No access to Presto/Minio UI after restart"},{"location":"wxd-troubleshooting/#firefox-and-chrome-freeze-when-connecting-to-minio","text":"Firefox and Chrome on OSX will occasionally freeze when connecting to the MinIO console. The Safari browser is much more reliable. This problem appears to be caused by some features which are not properly handled by these browsers.","title":"Firefox and Chrome freeze when connecting to MinIO"},{"location":"wxd-vmware/","text":"IBM watsonx.data VMware Image The IBM watsonx.data lab can be run in a virtual machine environment using VMWare Workstation, VMWare Fusion, or Oracle VirtualBox. The location of the OVA file (a compressed OS image format) is provided in the TechZone page for the lab: https://techzone.ibm.com/collection/ibm-watsonxdata-developer-base-image Select the resources tab to get details on how to download the file. Download the watsonxdata.ova file onto your local machine and then use the import function of VMware or VirtualBox to register it with the system. Note : This virtual machine was created using X64 (Intel) hardware, so this will not work in an OSX environment using M1/M2 chips. Once the machine is imported you can delete the OVA file. Before starting the machine, you may want to adjust the hardware requirements. vCPUs \u2013 4 VPCs minimum Memory \u2013 16Gb minimum (You can try 12Gb but tight!) Disk \u2013 30Gb initial size, but the image will grow in size Disable side channel mitigation ON (VMware only) VMware URLs All the URLs in the lab use 192.168.252.2 as the host. When running in the VMware image, you must use localhost for the addresses. You must substitute localhost for the 192.168.252.2 address when you come across it in the documentation. The following URLs and Ports are used to access the watsonx.data services. The ports that are used in the lab are listed below. https://localhost:9443 - watsonx.data management console http://localhost:8080 - Presto console http://localhost:9001 - MinIO console (S3 buckets) https://localhost:6443 - Portainer (Docker container management) http://localhost:8088 - Apache Superset (Query and Graphing) 8443 - Presto External Port 5432 - Postgres External Port 50000 - Db2 Database Port The Apache Superset link will not be active until started as part of the lab. These links have been placed into the Firefox browser for your convenience. Starting the VMware Image When the machine starts, you will be prompted with the logon screen. There are two userids that we will be using in the VMware image: root \u2013 password watsonx.data watsonx \u2013 password watsonx.data When successfully logged in you should see the following screen. Next, check that your network connection is up and running. You will be able to see if the network is connected when the network icon appears on the top row. If it shows Wired Off, make sure to turn it on by clicking on the arrow and choosing \u201cConnect\u201d. If you are using something other than an English keyboard, click on the en1 symbol on the top bar to switch to a different layout. If your keyboard is not listed, you will need to go into Settings and add your keyboard layout. You may also want to consider making the screen size larger. Use the drop-down menu at the top of the screen to select System Tools -> Settings. In the Devices section of the Setting menu, select Displays and choose a resolution that is suitable for your environment. Using External Ports with VMware/Virtual Box The labs assume that you are using a browser \"within\" your virtual machine console. However, both VMware and VirtualBox provide a method for accessing the ports on the virtual machine in your local environment. VMware For VMware, the easiest way to connect to the virtual machine from your host machine is to use the ifconfig command to determine your virtual machine IP address. ifconfig Search for an ensxx** value in the output from the command. There you should see the inet address of your virtual machine ( 172.16.210.237 ). To access the Portainer application from your local browser, you would use this address followed by the Portainer PORT number: https://172.16.210.237:6443 . Remember that inside your virtual machine, you will be using https://localhost:6443 . The following PORT numbers are open in the machine: 9443 - IBM watsonx.data management console 8080 - Presto console 9001 - MinIO console (S3 buckets) 6443 - Portainer (Docker container management) 8088 - Apache Superset (Query and Graphing) 5901 - VNC Access (Access to GUI in the machine) 7681 - SSH (Terminal access) via Browser 22 - SSH (Terminal access) via local terminal program 8443 - Presto External Port (dBeaver connection) 5432 - Postgres External Port (dBeaver connection) VirtualBox VirtualBox does not externalize the IP address of the virtual machine. The ifconfig command will provide an IP address of the machine, but it will not be reachable from your host browser. To open the ports, you must use the network option on the virtual machine. This step can be done while the machine is running. From the VirtualBox console, choose Settings for the machine and then click on the Network option. Press the Advanced option near the bottom of the dialog. Select the Port Forwarding button. This will display the port forwarding menu. You must place an entry for each port that we want to externalize to the host machine. If the value for Host IP is empty (blank), it defaults to localhost. In the example above, the 5901 port in the Guest machine (watsonxdata) is mapped to the host machines 5901 port. To access VNC, you would use localhost:5901 . If the guest machine port conflicts with the host machine port number, you can use a different port number. Terminal Command Window All the commands in the lab will require you execute commands in a terminal window. In addition, the labs require access to the root userid, and this can be accomplished in two ways that are described below. Local Terminal Shell Use a local terminal shell (iterm, Hyper, terminal) and use the SSH command to shell into the machine. For the VMware image, you need to know the IP address of the image and the port number that has been exposed for SSH command (default is 22). Assuming that your VMware machine has an IP address of 172.16.210.237 , the command to SSH into the machine would be: ssh watsonx@172.16.210.237 You will need to accept the unknown host warning and then provide the password for the watsonx userid: watsonx.data . At this point you are connected as the watsonx user. To become the root user, you must enter the following command in the terminal window. sudo su - Now as the root user you will be ready to run the commands found in the lab. Terminal Window in Virtual Machine You can use the Terminal application in the virtual machine to issue commands. This will open up the terminal window. At this point you are connected as the watsonx user. You can ignore any lab instructions that ask you to ssh into the watsonx server. To become the root user, you must enter the following command in the terminal window. sudo su - Now as the root user you will be ready to run the commands found in the lab.","title":"IBM watsonx.data VMware Image"},{"location":"wxd-vmware/#ibm-watsonxdata-vmware-image","text":"The IBM watsonx.data lab can be run in a virtual machine environment using VMWare Workstation, VMWare Fusion, or Oracle VirtualBox. The location of the OVA file (a compressed OS image format) is provided in the TechZone page for the lab: https://techzone.ibm.com/collection/ibm-watsonxdata-developer-base-image Select the resources tab to get details on how to download the file. Download the watsonxdata.ova file onto your local machine and then use the import function of VMware or VirtualBox to register it with the system. Note : This virtual machine was created using X64 (Intel) hardware, so this will not work in an OSX environment using M1/M2 chips. Once the machine is imported you can delete the OVA file. Before starting the machine, you may want to adjust the hardware requirements. vCPUs \u2013 4 VPCs minimum Memory \u2013 16Gb minimum (You can try 12Gb but tight!) Disk \u2013 30Gb initial size, but the image will grow in size Disable side channel mitigation ON (VMware only)","title":"IBM watsonx.data VMware Image"},{"location":"wxd-vmware/#vmware-urls","text":"All the URLs in the lab use 192.168.252.2 as the host. When running in the VMware image, you must use localhost for the addresses. You must substitute localhost for the 192.168.252.2 address when you come across it in the documentation. The following URLs and Ports are used to access the watsonx.data services. The ports that are used in the lab are listed below. https://localhost:9443 - watsonx.data management console http://localhost:8080 - Presto console http://localhost:9001 - MinIO console (S3 buckets) https://localhost:6443 - Portainer (Docker container management) http://localhost:8088 - Apache Superset (Query and Graphing) 8443 - Presto External Port 5432 - Postgres External Port 50000 - Db2 Database Port The Apache Superset link will not be active until started as part of the lab. These links have been placed into the Firefox browser for your convenience.","title":"VMware URLs"},{"location":"wxd-vmware/#starting-the-vmware-image","text":"When the machine starts, you will be prompted with the logon screen. There are two userids that we will be using in the VMware image: root \u2013 password watsonx.data watsonx \u2013 password watsonx.data When successfully logged in you should see the following screen. Next, check that your network connection is up and running. You will be able to see if the network is connected when the network icon appears on the top row. If it shows Wired Off, make sure to turn it on by clicking on the arrow and choosing \u201cConnect\u201d. If you are using something other than an English keyboard, click on the en1 symbol on the top bar to switch to a different layout. If your keyboard is not listed, you will need to go into Settings and add your keyboard layout. You may also want to consider making the screen size larger. Use the drop-down menu at the top of the screen to select System Tools -> Settings. In the Devices section of the Setting menu, select Displays and choose a resolution that is suitable for your environment.","title":"Starting the VMware Image"},{"location":"wxd-vmware/#using-external-ports-with-vmwarevirtual-box","text":"The labs assume that you are using a browser \"within\" your virtual machine console. However, both VMware and VirtualBox provide a method for accessing the ports on the virtual machine in your local environment.","title":"Using External Ports with VMware/Virtual Box"},{"location":"wxd-vmware/#vmware","text":"For VMware, the easiest way to connect to the virtual machine from your host machine is to use the ifconfig command to determine your virtual machine IP address. ifconfig Search for an ensxx** value in the output from the command. There you should see the inet address of your virtual machine ( 172.16.210.237 ). To access the Portainer application from your local browser, you would use this address followed by the Portainer PORT number: https://172.16.210.237:6443 . Remember that inside your virtual machine, you will be using https://localhost:6443 . The following PORT numbers are open in the machine: 9443 - IBM watsonx.data management console 8080 - Presto console 9001 - MinIO console (S3 buckets) 6443 - Portainer (Docker container management) 8088 - Apache Superset (Query and Graphing) 5901 - VNC Access (Access to GUI in the machine) 7681 - SSH (Terminal access) via Browser 22 - SSH (Terminal access) via local terminal program 8443 - Presto External Port (dBeaver connection) 5432 - Postgres External Port (dBeaver connection)","title":"VMware"},{"location":"wxd-vmware/#virtualbox","text":"VirtualBox does not externalize the IP address of the virtual machine. The ifconfig command will provide an IP address of the machine, but it will not be reachable from your host browser. To open the ports, you must use the network option on the virtual machine. This step can be done while the machine is running. From the VirtualBox console, choose Settings for the machine and then click on the Network option. Press the Advanced option near the bottom of the dialog. Select the Port Forwarding button. This will display the port forwarding menu. You must place an entry for each port that we want to externalize to the host machine. If the value for Host IP is empty (blank), it defaults to localhost. In the example above, the 5901 port in the Guest machine (watsonxdata) is mapped to the host machines 5901 port. To access VNC, you would use localhost:5901 . If the guest machine port conflicts with the host machine port number, you can use a different port number.","title":"VirtualBox"},{"location":"wxd-vmware/#terminal-command-window","text":"All the commands in the lab will require you execute commands in a terminal window. In addition, the labs require access to the root userid, and this can be accomplished in two ways that are described below.","title":"Terminal Command Window"},{"location":"wxd-vmware/#local-terminal-shell","text":"Use a local terminal shell (iterm, Hyper, terminal) and use the SSH command to shell into the machine. For the VMware image, you need to know the IP address of the image and the port number that has been exposed for SSH command (default is 22). Assuming that your VMware machine has an IP address of 172.16.210.237 , the command to SSH into the machine would be: ssh watsonx@172.16.210.237 You will need to accept the unknown host warning and then provide the password for the watsonx userid: watsonx.data . At this point you are connected as the watsonx user. To become the root user, you must enter the following command in the terminal window. sudo su - Now as the root user you will be ready to run the commands found in the lab.","title":"Local Terminal Shell"},{"location":"wxd-vmware/#terminal-window-in-virtual-machine","text":"You can use the Terminal application in the virtual machine to issue commands. This will open up the terminal window. At this point you are connected as the watsonx user. You can ignore any lab instructions that ask you to ssh into the watsonx server. To become the root user, you must enter the following command in the terminal window. sudo su - Now as the root user you will be ready to run the commands found in the lab.","title":"Terminal Window in Virtual Machine"},{"location":"wxd-watsonui/","text":"Using the watsonx.data console UI Your TechZone reservation will include the server name and port number to use when connecting to the watsonx.data UI. The default port number is 9443, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Open your browser and navigate to: Watsonx.data UI - https://region.techzone-server.com:port Credentials: username: ibmlhadmin password: password Note: You will get a Certificate error in Firefox: Select Advanced. Choose \u201cAccept the Risk and Continue\u201d. If you are using Google Chrome, you can bypass the error message by typing in \u201cthisisunsafe\u201d or clicking on the \"Proceed to server name (unsafe)\" link. The server name value will be replaced with the name of the TechZone server you are connecting to. The watsonx.data UI will display. The userid is ibmlhadmin with password of password . Note : If you see the following screen when first connecting to the UI, this is an indication that the service has not completely initialized. Dismiss all the error messages and then click on the Person icon (far right side above the messages) and Logout. Close the browser window after logging out and open the web page again until you get the proper login screen. At this point you will be connected to the console. Watsonx.data UI Navigation The main screen provides a snapshot of the objects that are currently found in the watsonx.data system. The infrastructure components shows that there is 1 engine, 2 catalogs and 2 buckets associated with the system. You can examine these objects by using the menu system found at the left side of the screen. Click on the hamburger icon. This will provide a list of items that you can explore in the UI. You can also access this list by clicking on one of the following icons. You can explore the various menus to see how the UI works. A brief description of the items is found below. Infrastructure manager - Displays the current engines, buckets and databases associated with the installation. Data Manager - Used to explore the various data sources that are catalogued in the system. You can explore the schemas, tables, table layout and view a subset of the data with this option. The display make take a few minutes to show the schemas in the system as it is querying the catalog and populating the descriptions on the screen. Query Workplace - A SQL-based query tool for accessing the data. Query History - A list of SQL queries that were previously run across all engines. Access Control - Control who can access the data. Try using the Data Explorer and Query engine to access some of the data in the pre-defined TPCH schema.","title":"watsonx.data UI"},{"location":"wxd-watsonui/#using-the-watsonxdata-console-ui","text":"Your TechZone reservation will include the server name and port number to use when connecting to the watsonx.data UI. The default port number is 9443, while the server will be referred to as region.techzone-server.com . Replace these values with those found in your reservation. Open your browser and navigate to: Watsonx.data UI - https://region.techzone-server.com:port Credentials: username: ibmlhadmin password: password Note: You will get a Certificate error in Firefox: Select Advanced. Choose \u201cAccept the Risk and Continue\u201d. If you are using Google Chrome, you can bypass the error message by typing in \u201cthisisunsafe\u201d or clicking on the \"Proceed to server name (unsafe)\" link. The server name value will be replaced with the name of the TechZone server you are connecting to. The watsonx.data UI will display. The userid is ibmlhadmin with password of password . Note : If you see the following screen when first connecting to the UI, this is an indication that the service has not completely initialized. Dismiss all the error messages and then click on the Person icon (far right side above the messages) and Logout. Close the browser window after logging out and open the web page again until you get the proper login screen. At this point you will be connected to the console.","title":"Using the watsonx.data console UI"},{"location":"wxd-watsonui/#watsonxdata-ui-navigation","text":"The main screen provides a snapshot of the objects that are currently found in the watsonx.data system. The infrastructure components shows that there is 1 engine, 2 catalogs and 2 buckets associated with the system. You can examine these objects by using the menu system found at the left side of the screen. Click on the hamburger icon. This will provide a list of items that you can explore in the UI. You can also access this list by clicking on one of the following icons. You can explore the various menus to see how the UI works. A brief description of the items is found below. Infrastructure manager - Displays the current engines, buckets and databases associated with the installation. Data Manager - Used to explore the various data sources that are catalogued in the system. You can explore the schemas, tables, table layout and view a subset of the data with this option. The display make take a few minutes to show the schemas in the system as it is querying the catalog and populating the descriptions on the screen. Query Workplace - A SQL-based query tool for accessing the data. Query History - A list of SQL queries that were previously run across all engines. Access Control - Control who can access the data. Try using the Data Explorer and Query engine to access some of the data in the pre-defined TPCH schema.","title":"Watsonx.data UI Navigation"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/","text":"Start Bootstrap - SB Admin 2 SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap . Getting Started To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2 Bugs and Issues Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap . Creator Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton . Copyright and License Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"[Start Bootstrap](http://startbootstrap.com/) - [SB Admin 2](http://startbootstrap.com/template-overviews/sb-admin-2/)"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/#start-bootstrap-sb-admin-2","text":"SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap .","title":"Start Bootstrap - SB Admin 2"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/#getting-started","text":"To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2","title":"Getting Started"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/#bugs-and-issues","text":"Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap .","title":"Bugs and Issues"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/#creator","text":"Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton .","title":"Creator"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/#copyright-and-license","text":"Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"Copyright and License"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/","text":"Bootstrap Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com ! Table of contents Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license Quick start Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more. What's included Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme. Bugs and feature requests Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue . Documentation Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally. Running documentation locally If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation . Documentation for previous releases Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download. Contributing Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org . Community Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability. Versioning For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible. Creators Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat Copyright and license Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"[Bootstrap](http://getbootstrap.com)"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bootstrap","text":"Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com !","title":"Bootstrap"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#table-of-contents","text":"Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license","title":"Table of contents"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#quick-start","text":"Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more.","title":"Quick start"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#whats-included","text":"Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme.","title":"What's included"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bugs-and-feature-requests","text":"Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue .","title":"Bugs and feature requests"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation","text":"Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally.","title":"Documentation"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#running-documentation-locally","text":"If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation .","title":"Running documentation locally"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation-for-previous-releases","text":"Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download.","title":"Documentation for previous releases"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#contributing","text":"Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org .","title":"Contributing"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#community","text":"Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.","title":"Community"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#versioning","text":"For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible.","title":"Versioning"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#creators","text":"Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat","title":"Creators"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/bootstrap/#copyright-and-license","text":"Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"Copyright and license"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/","text":"Flot About Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot. Installation Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling. Basic usage Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods. What's with the name? First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks. Notes about the examples In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Flot [![Build status](https://travis-ci.org/flot/flot.png)](https://travis-ci.org/flot/flot)"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/#flot","text":"","title":"Flot"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/#about","text":"Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot.","title":"About"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/#installation","text":"Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling.","title":"Installation"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/#basic-usage","text":"Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods.","title":"Basic usage"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/#whats-with-the-name","text":"First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks.","title":"What's with the name?"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/#notes-about-the-examples","text":"In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Notes about the examples"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/","text":"Flot Reference Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number Introduction Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied. Data Format The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ] Plot Options All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options ); Customizing the legend legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) } Customizing the axes xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places. Multiple axes If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\". Time series data Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between. Customizing the data series series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme. Customizing the grid grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting. Specifying gradients A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE. Plot Methods The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change. Hooks In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info. Plugins Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy. Version number The version number of Flot is available in $.plot.version .","title":"Flot Reference #"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#flot-reference","text":"Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number","title":"Flot Reference"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#introduction","text":"Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied.","title":"Introduction"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#data-format","text":"The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ]","title":"Data Format"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-options","text":"All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options );","title":"Plot Options"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-legend","text":"legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) }","title":"Customizing the legend"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-axes","text":"xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places.","title":"Customizing the axes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#multiple-axes","text":"If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\".","title":"Multiple axes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#time-series-data","text":"Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between.","title":"Time series data"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-data-series","text":"series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme.","title":"Customizing the data series"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-grid","text":"grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting.","title":"Customizing the grid"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#specifying-gradients","text":"A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE.","title":"Specifying gradients"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-methods","text":"The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change.","title":"Plot Methods"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#hooks","text":"In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info.","title":"Hooks"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#plugins","text":"Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy.","title":"Plugins"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/API/#version-number","text":"The version number of Flot is available in $.plot.version .","title":"Version number"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/","text":"Contributing to Flot We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response. Issues Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort. Pull Requests To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below. Flot Style Guidelines Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions: Spacing Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } Comments Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {} Wrapping Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"CONTRIBUTING"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#contributing-to-flot","text":"We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response.","title":"Contributing to Flot"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#issues","text":"Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort.","title":"Issues"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#pull-requests","text":"To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below.","title":"Pull Requests"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#flot-style-guidelines","text":"Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions:","title":"Flot Style Guidelines"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#spacing","text":"Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } }","title":"Spacing"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#comments","text":"Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {}","title":"Comments"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#wrapping","text":"Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"Wrapping"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/","text":"Frequently asked questions How much data can Flot cope with? Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth. Flot isn't working when I'm using JSON data as source! Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically. Can I export the graph? You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas. The bars are all tiny in time mode? It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide. Can I use Flot with libraries like Mootools or Prototype? Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details. Flot doesn't work with [insert name of Javascript UI framework]! Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"FAQ"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#how-much-data-can-flot-cope-with","text":"Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth.","title":"How much data can Flot cope with?"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-isnt-working-when-im-using-json-data-as-source","text":"Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically.","title":"Flot isn't working when I'm using JSON data as source!"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-export-the-graph","text":"You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas.","title":"Can I export the graph?"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#the-bars-are-all-tiny-in-time-mode","text":"It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide.","title":"The bars are all tiny in time mode?"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-use-flot-with-libraries-like-mootools-or-prototype","text":"Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details.","title":"Can I use Flot with libraries like Mootools or Prototype?"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-doesnt-work-with-insert-name-of-javascript-ui-framework","text":"Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"Flot doesn't work with [insert name of Javascript UI framework]!"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/","text":"Flot 0.8.3 Changes Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221) Bug fixes Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028) Flot 0.8.2 Changes Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081) Bug fixes Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915) Flot 0.8.1 Bug fixes Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski) Flot 0.8.0 API changes Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540). Changes Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963) Bug fixes Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000) Flot 0.7 API changes Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/ Changes Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown. Bug fixes Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483). Flot 0.6 API changes Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed. Changes Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins. Bug fixes Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224) Flot 0.5 Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place). API changes Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas). Changes Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars. Bug fixes Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey) Flot 0.4 API changes Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize. Changes Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class. Bug fixes Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas. Flot 0.3 This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball. Changes Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot. Bug fixes Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides) Flot 0.2 The API should now be fully documented. API changes Moved labelMargin option to grid from x/yaxis. Changes Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser) Flot 0.1 First public release.","title":"NEWS"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-083","text":"","title":"Flot 0.8.3"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes","text":"Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221)","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes","text":"Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028)","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-082","text":"","title":"Flot 0.8.2"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_1","text":"Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081)","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_1","text":"Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915)","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-081","text":"","title":"Flot 0.8.1"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_2","text":"Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski)","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-080","text":"","title":"Flot 0.8.0"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes","text":"Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540).","title":"API changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_2","text":"Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963)","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_3","text":"Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000)","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-07","text":"","title":"Flot 0.7"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_1","text":"Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/","title":"API changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_3","text":"Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown.","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_4","text":"Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483).","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-06","text":"","title":"Flot 0.6"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_2","text":"Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed.","title":"API changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_4","text":"Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins.","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_5","text":"Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224)","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-05","text":"Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place).","title":"Flot 0.5"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_3","text":"Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas).","title":"API changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_5","text":"Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars.","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_6","text":"Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey)","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-04","text":"","title":"Flot 0.4"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_4","text":"Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize.","title":"API changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_6","text":"Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class.","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_7","text":"Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas.","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-03","text":"This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball.","title":"Flot 0.3"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_7","text":"Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot.","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_8","text":"Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides)","title":"Bug fixes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-02","text":"The API should now be fully documented.","title":"Flot 0.2"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_5","text":"Moved labelMargin option to grid from x/yaxis.","title":"API changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_8","text":"Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser)","title":"Changes"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-01","text":"First public release.","title":"Flot 0.1"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/","text":"Writing plugins All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot. Complete example Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up. Shutting down a plugin Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot. Some hints on the options Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"PLUGINS"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#writing-plugins","text":"All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot.","title":"Writing plugins"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#complete-example","text":"Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up.","title":"Complete example"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#shutting-down-a-plugin","text":"Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot.","title":"Shutting down a plugin"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#some-hints-on-the-options","text":"Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"Some hints on the options"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/","text":"============================================ Originally written by Xuan Luo. Maintained by Mark Cote. Contributions: Xuan Luo Mark Cote stdexcept Clemens Stolle Michael Haddon andig Alex Pinkney flot-axislabels provides flot with the ability to label axes. It supports any number of axes. It can render the labels with CSS transforms, in canvas, or with traditional CSS positioning (\"HTML\" mode). flot-axislabels attempts a graceful fallback from CSS to canvas to HTML if some modes are not supported. You can also force a particular lesser mode (canvas or HTML). In both CSS and canvas modes, the y-axis labels are rotated to face the graph (90 degrees counter-clockwise for left-hand labels, and 90 degrees clockwise for right-hand labels). In HTML mode, y-axis labels are left horizontal (warning: this takes up a lot of space). In CSS and HTML modes, each axis label belongs to the classes \"axisLabels\" and \"[axisName]Label\" (e.g. .xaxisLabel, .y2axisLabel, etc). You can use standard CSS properties to customize their appearance. In canvas mode, you can set font size, family, and colour through flot options (see below). Example $(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); }); Usage flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black) Compatibility flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas. License flot-axislabels is released under the terms of the MIT License .","title":"Index"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#example","text":"$(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); });","title":"Example"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#usage","text":"flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black)","title":"Usage"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#compatibility","text":"flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas.","title":"Compatibility"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#license","text":"flot-axislabels is released under the terms of the MIT License .","title":"License"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/","text":"metisMenu Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr Installation npm npm install metismenu Bower bower install metisMenu Download Usage Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu (); Options toggle Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false }); doubleTapToGo Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true }); DEMO Contains a simple HTML file to demonstrate metisMenu plugin. Release History DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9 Author metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f | License MIT License","title":"metisMenu [![Build Status](https://secure.travis-ci.org/onokumus/metisMenu.png?branch=master)](https://travis-ci.org/onokumus/metisMenu)"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#metismenu","text":"Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr","title":"metisMenu"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#installation","text":"npm npm install metismenu Bower bower install metisMenu Download","title":"Installation"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#usage","text":"Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu ();","title":"Usage"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#options","text":"","title":"Options"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#toggle","text":"Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false });","title":"toggle"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#doubletaptogo","text":"Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true });","title":"doubleTapToGo"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#demo","text":"Contains a simple HTML file to demonstrate metisMenu plugin.","title":"DEMO"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#release-history","text":"DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9","title":"Release History"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#author","text":"metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f |","title":"Author"},{"location":"fromwatsons/t1-reports/sbadmin2-1.0.7/bower_components/metisMenu/#license","text":"MIT License","title":"License"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/","text":"Start Bootstrap - SB Admin 2 SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap . Getting Started To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2 Bugs and Issues Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap . Creator Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton . Copyright and License Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"[Start Bootstrap](http://startbootstrap.com/) - [SB Admin 2](http://startbootstrap.com/template-overviews/sb-admin-2/)"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/#start-bootstrap-sb-admin-2","text":"SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap .","title":"Start Bootstrap - SB Admin 2"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/#getting-started","text":"To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2","title":"Getting Started"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/#bugs-and-issues","text":"Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap .","title":"Bugs and Issues"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/#creator","text":"Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton .","title":"Creator"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/#copyright-and-license","text":"Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"Copyright and License"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/","text":"Bootstrap Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com ! Table of contents Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license Quick start Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more. What's included Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme. Bugs and feature requests Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue . Documentation Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally. Running documentation locally If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation . Documentation for previous releases Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download. Contributing Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org . Community Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability. Versioning For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible. Creators Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat Copyright and license Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"[Bootstrap](http://getbootstrap.com)"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bootstrap","text":"Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com !","title":"Bootstrap"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#table-of-contents","text":"Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license","title":"Table of contents"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#quick-start","text":"Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more.","title":"Quick start"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#whats-included","text":"Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme.","title":"What's included"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bugs-and-feature-requests","text":"Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue .","title":"Bugs and feature requests"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation","text":"Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally.","title":"Documentation"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#running-documentation-locally","text":"If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation .","title":"Running documentation locally"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation-for-previous-releases","text":"Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download.","title":"Documentation for previous releases"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#contributing","text":"Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org .","title":"Contributing"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#community","text":"Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.","title":"Community"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#versioning","text":"For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible.","title":"Versioning"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#creators","text":"Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat","title":"Creators"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/bootstrap/#copyright-and-license","text":"Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"Copyright and license"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/","text":"Flot About Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot. Installation Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling. Basic usage Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods. What's with the name? First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks. Notes about the examples In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Flot [![Build status](https://travis-ci.org/flot/flot.png)](https://travis-ci.org/flot/flot)"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/#flot","text":"","title":"Flot"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/#about","text":"Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot.","title":"About"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/#installation","text":"Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling.","title":"Installation"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/#basic-usage","text":"Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods.","title":"Basic usage"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/#whats-with-the-name","text":"First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks.","title":"What's with the name?"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/#notes-about-the-examples","text":"In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Notes about the examples"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/","text":"Flot Reference Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number Introduction Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied. Data Format The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ] Plot Options All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options ); Customizing the legend legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) } Customizing the axes xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places. Multiple axes If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\". Time series data Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between. Customizing the data series series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme. Customizing the grid grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting. Specifying gradients A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE. Plot Methods The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change. Hooks In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info. Plugins Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy. Version number The version number of Flot is available in $.plot.version .","title":"Flot Reference #"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#flot-reference","text":"Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number","title":"Flot Reference"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#introduction","text":"Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied.","title":"Introduction"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#data-format","text":"The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ]","title":"Data Format"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-options","text":"All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options );","title":"Plot Options"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-legend","text":"legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) }","title":"Customizing the legend"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-axes","text":"xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places.","title":"Customizing the axes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#multiple-axes","text":"If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\".","title":"Multiple axes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#time-series-data","text":"Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between.","title":"Time series data"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-data-series","text":"series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme.","title":"Customizing the data series"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-grid","text":"grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting.","title":"Customizing the grid"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#specifying-gradients","text":"A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE.","title":"Specifying gradients"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-methods","text":"The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change.","title":"Plot Methods"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#hooks","text":"In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info.","title":"Hooks"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#plugins","text":"Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy.","title":"Plugins"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/API/#version-number","text":"The version number of Flot is available in $.plot.version .","title":"Version number"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/","text":"Contributing to Flot We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response. Issues Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort. Pull Requests To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below. Flot Style Guidelines Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions: Spacing Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } Comments Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {} Wrapping Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"CONTRIBUTING"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#contributing-to-flot","text":"We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response.","title":"Contributing to Flot"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#issues","text":"Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort.","title":"Issues"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#pull-requests","text":"To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below.","title":"Pull Requests"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#flot-style-guidelines","text":"Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions:","title":"Flot Style Guidelines"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#spacing","text":"Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } }","title":"Spacing"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#comments","text":"Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {}","title":"Comments"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#wrapping","text":"Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"Wrapping"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/","text":"Frequently asked questions How much data can Flot cope with? Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth. Flot isn't working when I'm using JSON data as source! Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically. Can I export the graph? You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas. The bars are all tiny in time mode? It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide. Can I use Flot with libraries like Mootools or Prototype? Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details. Flot doesn't work with [insert name of Javascript UI framework]! Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"FAQ"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#how-much-data-can-flot-cope-with","text":"Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth.","title":"How much data can Flot cope with?"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-isnt-working-when-im-using-json-data-as-source","text":"Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically.","title":"Flot isn't working when I'm using JSON data as source!"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-export-the-graph","text":"You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas.","title":"Can I export the graph?"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#the-bars-are-all-tiny-in-time-mode","text":"It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide.","title":"The bars are all tiny in time mode?"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-use-flot-with-libraries-like-mootools-or-prototype","text":"Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details.","title":"Can I use Flot with libraries like Mootools or Prototype?"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-doesnt-work-with-insert-name-of-javascript-ui-framework","text":"Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"Flot doesn't work with [insert name of Javascript UI framework]!"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/","text":"Flot 0.8.3 Changes Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221) Bug fixes Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028) Flot 0.8.2 Changes Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081) Bug fixes Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915) Flot 0.8.1 Bug fixes Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski) Flot 0.8.0 API changes Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540). Changes Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963) Bug fixes Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000) Flot 0.7 API changes Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/ Changes Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown. Bug fixes Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483). Flot 0.6 API changes Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed. Changes Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins. Bug fixes Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224) Flot 0.5 Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place). API changes Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas). Changes Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars. Bug fixes Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey) Flot 0.4 API changes Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize. Changes Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class. Bug fixes Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas. Flot 0.3 This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball. Changes Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot. Bug fixes Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides) Flot 0.2 The API should now be fully documented. API changes Moved labelMargin option to grid from x/yaxis. Changes Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser) Flot 0.1 First public release.","title":"NEWS"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-083","text":"","title":"Flot 0.8.3"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes","text":"Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221)","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes","text":"Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028)","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-082","text":"","title":"Flot 0.8.2"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_1","text":"Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081)","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_1","text":"Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915)","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-081","text":"","title":"Flot 0.8.1"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_2","text":"Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski)","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-080","text":"","title":"Flot 0.8.0"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes","text":"Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540).","title":"API changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_2","text":"Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963)","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_3","text":"Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000)","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-07","text":"","title":"Flot 0.7"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_1","text":"Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/","title":"API changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_3","text":"Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown.","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_4","text":"Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483).","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-06","text":"","title":"Flot 0.6"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_2","text":"Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed.","title":"API changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_4","text":"Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins.","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_5","text":"Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224)","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-05","text":"Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place).","title":"Flot 0.5"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_3","text":"Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas).","title":"API changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_5","text":"Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars.","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_6","text":"Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey)","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-04","text":"","title":"Flot 0.4"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_4","text":"Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize.","title":"API changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_6","text":"Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class.","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_7","text":"Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas.","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-03","text":"This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball.","title":"Flot 0.3"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_7","text":"Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot.","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_8","text":"Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides)","title":"Bug fixes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-02","text":"The API should now be fully documented.","title":"Flot 0.2"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_5","text":"Moved labelMargin option to grid from x/yaxis.","title":"API changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_8","text":"Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser)","title":"Changes"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-01","text":"First public release.","title":"Flot 0.1"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/","text":"Writing plugins All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot. Complete example Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up. Shutting down a plugin Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot. Some hints on the options Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"PLUGINS"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#writing-plugins","text":"All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot.","title":"Writing plugins"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#complete-example","text":"Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up.","title":"Complete example"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#shutting-down-a-plugin","text":"Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot.","title":"Shutting down a plugin"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#some-hints-on-the-options","text":"Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"Some hints on the options"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/","text":"============================================ Originally written by Xuan Luo. Maintained by Mark Cote. Contributions: Xuan Luo Mark Cote stdexcept Clemens Stolle Michael Haddon andig Alex Pinkney flot-axislabels provides flot with the ability to label axes. It supports any number of axes. It can render the labels with CSS transforms, in canvas, or with traditional CSS positioning (\"HTML\" mode). flot-axislabels attempts a graceful fallback from CSS to canvas to HTML if some modes are not supported. You can also force a particular lesser mode (canvas or HTML). In both CSS and canvas modes, the y-axis labels are rotated to face the graph (90 degrees counter-clockwise for left-hand labels, and 90 degrees clockwise for right-hand labels). In HTML mode, y-axis labels are left horizontal (warning: this takes up a lot of space). In CSS and HTML modes, each axis label belongs to the classes \"axisLabels\" and \"[axisName]Label\" (e.g. .xaxisLabel, .y2axisLabel, etc). You can use standard CSS properties to customize their appearance. In canvas mode, you can set font size, family, and colour through flot options (see below). Example $(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); }); Usage flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black) Compatibility flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas. License flot-axislabels is released under the terms of the MIT License .","title":"Index"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#example","text":"$(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); });","title":"Example"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#usage","text":"flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black)","title":"Usage"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#compatibility","text":"flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas.","title":"Compatibility"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#license","text":"flot-axislabels is released under the terms of the MIT License .","title":"License"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/","text":"metisMenu Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr Installation npm npm install metismenu Bower bower install metisMenu Download Usage Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu (); Options toggle Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false }); doubleTapToGo Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true }); DEMO Contains a simple HTML file to demonstrate metisMenu plugin. Release History DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9 Author metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f | License MIT License","title":"metisMenu [![Build Status](https://secure.travis-ci.org/onokumus/metisMenu.png?branch=master)](https://travis-ci.org/onokumus/metisMenu)"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#metismenu","text":"Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr","title":"metisMenu"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#installation","text":"npm npm install metismenu Bower bower install metisMenu Download","title":"Installation"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#usage","text":"Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu ();","title":"Usage"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#options","text":"","title":"Options"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#toggle","text":"Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false });","title":"toggle"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#doubletaptogo","text":"Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true });","title":"doubleTapToGo"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#demo","text":"Contains a simple HTML file to demonstrate metisMenu plugin.","title":"DEMO"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#release-history","text":"DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9","title":"Release History"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#author","text":"metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f |","title":"Author"},{"location":"fromwatsons/t2-reports/sbadmin2-1.0.7/bower_components/metisMenu/#license","text":"MIT License","title":"License"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/","text":"Start Bootstrap - SB Admin 2 SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap . Getting Started To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2 Bugs and Issues Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap . Creator Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton . Copyright and License Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"[Start Bootstrap](http://startbootstrap.com/) - [SB Admin 2](http://startbootstrap.com/template-overviews/sb-admin-2/)"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/#start-bootstrap-sb-admin-2","text":"SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap .","title":"Start Bootstrap - SB Admin 2"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/#getting-started","text":"To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2","title":"Getting Started"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/#bugs-and-issues","text":"Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap .","title":"Bugs and Issues"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/#creator","text":"Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton .","title":"Creator"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/#copyright-and-license","text":"Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"Copyright and License"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/","text":"Bootstrap Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com ! Table of contents Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license Quick start Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more. What's included Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme. Bugs and feature requests Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue . Documentation Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally. Running documentation locally If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation . Documentation for previous releases Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download. Contributing Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org . Community Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability. Versioning For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible. Creators Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat Copyright and license Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"[Bootstrap](http://getbootstrap.com)"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bootstrap","text":"Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com !","title":"Bootstrap"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#table-of-contents","text":"Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license","title":"Table of contents"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#quick-start","text":"Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more.","title":"Quick start"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#whats-included","text":"Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme.","title":"What's included"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bugs-and-feature-requests","text":"Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue .","title":"Bugs and feature requests"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation","text":"Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally.","title":"Documentation"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#running-documentation-locally","text":"If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation .","title":"Running documentation locally"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation-for-previous-releases","text":"Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download.","title":"Documentation for previous releases"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#contributing","text":"Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org .","title":"Contributing"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#community","text":"Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.","title":"Community"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#versioning","text":"For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible.","title":"Versioning"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#creators","text":"Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat","title":"Creators"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/bootstrap/#copyright-and-license","text":"Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"Copyright and license"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/","text":"Flot About Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot. Installation Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling. Basic usage Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods. What's with the name? First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks. Notes about the examples In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Flot [![Build status](https://travis-ci.org/flot/flot.png)](https://travis-ci.org/flot/flot)"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/#flot","text":"","title":"Flot"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/#about","text":"Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot.","title":"About"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/#installation","text":"Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling.","title":"Installation"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/#basic-usage","text":"Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods.","title":"Basic usage"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/#whats-with-the-name","text":"First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks.","title":"What's with the name?"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/#notes-about-the-examples","text":"In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Notes about the examples"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/","text":"Flot Reference Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number Introduction Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied. Data Format The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ] Plot Options All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options ); Customizing the legend legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) } Customizing the axes xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places. Multiple axes If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\". Time series data Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between. Customizing the data series series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme. Customizing the grid grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting. Specifying gradients A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE. Plot Methods The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change. Hooks In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info. Plugins Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy. Version number The version number of Flot is available in $.plot.version .","title":"Flot Reference #"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#flot-reference","text":"Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number","title":"Flot Reference"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#introduction","text":"Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied.","title":"Introduction"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#data-format","text":"The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ]","title":"Data Format"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-options","text":"All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options );","title":"Plot Options"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-legend","text":"legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) }","title":"Customizing the legend"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-axes","text":"xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places.","title":"Customizing the axes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#multiple-axes","text":"If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\".","title":"Multiple axes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#time-series-data","text":"Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between.","title":"Time series data"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-data-series","text":"series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme.","title":"Customizing the data series"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-grid","text":"grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting.","title":"Customizing the grid"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#specifying-gradients","text":"A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE.","title":"Specifying gradients"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-methods","text":"The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change.","title":"Plot Methods"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#hooks","text":"In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info.","title":"Hooks"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#plugins","text":"Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy.","title":"Plugins"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/API/#version-number","text":"The version number of Flot is available in $.plot.version .","title":"Version number"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/","text":"Contributing to Flot We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response. Issues Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort. Pull Requests To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below. Flot Style Guidelines Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions: Spacing Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } Comments Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {} Wrapping Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"CONTRIBUTING"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#contributing-to-flot","text":"We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response.","title":"Contributing to Flot"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#issues","text":"Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort.","title":"Issues"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#pull-requests","text":"To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below.","title":"Pull Requests"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#flot-style-guidelines","text":"Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions:","title":"Flot Style Guidelines"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#spacing","text":"Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } }","title":"Spacing"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#comments","text":"Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {}","title":"Comments"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#wrapping","text":"Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"Wrapping"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/","text":"Frequently asked questions How much data can Flot cope with? Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth. Flot isn't working when I'm using JSON data as source! Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically. Can I export the graph? You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas. The bars are all tiny in time mode? It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide. Can I use Flot with libraries like Mootools or Prototype? Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details. Flot doesn't work with [insert name of Javascript UI framework]! Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"FAQ"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#how-much-data-can-flot-cope-with","text":"Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth.","title":"How much data can Flot cope with?"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-isnt-working-when-im-using-json-data-as-source","text":"Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically.","title":"Flot isn't working when I'm using JSON data as source!"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-export-the-graph","text":"You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas.","title":"Can I export the graph?"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#the-bars-are-all-tiny-in-time-mode","text":"It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide.","title":"The bars are all tiny in time mode?"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-use-flot-with-libraries-like-mootools-or-prototype","text":"Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details.","title":"Can I use Flot with libraries like Mootools or Prototype?"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-doesnt-work-with-insert-name-of-javascript-ui-framework","text":"Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"Flot doesn't work with [insert name of Javascript UI framework]!"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/","text":"Flot 0.8.3 Changes Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221) Bug fixes Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028) Flot 0.8.2 Changes Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081) Bug fixes Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915) Flot 0.8.1 Bug fixes Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski) Flot 0.8.0 API changes Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540). Changes Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963) Bug fixes Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000) Flot 0.7 API changes Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/ Changes Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown. Bug fixes Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483). Flot 0.6 API changes Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed. Changes Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins. Bug fixes Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224) Flot 0.5 Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place). API changes Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas). Changes Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars. Bug fixes Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey) Flot 0.4 API changes Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize. Changes Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class. Bug fixes Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas. Flot 0.3 This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball. Changes Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot. Bug fixes Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides) Flot 0.2 The API should now be fully documented. API changes Moved labelMargin option to grid from x/yaxis. Changes Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser) Flot 0.1 First public release.","title":"NEWS"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-083","text":"","title":"Flot 0.8.3"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes","text":"Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221)","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes","text":"Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028)","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-082","text":"","title":"Flot 0.8.2"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_1","text":"Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081)","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_1","text":"Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915)","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-081","text":"","title":"Flot 0.8.1"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_2","text":"Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski)","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-080","text":"","title":"Flot 0.8.0"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes","text":"Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540).","title":"API changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_2","text":"Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963)","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_3","text":"Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000)","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-07","text":"","title":"Flot 0.7"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_1","text":"Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/","title":"API changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_3","text":"Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown.","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_4","text":"Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483).","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-06","text":"","title":"Flot 0.6"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_2","text":"Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed.","title":"API changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_4","text":"Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins.","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_5","text":"Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224)","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-05","text":"Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place).","title":"Flot 0.5"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_3","text":"Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas).","title":"API changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_5","text":"Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars.","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_6","text":"Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey)","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-04","text":"","title":"Flot 0.4"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_4","text":"Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize.","title":"API changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_6","text":"Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class.","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_7","text":"Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas.","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-03","text":"This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball.","title":"Flot 0.3"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_7","text":"Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot.","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_8","text":"Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides)","title":"Bug fixes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-02","text":"The API should now be fully documented.","title":"Flot 0.2"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_5","text":"Moved labelMargin option to grid from x/yaxis.","title":"API changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_8","text":"Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser)","title":"Changes"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-01","text":"First public release.","title":"Flot 0.1"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/","text":"Writing plugins All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot. Complete example Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up. Shutting down a plugin Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot. Some hints on the options Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"PLUGINS"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#writing-plugins","text":"All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot.","title":"Writing plugins"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#complete-example","text":"Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up.","title":"Complete example"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#shutting-down-a-plugin","text":"Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot.","title":"Shutting down a plugin"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#some-hints-on-the-options","text":"Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"Some hints on the options"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/","text":"============================================ Originally written by Xuan Luo. Maintained by Mark Cote. Contributions: Xuan Luo Mark Cote stdexcept Clemens Stolle Michael Haddon andig Alex Pinkney flot-axislabels provides flot with the ability to label axes. It supports any number of axes. It can render the labels with CSS transforms, in canvas, or with traditional CSS positioning (\"HTML\" mode). flot-axislabels attempts a graceful fallback from CSS to canvas to HTML if some modes are not supported. You can also force a particular lesser mode (canvas or HTML). In both CSS and canvas modes, the y-axis labels are rotated to face the graph (90 degrees counter-clockwise for left-hand labels, and 90 degrees clockwise for right-hand labels). In HTML mode, y-axis labels are left horizontal (warning: this takes up a lot of space). In CSS and HTML modes, each axis label belongs to the classes \"axisLabels\" and \"[axisName]Label\" (e.g. .xaxisLabel, .y2axisLabel, etc). You can use standard CSS properties to customize their appearance. In canvas mode, you can set font size, family, and colour through flot options (see below). Example $(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); }); Usage flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black) Compatibility flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas. License flot-axislabels is released under the terms of the MIT License .","title":"Index"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#example","text":"$(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); });","title":"Example"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#usage","text":"flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black)","title":"Usage"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#compatibility","text":"flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas.","title":"Compatibility"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#license","text":"flot-axislabels is released under the terms of the MIT License .","title":"License"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/","text":"metisMenu Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr Installation npm npm install metismenu Bower bower install metisMenu Download Usage Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu (); Options toggle Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false }); doubleTapToGo Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true }); DEMO Contains a simple HTML file to demonstrate metisMenu plugin. Release History DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9 Author metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f | License MIT License","title":"metisMenu [![Build Status](https://secure.travis-ci.org/onokumus/metisMenu.png?branch=master)](https://travis-ci.org/onokumus/metisMenu)"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#metismenu","text":"Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr","title":"metisMenu"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#installation","text":"npm npm install metismenu Bower bower install metisMenu Download","title":"Installation"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#usage","text":"Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu ();","title":"Usage"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#options","text":"","title":"Options"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#toggle","text":"Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false });","title":"toggle"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#doubletaptogo","text":"Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true });","title":"doubleTapToGo"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#demo","text":"Contains a simple HTML file to demonstrate metisMenu plugin.","title":"DEMO"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#release-history","text":"DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9","title":"Release History"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#author","text":"metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f |","title":"Author"},{"location":"fromwatsons/t3-reports/sbadmin2-1.0.7/bower_components/metisMenu/#license","text":"MIT License","title":"License"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/","text":"Start Bootstrap - SB Admin 2 SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap . Getting Started To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2 Bugs and Issues Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap . Creator Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton . Copyright and License Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"[Start Bootstrap](http://startbootstrap.com/) - [SB Admin 2](http://startbootstrap.com/template-overviews/sb-admin-2/)"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/#start-bootstrap-sb-admin-2","text":"SB Admin 2 is an open source, admin dashboard template for Bootstrap created by Start Bootstrap .","title":"Start Bootstrap - SB Admin 2"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/#getting-started","text":"To use this template, choose one of the following options to get started: * Download the latest release on Start Bootstrap * Fork this repository on GitHub * Install via bower using bower install startbootstrap-sb-admin-2","title":"Getting Started"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/#bugs-and-issues","text":"Have a bug or an issue with this template? Open a new issue here on GitHub or leave a comment on the template overview page at Start Bootstrap .","title":"Bugs and Issues"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/#creator","text":"Start Bootstrap was created by and is maintained by David Miller , Managing Parter at Iron Summit Media Strategies . https://twitter.com/davidmillerskt https://github.com/davidtmiller Start Bootstrap is based on the Bootstrap framework created by Mark Otto and Jacob Thorton .","title":"Creator"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/#copyright-and-license","text":"Copyright 2013-2015 Iron Summit Media Strategies, LLC. Code released under the Apache 2.0 license.","title":"Copyright and License"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/","text":"Bootstrap Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com ! Table of contents Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license Quick start Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more. What's included Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme. Bugs and feature requests Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue . Documentation Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally. Running documentation locally If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation . Documentation for previous releases Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download. Contributing Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org . Community Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability. Versioning For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible. Creators Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat Copyright and license Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"[Bootstrap](http://getbootstrap.com)"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bootstrap","text":"Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created by Mark Otto and Jacob Thornton , and maintained by the core team with the massive support and involvement of the community. To get started, check out http://getbootstrap.com !","title":"Bootstrap"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#table-of-contents","text":"Quick start Bugs and feature requests Documentation Contributing Community Versioning Creators Copyright and license","title":"Table of contents"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#quick-start","text":"Five quick start options are available: Download the latest release . Clone the repo: git clone https://github.com/twbs/bootstrap.git . Install with Bower : bower install bootstrap . Install with npm : npm install bootstrap . Install with Meteor : meteor add twbs:bootstrap . Read the Getting started page for information on the framework contents, templates and examples, and more.","title":"Quick start"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#whats-included","text":"Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You'll see something like this: bootstrap/ \u251c\u2500\u2500 css/ \u2502 \u251c\u2500\u2500 bootstrap.css \u2502 \u251c\u2500\u2500 bootstrap.css.map \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css \u2502 \u251c\u2500\u2500 bootstrap-theme.css.map \u2502 \u2514\u2500\u2500 bootstrap-theme.min.css \u251c\u2500\u2500 js/ \u2502 \u251c\u2500\u2500 bootstrap.js \u2502 \u2514\u2500\u2500 bootstrap.min.js \u2514\u2500\u2500 fonts/ \u251c\u2500\u2500 glyphicons-halflings-regular.eot \u251c\u2500\u2500 glyphicons-halflings-regular.svg \u251c\u2500\u2500 glyphicons-halflings-regular.ttf \u251c\u2500\u2500 glyphicons-halflings-regular.woff \u2514\u2500\u2500 glyphicons-halflings-regular.woff2 We provide compiled CSS and JS ( bootstrap.* ), as well as compiled and minified CSS and JS ( bootstrap.min.* ). CSS source maps ( bootstrap.*.map ) are available for use with certain browsers' developer tools. Fonts from Glyphicons are included, as is the optional Bootstrap theme.","title":"What's included"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#bugs-and-feature-requests","text":"Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue .","title":"Bugs and feature requests"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation","text":"Bootstrap's documentation, included in this repo in the root directory, is built with Jekyll and publicly hosted on GitHub Pages at http://getbootstrap.com . The docs may also be run locally.","title":"Documentation"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#running-documentation-locally","text":"If necessary, install Jekyll (requires v2.5.x). Windows users: Read this unofficial guide to get Jekyll up and running without problems. Install the Ruby-based syntax highlighter, Rouge , with gem install rouge . From the root /bootstrap directory, run jekyll serve in the command line. Open http://localhost:9001 in your browser, and voil\u00e0. Learn more about using Jekyll by reading its documentation .","title":"Running documentation locally"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#documentation-for-previous-releases","text":"Documentation for v2.3.2 has been made available for the time being at http://getbootstrap.com/2.3.2/ while folks transition to Bootstrap 3. Previous releases and their documentation are also available for download.","title":"Documentation for previous releases"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#contributing","text":"Please read through our contributing guidelines . Included are directions for opening issues, coding standards, and notes on development. Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests . All HTML and CSS should conform to the Code Guide , maintained by Mark Otto . Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at http://editorconfig.org .","title":"Contributing"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#community","text":"Keep track of development and community news. Follow @getbootstrap on Twitter . Read and subscribe to The Official Bootstrap Blog . Chat with fellow Bootstrappers in IRC. On the irc.freenode.net server, in the ##bootstrap channel. Implementation help may be found at Stack Overflow (tagged twitter-bootstrap-3 ). Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.","title":"Community"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#versioning","text":"For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines . Sometimes we screw up, but we'll adhere to those rules whenever possible.","title":"Versioning"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#creators","text":"Mark Otto https://twitter.com/mdo https://github.com/mdo Jacob Thornton https://twitter.com/fat https://github.com/fat","title":"Creators"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/bootstrap/#copyright-and-license","text":"Code and documentation copyright 2011-2015 Twitter, Inc. Code released under the MIT license . Docs released under Creative Commons .","title":"Copyright and license"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/","text":"Flot About Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot. Installation Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling. Basic usage Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods. What's with the name? First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks. Notes about the examples In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Flot [![Build status](https://travis-ci.org/flot/flot.png)](https://travis-ci.org/flot/flot)"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/#flot","text":"","title":"Flot"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/#about","text":"Flot is a Javascript plotting library for jQuery. Read more at the website: http://www.flotcharts.org/ Take a look at the the examples in examples/index.html; they should give a good impression of what Flot can do, and the source code of the examples is probably the fastest way to learn how to use Flot.","title":"About"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/#installation","text":"Just include the Javascript file after you've included jQuery. Generally, all browsers that support the HTML5 canvas tag are supported. For support for Internet Explorer < 9, you can use Excanvas , a canvas emulator; this is used in the examples bundled with Flot. You just include the excanvas script like this: <!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]--> If it's not working on your development IE 6.0, check that it has support for VML which Excanvas is relying on. It appears that some stripped down versions used for test environments on virtual machines lack the VML support. You can also try using Flashcanvas , which uses Flash to do the emulation. Although Flash can be a bit slower to load than VML, if you've got a lot of points, the Flash version can be much faster overall. Flot contains some wrapper code for activating Excanvas which Flashcanvas is compatible with. You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling.","title":"Installation"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/#basic-usage","text":"Create a placeholder div to put the graph in: < div id = \"placeholder\" ></ div > You need to set the width and height of this div, otherwise the plot library doesn't know how to scale the graph. You can do it inline like this: < div id = \"placeholder\" style = \"width:600px;height:300px\" ></ div > You can also do it with an external stylesheet. Make sure that the placeholder isn't within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it'll throw an exception). Then when the div is ready in the DOM, which is usually on document ready, run the plot function: $ . plot ( $ ( \"#placeholder\" ), data , options ); Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the API reference . Here's a quick example that'll draw a line from (0, 0) to (1, 1): $ . plot ( $ ( \"#placeholder\" ), [ [[ 0 , 0 ], [ 1 , 1 ]] ], { yaxis : { max : 1 } }); The plot function immediately draws the chart and then returns a plot object with a couple of methods.","title":"Basic usage"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/#whats-with-the-name","text":"First: it's pronounced with a short o, like \"plot\". Not like \"flawed\". So \"Flot\" rhymes with \"plot\". And if you look up \"flot\" in a Danish-to-English dictionary, some of the words that come up are \"good-looking\", \"attractive\", \"stylish\", \"smart\", \"impressive\", \"extravagant\". One of the main goals with Flot is pretty looks.","title":"What's with the name?"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/#notes-about-the-examples","text":"In order to have a useful, functional example of time-series plots using time zones, date.js from timezone-js (released under the Apache 2.0 license) and the Olson time zone database (released to the public domain) have been included in the examples directory. They are used in examples/axes-time-zones/index.html.","title":"Notes about the examples"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/","text":"Flot Reference Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number Introduction Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied. Data Format The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ] Plot Options All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options ); Customizing the legend legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) } Customizing the axes xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places. Multiple axes If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\". Time series data Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between. Customizing the data series series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme. Customizing the grid grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting. Specifying gradients A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE. Plot Methods The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change. Hooks In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info. Plugins Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy. Version number The version number of Flot is available in $.plot.version .","title":"Flot Reference #"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#flot-reference","text":"Table of Contents Introduction | Data Format | Plot Options | Customizing the legend | Customizing the axes | Multiple axes | Time series data | Customizing the data series | Customizing the grid | Specifying gradients | Plot Methods | Hooks | Plugins | Version number","title":"Flot Reference"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#introduction","text":"Consider a call to the plot function: var plot = $ . plot ( placeholder , data , options ) The placeholder is a jQuery object or DOM element or jQuery expression that the plot will be put into. This placeholder needs to have its width and height set as explained in the README (go read that now if you haven't, it's short). The plot will modify some properties of the placeholder so it's recommended you simply pass in a div that you don't use for anything else. Make sure you check any fancy styling you apply to the div, e.g. background images have been reported to be a problem on IE 7. The plot function can also be used as a jQuery chainable property. This form naturally can't return the plot object directly, but you can still access it via the 'plot' data key, like this: var plot = $ ( \"#placeholder\" ). plot ( data , options ). data ( \"plot\" ); The format of the data is documented below, as is the available options. The plot object returned from the call has some methods you can call. These are documented separately below. Note that in general Flot gives no guarantees if you change any of the objects you pass in to the plot function or get out of it since they're not necessarily deep-copied.","title":"Introduction"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#data-format","text":"The data is an array of data series: [ series1 , series2 , ... ] A series can either be raw data or an object with properties. The raw data format is an array of points: [ [ x1 , y1 ], [ x2 , y2 ], ... ] E.g. [ [ 1 , 3 ], [ 2 , 14.01 ], [ 3.5 , 3.14 ] ] Note that to simplify the internal logic in Flot both the x and y values must be numbers (even if specifying time series, see below for how to do this). This is a common problem because you might retrieve data from the database and serialize them directly to JSON without noticing the wrong type. If you're getting mysterious errors, double check that you're inputting numbers and not strings. If a null is specified as a point or if one of the coordinates is null or couldn't be converted to a number, the point is ignored when drawing. As a special case, a null value for lines is interpreted as a line segment end, i.e. the points before and after the null value are not connected. Lines and points take two coordinates. For filled lines and bars, you can specify a third coordinate which is the bottom of the filled area/bar (defaults to 0). The format of a single series object is as follows: { color : color or number data : rawdata label : string lines : specific lines options bars : specific bars options points : specific points options xaxis : number yaxis : number clickable : boolean hoverable : boolean shadowSize : number highlightColor : color or number } You don't have to specify any of them except the data, the rest are options that will get default values. Typically you'd only specify label and data, like this: { label : \"y = 3\" , data : [[ 0 , 3 ], [ 10 , 3 ]] } The label is used for the legend, if you don't specify one, the series will not show up in the legend. If you don't specify color, the series will get a color from the auto-generated colors. The color is either a CSS color specification (like \"rgb(255, 100, 123)\") or an integer that specifies which of auto-generated colors to select, e.g. 0 will get color no. 0, etc. The latter is mostly useful if you let the user add and remove series, in which case you can hard-code the color index to prevent the colors from jumping around between the series. The \"xaxis\" and \"yaxis\" options specify which axis to use. The axes are numbered from 1 (default), so { yaxis: 2} means that the series should be plotted against the second y axis. \"clickable\" and \"hoverable\" can be set to false to disable interactivity for specific series if interactivity is turned on in the plot, see below. The rest of the options are all documented below as they are the same as the default options passed in via the options parameter in the plot commmand. When you specify them for a specific data series, they will override the default options for the plot for that data series. Here's a complete example of a simple data specification: [ { label : \"Foo\" , data : [ [ 10 , 1 ], [ 17 , - 14 ], [ 30 , 5 ] ] }, { label : \"Bar\" , data : [ [ 11 , 13 ], [ 19 , 11 ], [ 30 , - 7 ] ] } ]","title":"Data Format"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-options","text":"All options are completely optional. They are documented individually below, to change them you just specify them in an object, e.g. var options = { series : { lines : { show : true }, points : { show : true } } }; $ . plot ( placeholder , data , options );","title":"Plot Options"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-legend","text":"legend : { show : boolean labelFormatter : null or ( fn : string , series object -> string ) labelBoxBorderColor : color noColumns : number position : \"ne\" or \"nw\" or \"se\" or \"sw\" margin : number of pixels or [ x margin , y margin ] backgroundColor : null or color backgroundOpacity : number between 0 and 1 container : null or jQuery object / DOM element / jQuery expression sorted : null / false , true , \"ascending\" , \"descending\" , \"reverse\" , or a comparator } The legend is generated as a table with the data series labels and small label boxes with the color of the series. If you want to format the labels in some way, e.g. make them to links, you can pass in a function for \"labelFormatter\". Here's an example that makes them clickable: labelFormatter : function ( label , series ) { // series is the series object for the label return '<a href=\"#' + label + '\">' + label + '</a>' ; } To prevent a series from showing up in the legend, simply have the function return null. \"noColumns\" is the number of columns to divide the legend table into. \"position\" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). \"backgroundColor\" and \"backgroundOpacity\" specifies the background. The default is a partly transparent auto-detected background. If you want the legend to appear somewhere else in the DOM, you can specify \"container\" as a jQuery object/expression to put the legend table into. The \"position\" and \"margin\" etc. options will then be ignored. Note that Flot will overwrite the contents of the container. Legend entries appear in the same order as their series by default. If \"sorted\" is \"reverse\" then they appear in the opposite order from their series. To sort them alphabetically, you can specify true, \"ascending\" or \"descending\", where true and \"ascending\" are equivalent. You can also provide your own comparator function that accepts two objects with \"label\" and \"color\" properties, and returns zero if they are equal, a positive value if the first is greater than the second, and a negative value if the first is less than the second. sorted : function ( a , b ) { // sort alphabetically in ascending order return a . label == b . label ? 0 : ( a . label > b . label ? 1 : - 1 ) }","title":"Customizing the legend"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-axes","text":"xaxis , yaxis : { show : null or true / false position : \"bottom\" or \"top\" or \"left\" or \"right\" mode : null or \"time\" ( \"time\" requires jquery . flot . time . js plugin ) timezone : null , \"browser\" or timezone ( only makes sense for mode : \"time\" ) color : null or color spec tickColor : null or color spec font : null or font spec object min : null or number max : null or number autoscaleMargin : null or number transform : null or fn : number -> number inverseTransform : null or fn : number -> number ticks : null or number or ticks array or ( fn : axis -> ticks array ) tickSize : number or array minTickSize : number or array tickFormatter : ( fn : number , object -> string ) or string tickDecimals : null or number labelWidth : null or number labelHeight : null or number reserveSpace : null or true tickLength : null or number alignTicksWithAxis : null or number } All axes have the same kind of options. The following describes how to configure one axis, see below for what to do if you've got more than one x axis or y axis. If you don't set the \"show\" option (i.e. it is null), visibility is auto-detected, i.e. the axis will show up if there's data associated with it. You can override this by setting the \"show\" option to true or false. The \"position\" option specifies where the axis is placed, bottom or top for x axes, left or right for y axes. The \"mode\" option determines how the data is interpreted, the default of null means as decimal numbers. Use \"time\" for time series data; see the time series data section. The time plugin (jquery.flot.time.js) is required for time series support. The \"color\" option determines the color of the line and ticks for the axis, and defaults to the grid color with transparency. For more fine-grained control you can also set the color of the ticks separately with \"tickColor\". You can customize the font and color used to draw the axis tick labels with CSS or directly via the \"font\" option. When \"font\" is null - the default - each tick label is given the 'flot-tick-label' class. For compatibility with Flot 0.7 and earlier the labels are also given the 'tickLabel' class, but this is deprecated and scheduled to be removed with the release of version 1.0.0. To enable more granular control over styles, labels are divided between a set of text containers, with each holding the labels for one axis. These containers are given the classes 'flot-[x|y]-axis', and 'flot-[x|y]#-axis', where '#' is the number of the axis when there are multiple axes. For example, the x-axis labels for a simple plot with only a single x-axis might look like this: < div class = 'flot-x-axis flot-x1-axis' > < div class = 'flot-tick-label' > January 2013 </ div > ... </ div > For direct control over label styles you can also provide \"font\" as an object with this format: { size : 11 , lineHeight : 13 , style : \"italic\" , weight : \"bold\" , family : \"sans-serif\" , variant : \"small-caps\" , color : \"#545454\" } The size and lineHeight must be expressed in pixels; CSS units such as 'em' or 'smaller' are not allowed. The options \"min\"/\"max\" are the precise minimum/maximum value on the scale. If you don't specify either of them, a value will automatically be chosen based on the minimum/maximum data values. Note that Flot always examines all the data values you feed to it, even if a restriction on another axis may make some of them invisible (this makes interactive use more stable). The \"autoscaleMargin\" is a bit esoteric: it's the fraction of margin that the scaling algorithm will add to avoid that the outermost points ends up on the grid border. Note that this margin is only applied when a min or max value is not explicitly set. If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. The default value is \"null\" for the x axes and 0.02 for y axes which seems appropriate for most cases. \"transform\" and \"inverseTransform\" are callbacks you can put in to change the way the data is drawn. You can design a function to compress or expand certain parts of the axis non-linearly, e.g. suppress weekends or compress far away points with a logarithm or some other means. When Flot draws the plot, each value is first put through the transform function. Here's an example, the x axis can be turned into a natural logarithm axis with the following code: xaxis : { transform : function ( v ) { return Math . log ( v ); }, inverseTransform : function ( v ) { return Math . exp ( v ); } } Similarly, for reversing the y axis so the values appear in inverse order: yaxis : { transform : function ( v ) { return - v ; }, inverseTransform : function ( v ) { return - v ; } } Note that for finding extrema, Flot assumes that the transform function does not reorder values (it should be monotone). The inverseTransform is simply the inverse of the transform function (so v == inverseTransform(transform(v)) for all relevant v). It is required for converting from canvas coordinates to data coordinates, e.g. for a mouse interaction where a certain pixel is clicked. If you don't use any interactive features of Flot, you may not need it. The rest of the options deal with the ticks. If you don't specify any ticks, a tick generator algorithm will make some for you. The algorithm has two passes. It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. Then it generates the ticks. You can specify how many ticks the algorithm aims for by setting \"ticks\" to a number. The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, you might get five if that fits better with the rounding. If you don't want any ticks at all, set \"ticks\" to 0 or an empty array. Another option is to skip the rounding part and directly set the tick interval size with \"tickSize\". If you set it to 2, you'll get ticks at 2, 4, 6, etc. Alternatively, you can specify that you just don't want ticks at a size less than a specific tick size with \"minTickSize\". Note that for time series, the format is an array like [2, \"month\"], see the next section. If you want to completely override the tick algorithm, you can specify an array for \"ticks\", either like this: ticks : [ 0 , 1.2 , 2.4 ] Or like this where the labels are also customized: ticks : [[ 0 , \"zero\" ], [ 1.2 , \"one mark\" ], [ 2.4 , \"two marks\" ]] You can mix the two if you like. For extra flexibility you can specify a function as the \"ticks\" parameter. The function will be called with an object with the axis min and max and should return a ticks array. Here's a simplistic tick generator that spits out intervals of pi, suitable for use on the x axis for trigonometric functions: function piTickGenerator ( axis ) { var res = [], i = Math . floor ( axis . min / Math . PI ); do { var v = i * Math . PI ; res . push ([ v , i + \"\\u03c0\" ]); ++ i ; } while ( v < axis . max ); return res ; } You can control how the ticks look like with \"tickDecimals\", the number of decimals to display (default is auto-detected). Alternatively, for ultimate control over how ticks are formatted you can provide a function to \"tickFormatter\". The function is passed two parameters, the tick value and an axis object with information, and should return a string. The default formatter looks like this: function formatter ( val , axis ) { return val . toFixed ( axis . tickDecimals ); } The axis object has \"min\" and \"max\" with the range of the axis, \"tickDecimals\" with the number of decimals to round the value to and \"tickSize\" with the size of the interval between ticks as calculated by the automatic axis scaling algorithm (or specified by you). Here's an example of a custom formatter: function suffixFormatter ( val , axis ) { if ( val > 1000000 ) return ( val / 1000000 ). toFixed ( axis . tickDecimals ) + \" MB\" ; else if ( val > 1000 ) return ( val / 1000 ). toFixed ( axis . tickDecimals ) + \" kB\" ; else return val . toFixed ( axis . tickDecimals ) + \" B\" ; } \"labelWidth\" and \"labelHeight\" specifies a fixed size of the tick labels in pixels. They're useful in case you need to align several plots. \"reserveSpace\" means that even if an axis isn't shown, Flot should reserve space for it - it is useful in combination with labelWidth and labelHeight for aligning multi-axis charts. \"tickLength\" is the length of the tick lines in pixels. By default, the innermost axes will have ticks that extend all across the plot, while any extra axes use small ticks. A value of null means use the default, while a number means small ticks of that length - set it to 0 to hide the lines completely. If you set \"alignTicksWithAxis\" to the number of another axis, e.g. alignTicksWithAxis: 1, Flot will ensure that the autogenerated ticks of this axis are aligned with the ticks of the other axis. This may improve the looks, e.g. if you have one y axis to the left and one to the right, because the grid lines will then match the ticks in both ends. The trade-off is that the forced ticks won't necessarily be at natural places.","title":"Customizing the axes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#multiple-axes","text":"If you need more than one x axis or y axis, you need to specify for each data series which axis they are to use, as described under the format of the data series, e.g. { data: [...], yaxis: 2 } specifies that a series should be plotted against the second y axis. To actually configure that axis, you can't use the xaxis/yaxis options directly - instead there are two arrays in the options: xaxes : [] yaxes : [] Here's an example of configuring a single x axis and two y axes (we can leave options of the first y axis empty as the defaults are fine): { xaxes : [ { position : \"top\" } ], yaxes : [ { }, { position : \"right\" , min : 20 } ] } The arrays get their default values from the xaxis/yaxis settings, so say you want to have all y axes start at zero, you can simply specify yaxis: { min: 0 } instead of adding a min parameter to all the axes. Generally, the various interfaces in Flot dealing with data points either accept an xaxis/yaxis parameter to specify which axis number to use (starting from 1), or lets you specify the coordinate directly as x2/x3/... or x2axis/x3axis/... instead of \"x\" or \"xaxis\".","title":"Multiple axes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#time-series-data","text":"Please note that it is now required to include the time plugin, jquery.flot.time.js, for time series support. Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. For many cases, Flot abstracts most of this away, but it can still be a bit difficult to get the data into Flot. So we'll first discuss the data format. The time series support in Flot is based on Javascript timestamps, i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. This is a number, not a Date object. A Javascript timestamp is the number of milliseconds since January 1, 1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000! You can see a timestamp like this alert (( new Date ()). getTime ()) There are different schools of thought when it comes to display of timestamps. Many will want the timestamps to be displayed according to a certain time zone, usually the time zone in which the data has been produced. Some want the localized experience, where the timestamps are displayed according to the local time of the visitor. Flot supports both. Optionally you can include a third-party library to get additional timezone support. Default behavior is that Flot always displays timestamps according to UTC. The reason being that the core Javascript Date object does not support other fixed time zones. Often your data is at another time zone, so it may take a little bit of tweaking to work around this limitation. The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200. In PHP you can get an appropriate timestamp with: strtotime(\"2002-02-20 UTC\") * 1000 In Python you can get it with something like: calendar . timegm ( datetime_object . timetuple ()) * 1000 In Ruby you can get it using the #to_i method on the Time object. If you're using the active_support gem (default for Ruby on Rails applications) #to_i is also available on the DateTime and ActiveSupport::TimeWithZone objects. You simply need to multiply the result by 1000: Time . now . to_i * 1000 # => 1383582043000 # ActiveSupport examples: DateTime . now . to_i * 1000 # => 1383582043000 ActiveSupport :: TimeZone . new ( 'Asia/Shanghai' ) . now . to_i * 1000 # => 1383582043000 In .NET you can get it with something like: public static int GetJavascriptTimestamp(System.DateTime input) { System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks); System.DateTime time = input.Subtract(span); return (long)(time.Ticks / 10000); } Javascript also has some support for parsing date strings, so it is possible to generate the timestamps manually client-side. If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. But you can fix up the timestamps by adding the time zone offset, e.g. for UTC+0200 you would add 2 hours to the UTC timestamp you got. Then it'll look right on the plot. Most programming environments have some means of getting the timezone offset for a specific date (note that you need to get the offset for each individual timestamp to account for daylight savings). The alternative with core Javascript is to interpret the timestamps according to the time zone that the visitor is in, which means that the ticks will shift with the time zone and daylight savings of each visitor. This behavior is enabled by setting the axis option \"timezone\" to the value \"browser\". If you need more time zone functionality than this, there is still another option. If you include the \"timezone-js\" library https://github.com/mde/timezone-js in the page and set axis.timezone to a value recognized by said library, Flot will use timezone-js to interpret the timestamps according to that time zone. Once you've gotten the timestamps into the data and specified \"time\" as the axis mode, Flot will automatically generate relevant ticks and format them. As always, you can tweak the ticks via the \"ticks\" option - just remember that the values should be timestamps (numbers), not Date objects. Tick generation and formatting can also be controlled separately through the following axis options: minTickSize : array timeformat : null or format string monthNames : null or array of size 12 of strings dayNames : null or array of size 7 of strings twelveHourClock : boolean Here \"timeformat\" is a format string to use. You might use it like this: xaxis : { mode : \"time\" , timeformat : \"%Y/%m/%d\" } This will result in tick labels like \"2000/12/24\". A subset of the standard strftime specifiers are supported (plus the nonstandard %q): % a : weekday name ( customizable ) % b : month name ( customizable ) % d : day of month , zero - padded ( 01 - 31 ) % e : day of month , space - padded ( 1 - 31 ) % H : hours , 24 - hour time , zero - padded ( 00 - 23 ) % I : hours , 12 - hour time , zero - padded ( 01 - 12 ) % m : month , zero - padded ( 01 - 12 ) % M : minutes , zero - padded ( 00 - 59 ) % q : quarter ( 1 - 4 ) % S : seconds , zero - padded ( 00 - 59 ) % y : year ( two digits ) % Y : year ( four digits ) % p : am / pm % P : AM / PM ( uppercase version of % p ) % w : weekday as number ( 0 - 6 , 0 being Sunday ) Flot 0.8 switched from %h to the standard %H hours specifier. The %h specifier is still available, for backwards-compatibility, but is deprecated and scheduled to be removed permanently with the release of version 1.0. You can customize the month names with the \"monthNames\" option. For instance, for Danish you might specify: monthNames : [ \"jan\" , \"feb\" , \"mar\" , \"apr\" , \"maj\" , \"jun\" , \"jul\" , \"aug\" , \"sep\" , \"okt\" , \"nov\" , \"dec\" ] Similarly you can customize the weekday names with the \"dayNames\" option. An example in French: dayNames : [ \"dim\" , \"lun\" , \"mar\" , \"mer\" , \"jeu\" , \"ven\" , \"sam\" ] If you set \"twelveHourClock\" to true, the autogenerated timestamps will use 12 hour AM/PM timestamps instead of 24 hour. This only applies if you have not set \"timeformat\". Use the \"%I\" and \"%p\" or \"%P\" options if you want to build your own format string with 12-hour times. If the Date object has a strftime property (and it is a function), it will be used instead of the built-in formatter. Thus you can include a strftime library such as http://hacks.bluesmoon.info/strftime/ for more powerful date/time formatting. If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. Here's a simple example which will format December 24 as 24/12: tickFormatter : function ( val , axis ) { var d = new Date ( val ); return d . getUTCDate () + \"/\" + ( d . getUTCMonth () + 1 ); } Note that for the time mode \"tickSize\" and \"minTickSize\" are a bit special in that they are arrays on the form \"[value, unit]\" where unit is one of \"second\", \"minute\", \"hour\", \"day\", \"month\" and \"year\". So you can specify minTickSize : [ 1 , \"month\" ] to get a tick interval size of at least 1 month and correspondingly, if axis.tickSize is [2, \"day\"] in the tick formatter, the ticks have been produced with two days in-between.","title":"Time series data"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-data-series","text":"series : { lines , points , bars : { show : boolean lineWidth : number fill : boolean or number fillColor : null or color / gradient } lines , bars : { zero : boolean } points : { radius : number symbol : \"circle\" or function } bars : { barWidth : number align : \"left\" , \"right\" or \"center\" horizontal : boolean } lines : { steps : boolean } shadowSize : number highlightColor : color or number } colors : [ color1 , color2 , ... ] The options inside \"series: {}\" are copied to each of the series. So you can specify that all series should have bars by putting it in the global options, or override it for individual series by specifying bars in a particular the series object in the array of data. The most important options are \"lines\", \"points\" and \"bars\" that specify whether and how lines, points and bars should be shown for each data series. In case you don't specify anything at all, Flot will default to showing lines (you can turn this off with lines: { show: false }). You can specify the various types independently of each other, and Flot will happily draw each of them in turn (this is probably only useful for lines and points), e.g. var options = { series : { lines : { show : true , fill : true , fillColor : \"rgba(255, 255, 255, 0.8)\" }, points : { show : true , fill : false } } }; \"lineWidth\" is the thickness of the line or outline in pixels. You can set it to 0 to prevent a line or outline from being drawn; this will also hide the shadow. \"fill\" is whether the shape should be filled. For lines, this produces area graphs. You can use \"fillColor\" to specify the color of the fill. If \"fillColor\" evaluates to false (default for everything except points which are filled with white), the fill color is auto-set to the color of the data series. You can adjust the opacity of the fill by setting fill to a number between 0 (fully transparent) and 1 (fully opaque). For bars, fillColor can be a gradient, see the gradient documentation below. \"barWidth\" is the width of the bars in units of the x axis (or the y axis if \"horizontal\" is true), contrary to most other measures that are specified in pixels. For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. \"align\" specifies whether a bar should be left-aligned (default), right-aligned or centered on top of the value it represents. When \"horizontal\" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; note that the bar end points are still defined in the same way so you'll probably want to swap the coordinates if you've been plotting vertical bars first. Area and bar charts normally start from zero, regardless of the data's range. This is because they convey information through size, and starting from a different value would distort their meaning. In cases where the fill is purely for decorative purposes, however, \"zero\" allows you to override this behavior. It defaults to true for filled lines and bars; setting it to false tells the series to use the same automatic scaling as an un-filled line. For lines, \"steps\" specifies whether two adjacent data points are connected with a straight (possibly diagonal) line or with first a horizontal and then a vertical line. Note that this transforms the data by adding extra points. For points, you can specify the radius and the symbol. The only built-in symbol type is circles, for other types you can use a plugin or define them yourself by specifying a callback: function cross ( ctx , x , y , radius , shadow ) { var size = radius * Math . sqrt ( Math . PI ) / 2 ; ctx . moveTo ( x - size , y - size ); ctx . lineTo ( x + size , y + size ); ctx . moveTo ( x - size , y + size ); ctx . lineTo ( x + size , y - size ); } The parameters are the drawing context, x and y coordinates of the center of the point, a radius which corresponds to what the circle would have used and whether the call is to draw a shadow (due to limited canvas support, shadows are currently faked through extra draws). It's good practice to ensure that the area covered by the symbol is the same as for the circle with the given radius, this ensures that all symbols have approximately the same visual weight. \"shadowSize\" is the default size of shadows in pixels. Set it to 0 to remove shadows. \"highlightColor\" is the default color of the translucent overlay used to highlight the series when the mouse hovers over it. The \"colors\" array specifies a default color theme to get colors for the data series from. You can specify as many colors as you like, like this: colors : [ \"#d18b2c\" , \"#dba255\" , \"#919733\" ] If there are more data series than colors, Flot will try to generate extra colors by lightening and darkening colors in the theme.","title":"Customizing the data series"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#customizing-the-grid","text":"grid : { show : boolean aboveData : boolean color : color backgroundColor : color / gradient or null margin : number or margin object labelMargin : number axisMargin : number markings : array of markings or ( fn : axes -> array of markings ) borderWidth : number or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different widths borderColor : color or null or object with \"top\" , \"right\" , \"bottom\" and \"left\" properties with different colors minBorderMargin : number or null clickable : boolean hoverable : boolean autoHighlight : boolean mouseActiveRadius : number } interaction : { redrawOverlayInterval : number or - 1 } The grid is the thing with the axes and a number of ticks. Many of the things in the grid are configured under the individual axes, but not all. \"color\" is the color of the grid itself whereas \"backgroundColor\" specifies the background color inside the grid area, here null means that the background is transparent. You can also set a gradient, see the gradient documentation below. You can turn off the whole grid including tick labels by setting \"show\" to false. \"aboveData\" determines whether the grid is drawn above the data or below (below is default). \"margin\" is the space in pixels between the canvas edge and the grid, which can be either a number or an object with individual margins for each side, in the form: margin : { top : top margin in pixels left : left margin in pixels bottom : bottom margin in pixels right : right margin in pixels } \"labelMargin\" is the space in pixels between tick labels and axis line, and \"axisMargin\" is the space in pixels between axes when there are two next to each other. \"borderWidth\" is the width of the border around the plot. Set it to 0 to disable the border. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different widths. You can also set \"borderColor\" if you want the border to have a different color than the grid lines. Set it to an object with \"top\", \"right\", \"bottom\" and \"left\" properties to use different colors. \"minBorderMargin\" controls the default minimum margin around the border - it's used to make sure that points aren't accidentally clipped by the canvas edge so by default the value is computed from the point radius. \"markings\" is used to draw simple lines and rectangular areas in the background of the plot. You can either specify an array of ranges on the form { xaxis: { from, to }, yaxis: { from, to } } (with multiple axes, you can specify coordinates for other axes instead, e.g. as x2axis/x3axis/...) or with a function that returns such an array given the axes for the plot in an object as the first parameter. You can set the color of markings by specifying \"color\" in the ranges object. Here's an example array: markings : [ { xaxis : { from : 0 , to : 2 }, yaxis : { from : 10 , to : 10 }, color : \"#bb0000\" }, ... ] If you leave out one of the values, that value is assumed to go to the border of the plot. So for example if you only specify { xaxis: { from: 0, to: 2 } } it means an area that extends from the top to the bottom of the plot in the x range 0-2. A line is drawn if from and to are the same, e.g. markings : [ { yaxis : { from : 1 , to : 1 } }, ... ] would draw a line parallel to the x axis at y = 1. You can control the line width with \"lineWidth\" in the range object. An example function that makes vertical stripes might look like this: markings : function ( axes ) { var markings = []; for ( var x = Math . floor ( axes . xaxis . min ); x < axes . xaxis . max ; x += 2 ) markings . push ({ xaxis : { from : x , to : x + 1 } }); return markings ; } If you set \"clickable\" to true, the plot will listen for click events on the plot area and fire a \"plotclick\" event on the placeholder with a position and a nearby data item object as parameters. The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates. Likewise, if you set \"hoverable\" to true, the plot will listen for mouse move events on the plot area and fire a \"plothover\" event with the same parameters as the \"plotclick\" event. If \"autoHighlight\" is true (the default), nearby data items are highlighted automatically. If needed, you can disable highlighting and control it yourself with the highlight/unhighlight plot methods described elsewhere. You can use \"plotclick\" and \"plothover\" events like this: $ . plot ( $ ( \"#placeholder\" ), [ d ], { grid : { clickable : true } }); $ ( \"#placeholder\" ). bind ( \"plotclick\" , function ( event , pos , item ) { alert ( \"You clicked at \" + pos . x + \", \" + pos . y ); // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ... // if you need global screen coordinates, they are pos.pageX, pos.pageY if ( item ) { highlight ( item . series , item . datapoint ); alert ( \"You clicked a point!\" ); } }); The item object in this example is either null or a nearby object on the form: item : { datapoint : the point , e . g . [ 0 , 2 ] dataIndex : the index of the point in the data array series : the series object seriesIndex : the index of the series pageX , pageY : the global screen coordinates of the point } For instance, if you have specified the data like this $ . plot ( $ ( \"#placeholder\" ), [ { label : \"Foo\" , data : [[ 0 , 10 ], [ 7 , 3 ]] } ], ...); and the mouse is near the point (7, 3), \"datapoint\" is [7, 3], \"dataIndex\" will be 1, \"series\" is a normalized series object with among other things the \"Foo\" label in series.label and the color in series.color, and \"seriesIndex\" is 0. Note that plugins and options that transform the data can shift the indexes from what you specified in the original data array. If you use the above events to update some other information and want to clear out that info in case the mouse goes away, you'll probably also need to listen to \"mouseout\" events on the placeholder div. \"mouseActiveRadius\" specifies how far the mouse can be from an item and still activate it. If there are two or more points within this radius, Flot chooses the closest item. For bars, the top-most bar (from the latest specified data series) is chosen. If you want to disable interactivity for a specific data series, you can set \"hoverable\" and \"clickable\" to false in the options for that series, like this: { data : [...], label : \"Foo\" , clickable : false } \"redrawOverlayInterval\" specifies the maximum time to delay a redraw of interactive things (this works as a rate limiting device). The default is capped to 60 frames per second. You can set it to -1 to disable the rate limiting.","title":"Customizing the grid"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#specifying-gradients","text":"A gradient is specified like this: { colors : [ color1 , color2 , ... ] } For instance, you might specify a background on the grid going from black to gray like this: grid : { backgroundColor : { colors : [ \"#000\" , \"#999\" ] } } For the series you can specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color, e.g. { colors : [{ opacity : 0.8 }, { brightness : 0.6 , opacity : 0.8 } ] } where the first color simply has its alpha scaled, whereas the second is also darkened. For instance, for bars the following makes the bars gradually disappear, without outline: bars : { show : true , lineWidth : 0 , fill : true , fillColor : { colors : [ { opacity : 0.8 }, { opacity : 0.1 } ] } } Flot currently only supports vertical gradients drawn from top to bottom because that's what works with IE.","title":"Specifying gradients"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#plot-methods","text":"The Plot object returned from the plot function has some methods you can call: highlight(series, datapoint) Highlight a specific datapoint in the data series. You can either specify the actual objects, e.g. if you got them from a \"plotclick\" event, or you can specify the indices, e.g. highlight(1, 3) to highlight the fourth point in the second series (remember, zero-based indexing). unhighlight(series, datapoint) or unhighlight() Remove the highlighting of the point, same parameters as highlight. If you call unhighlight with no parameters, e.g. as plot.unhighlight(), all current highlights are removed. setData(data) You can use this to reset the data used. Note that axis scaling, ticks, legend etc. will not be recomputed (use setupGrid() to do that). You'll probably want to call draw() afterwards. You can use this function to speed up redrawing a small plot if you know that the axes won't change. Put in the new data with setData(newdata), call draw(), and you're good to go. Note that for large datasets, almost all the time is consumed in draw() plotting the data so in this case don't bother. setupGrid() Recalculate and set axis scaling, ticks, legend etc. Note that because of the drawing model of the canvas, this function will immediately redraw (actually reinsert in the DOM) the labels and the legend, but not the actual tick lines because they're drawn on the canvas. You need to call draw() to get the canvas redrawn. draw() Redraws the plot canvas. triggerRedrawOverlay() Schedules an update of an overlay canvas used for drawing interactive things like a selection and point highlights. This is mostly useful for writing plugins. The redraw doesn't happen immediately, instead a timer is set to catch multiple successive redraws (e.g. from a mousemove). You can get to the overlay by setting up a drawOverlay hook. width()/height() Gets the width and height of the plotting area inside the grid. This is smaller than the canvas or placeholder dimensions as some extra space is needed (e.g. for labels). offset() Returns the offset of the plotting area inside the grid relative to the document, useful for instance for calculating mouse positions (event.pageX/Y minus this offset is the pixel position inside the plot). pointOffset({ x: xpos, y: ypos }) Returns the calculated offset of the data point at (x, y) in data space within the placeholder div. If you are working with multiple axes, you can specify the x and y axis references, e.g. ```js o = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 }) // o.left and o.top now contains the offset within the div ```` resize() Tells Flot to resize the drawing canvas to the size of the placeholder. You need to run setupGrid() and draw() afterwards as canvas resizing is a destructive operation. This is used internally by the resize plugin. shutdown() Cleans up any event handlers Flot has currently registered. This is used internally. There are also some members that let you peek inside the internal workings of Flot which is useful in some cases. Note that if you change something in the objects returned, you're changing the objects used by Flot to keep track of its state, so be careful. getData() Returns an array of the data series currently used in normalized form with missing settings filled in according to the global options. So for instance to find out what color Flot has assigned to the data series, you could do this: var series = plot . getData (); for ( var i = 0 ; i < series . length ; ++ i ) alert ( series [ i ]. color ); A notable other interesting field besides color is datapoints which has a field \"points\" with the normalized data points in a flat array (the field \"pointsize\" is the increment in the flat array to get to the next point so for a dataset consisting only of (x,y) pairs it would be 2). getAxes() Gets an object with the axes. The axes are returned as the attributes of the object, so for instance getAxes().xaxis is the x axis. Various things are stuffed inside an axis object, e.g. you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis. Two other useful attributes are p2c and c2p, functions for transforming from data point space to the canvas plot space and back. Both returns values that are offset with the plot offset. Check the Flot source code for the complete set of attributes (or output an axis with console.log() and inspect it). With multiple axes, the extra axes are returned as x2axis, x3axis, etc., e.g. getAxes().y2axis is the second y axis. You can check y2axis.used to see whether the axis is associated with any data points and y2axis.show to see if it is currently shown. getPlaceholder() Returns placeholder that the plot was put into. This can be useful for plugins for adding DOM elements or firing events. getCanvas() Returns the canvas used for drawing in case you need to hack on it yourself. You'll probably need to get the plot offset too. getPlotOffset() Gets the offset that the grid has within the canvas as an object with distances from the canvas edges as \"left\", \"right\", \"top\", \"bottom\". I.e., if you draw a circle on the canvas with the center placed at (left, top), its center will be at the top-most, left corner of the grid. getOptions() Gets the options for the plot, normalized, with default values filled in. You get a reference to actual values used by Flot, so if you modify the values in here, Flot will use the new values. If you change something, you probably have to call draw() or setupGrid() or triggerRedrawOverlay() to see the change.","title":"Plot Methods"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#hooks","text":"In addition to the public methods, the Plot object also has some hooks that can be used to modify the plotting process. You can install a callback function at various points in the process, the function then gets access to the internal data structures in Flot. Here's an overview of the phases Flot goes through: Plugin initialization, parsing options Constructing the canvases used for drawing Set data: parsing data specification, calculating colors, copying raw data points into internal format, normalizing them, finding max/min for axis auto-scaling Grid setup: calculating axis spacing, ticks, inserting tick labels, the legend Draw: drawing the grid, drawing each of the series in turn Setting up event handling for interactive features Responding to events, if any Shutdown: this mostly happens in case a plot is overwritten Each hook is simply a function which is put in the appropriate array. You can add them through the \"hooks\" option, and they are also available after the plot is constructed as the \"hooks\" attribute on the returned plot object, e.g. // define a simple draw hook function hellohook ( plot , canvascontext ) { alert ( \"hello!\" ); }; // pass it in, in an array since we might want to specify several var plot = $ . plot ( placeholder , data , { hooks : { draw : [ hellohook ] } }); // we can now find it again in plot.hooks.draw[0] unless a plugin // has added other hooks The available hooks are described below. All hook callbacks get the plot object as first parameter. You can find some examples of defined hooks in the plugins bundled with Flot. processOptions [phase 1] function(plot, options) Called after Flot has parsed and merged options. Useful in the instance where customizations beyond simple merging of default values is needed. A plugin might use it to detect that it has been enabled and then turn on or off other options. processRawData [phase 3] function(plot, series, data, datapoints) Called before Flot copies and normalizes the raw data for the given series. If the function fills in datapoints.points with normalized points and sets datapoints.pointsize to the size of the points, Flot will skip the copying/normalization step for this series. In any case, you might be interested in setting datapoints.format, an array of objects for specifying how a point is normalized and how it interferes with axis scaling. It accepts the following options: { x , y : boolean , number : boolean , required : boolean , defaultValue : value , autoscale : boolean } \"x\" and \"y\" specify whether the value is plotted against the x or y axis, and is currently used only to calculate axis min-max ranges. The default format array, for example, looks like this: [ { x : true , number : true , required : true }, { y : true , number : true , required : true } ] This indicates that a point, i.e. [0, 25], consists of two values, with the first being plotted on the x axis and the second on the y axis. If \"number\" is true, then the value must be numeric, and is set to null if it cannot be converted to a number. \"defaultValue\" provides a fallback in case the original value is null. This is for instance handy for bars, where one can omit the third coordinate (the bottom of the bar), which then defaults to zero. If \"required\" is true, then the value must exist (be non-null) for the point as a whole to be valid. If no value is provided, then the entire point is cleared out with nulls, turning it into a gap in the series. \"autoscale\" determines whether the value is considered when calculating an automatic min-max range for the axes that the value is plotted against. processDatapoints [phase 3] function(plot, series, datapoints) Called after normalization of the given series but before finding min/max of the data points. This hook is useful for implementing data transformations. \"datapoints\" contains the normalized data points in a flat array as datapoints.points with the size of a single point given in datapoints.pointsize. Here's a simple transform that multiplies all y coordinates by 2: function multiply ( plot , series , datapoints ) { var points = datapoints . points , ps = datapoints . pointsize ; for ( var i = 0 ; i < points . length ; i += ps ) points [ i + 1 ] *= 2 ; } Note that you must leave datapoints in a good condition as Flot doesn't check it or do any normalization on it afterwards. processOffset [phase 4] function(plot, offset) Called after Flot has initialized the plot's offset, but before it draws any axes or plot elements. This hook is useful for customizing the margins between the grid and the edge of the canvas. \"offset\" is an object with attributes \"top\", \"bottom\", \"left\" and \"right\", corresponding to the margins on the four sides of the plot. drawBackground [phase 5] function(plot, canvascontext) Called before all other drawing operations. Used to draw backgrounds or other custom elements before the plot or axes have been drawn. drawSeries [phase 5] function(plot, canvascontext, series) Hook for custom drawing of a single series. Called just before the standard drawing routine has been called in the loop that draws each series. draw [phase 5] function(plot, canvascontext) Hook for drawing on the canvas. Called after the grid is drawn (unless it's disabled or grid.aboveData is set) and the series have been plotted (in case any points, lines or bars have been turned on). For examples of how to draw things, look at the source code. bindEvents [phase 6] function(plot, eventHolder) Called after Flot has setup its event handlers. Should set any necessary event handlers on eventHolder, a jQuery object with the canvas, e.g. function ( plot , eventHolder ) { eventHolder . mousedown ( function ( e ) { alert ( \"You pressed the mouse at \" + e . pageX + \" \" + e . pageY ); }); } Interesting events include click, mousemove, mouseup/down. You can use all jQuery events. Usually, the event handlers will update the state by drawing something (add a drawOverlay hook and call triggerRedrawOverlay) or firing an externally visible event for user code. See the crosshair plugin for an example. Currently, eventHolder actually contains both the static canvas used for the plot itself and the overlay canvas used for interactive features because some versions of IE get the stacking order wrong. The hook only gets one event, though (either for the overlay or for the static canvas). Note that custom plot events generated by Flot are not generated on eventHolder, but on the div placeholder supplied as the first argument to the plot call. You can get that with plot.getPlaceholder() - that's probably also the one you should use if you need to fire a custom event. drawOverlay [phase 7] function (plot, canvascontext) The drawOverlay hook is used for interactive things that need a canvas to draw on. The model currently used by Flot works the way that an extra overlay canvas is positioned on top of the static canvas. This overlay is cleared and then completely redrawn whenever something interesting happens. This hook is called when the overlay canvas is to be redrawn. \"canvascontext\" is the 2D context of the overlay canvas. You can use this to draw things. You'll most likely need some of the metrics computed by Flot, e.g. plot.width()/plot.height(). See the crosshair plugin for an example. shutdown [phase 8] function (plot, eventHolder) Run when plot.shutdown() is called, which usually only happens in case a plot is overwritten by a new plot. If you're writing a plugin that adds extra DOM elements or event handlers, you should add a callback to clean up after you. Take a look at the section in the PLUGINS document for more info.","title":"Hooks"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#plugins","text":"Plugins extend the functionality of Flot. To use a plugin, simply include its Javascript file after Flot in the HTML page. If you're worried about download size/latency, you can concatenate all the plugins you use, and Flot itself for that matter, into one big file (make sure you get the order right), then optionally run it through a Javascript minifier such as YUI Compressor. Here's a brief explanation of how the plugin plumbings work: Each plugin registers itself in the global array $.plot.plugins. When you make a new plot object with $.plot, Flot goes through this array calling the \"init\" function of each plugin and merging default options from the \"option\" attribute of the plugin. The init function gets a reference to the plot object created and uses this to register hooks and add new public methods if needed. See the PLUGINS document for details on how to write a plugin. As the above description hints, it's actually pretty easy.","title":"Plugins"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/API/#version-number","text":"The version number of Flot is available in $.plot.version .","title":"Version number"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/","text":"Contributing to Flot We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response. Issues Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort. Pull Requests To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below. Flot Style Guidelines Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions: Spacing Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } Comments Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {} Wrapping Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"CONTRIBUTING"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#contributing-to-flot","text":"We welcome all contributions, but following these guidelines results in less work for us, and a faster and better response.","title":"Contributing to Flot"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#issues","text":"Issues are not a way to ask general questions about Flot. If you see unexpected behavior but are not 100% certain that it is a bug, please try posting to the forum first, and confirm that what you see is really a Flot problem before creating a new issue for it. When reporting a bug, please include a working demonstration of the problem, if possible, or at least a clear description of the options you're using and the environment (browser and version, jQuery version, other libraries) that you're running under. If you have suggestions for new features, or changes to existing ones, we'd love to hear them! Please submit each suggestion as a separate new issue. If you would like to work on an existing issue, please make sure it is not already assigned to someone else. If an issue is assigned to someone, that person has already started working on it. So, pick unassigned issues to prevent duplicated effort.","title":"Issues"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#pull-requests","text":"To make merging as easy as possible, please keep these rules in mind: Submit new features or architectural changes to the <version>-work branch for the next major release. Submit bug fixes to the master branch. Divide larger changes into a series of small, logical commits with descriptive messages. Rebase, if necessary, before submitting your pull request, to reduce the work we need to do to merge it. Format your code according to the style guidelines below.","title":"Pull Requests"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#flot-style-guidelines","text":"Flot follows the jQuery Core Style Guidelines , with the following updates and exceptions:","title":"Flot Style Guidelines"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#spacing","text":"Use four-space indents, no tabs. Do not add horizontal space around parameter lists, loop definitions, or array/object indices. For example: for ( var i = 0 ; i < data . length ; i ++ ) { // This block is wrong! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } } for ( var i = 0 ; i < data . length ; i ++ ) { // This block is correct! if ( data [ i ] > 1 ) { data [ i ] = 2 ; } }","title":"Spacing"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#comments","text":"Use jsDoc comments for all file and function headers. Use // for all inline and block comments, regardless of length. All // comment blocks should have an empty line above and below them. For example: var a = 5 ; // We're going to loop here // TODO: Make this loop faster, better, stronger! for ( var x = 0 ; x < 10 ; x ++ ) {}","title":"Comments"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/CONTRIBUTING/#wrapping","text":"Block comments should be wrapped at 80 characters. Code should attempt to wrap at 80 characters, but may run longer if wrapping would hurt readability more than having to scroll horizontally. This is a judgement call made on a situational basis. Statements containing complex logic should not be wrapped arbitrarily if they do not exceed 80 characters. For example: if ( a == 1 && // This block is wrong! b == 2 && c == 3 ) {} if ( a == 1 && b == 2 && c == 3 ) {} // This block is correct!","title":"Wrapping"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/","text":"Frequently asked questions How much data can Flot cope with? Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth. Flot isn't working when I'm using JSON data as source! Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically. Can I export the graph? You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas. The bars are all tiny in time mode? It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide. Can I use Flot with libraries like Mootools or Prototype? Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details. Flot doesn't work with [insert name of Javascript UI framework]! Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"FAQ"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#how-much-data-can-flot-cope-with","text":"Flot will happily draw everything you send to it so the answer depends on the browser. The excanvas emulation used for IE (built with VML) makes IE by far the slowest browser so be sure to test with that if IE users are in your target group (for large plots in IE, you can also check out Flashcanvas which may be faster). 1000 points is not a problem, but as soon as you start having more points than the pixel width, you should probably start thinking about downsampling/aggregation as this is near the resolution limit of the chart anyway. If you downsample server-side, you also save bandwidth.","title":"How much data can Flot cope with?"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-isnt-working-when-im-using-json-data-as-source","text":"Actually, Flot loves JSON data, you just got the format wrong. Double check that you're not inputting strings instead of numbers, like [[\"0\", \"-2.13\"], [\"5\", \"4.3\"]]. This is most common mistake, and the error might not show up immediately because Javascript can do some conversion automatically.","title":"Flot isn't working when I'm using JSON data as source!"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-export-the-graph","text":"You can grab the image rendered by the canvas element used by Flot as a PNG or JPEG (remember to set a background). Note that it won't include anything not drawn in the canvas (such as the legend). And it doesn't work with excanvas which uses VML, but you could try Flashcanvas.","title":"Can I export the graph?"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#the-bars-are-all-tiny-in-time-mode","text":"It's not really possible to determine the bar width automatically. So you have to set the width with the barWidth option which is NOT in pixels, but in the units of the x axis (or the y axis for horizontal bars). For time mode that's milliseconds so the default value of 1 makes the bars 1 millisecond wide.","title":"The bars are all tiny in time mode?"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#can-i-use-flot-with-libraries-like-mootools-or-prototype","text":"Yes, Flot supports it out of the box and it's easy! Just use jQuery instead of $, e.g. call jQuery.plot instead of $.plot and use jQuery(something) instead of $(something). As a convenience, you can put in a DOM element for the graph placeholder where the examples and the API documentation are using jQuery objects. Depending on how you include jQuery, you may have to add one line of code to prevent jQuery from overwriting functions from the other libraries, see the documentation in jQuery (\"Using jQuery with other libraries\") for details.","title":"Can I use Flot with libraries like Mootools or Prototype?"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/FAQ/#flot-doesnt-work-with-insert-name-of-javascript-ui-framework","text":"Flot is using standard HTML to make charts. If this is not working, it's probably because the framework you're using is doing something weird with the DOM or with the CSS that is interfering with Flot. A common problem is that there's display:none on a container until the user does something. Many tab widgets work this way, and there's nothing wrong with it - you just can't call Flot inside a display:none container as explained in the README so you need to hold off the Flot call until the container is actually displayed (or use visibility:hidden instead of display:none or move the container off-screen). If you find there's a specific thing we can do to Flot to help, feel free to submit a bug report. Otherwise, you're welcome to ask for help on the forum/mailing list, but please don't submit a bug report to Flot.","title":"Flot doesn't work with [insert name of Javascript UI framework]!"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/","text":"Flot 0.8.3 Changes Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221) Bug fixes Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028) Flot 0.8.2 Changes Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081) Bug fixes Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915) Flot 0.8.1 Bug fixes Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski) Flot 0.8.0 API changes Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540). Changes Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963) Bug fixes Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000) Flot 0.7 API changes Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/ Changes Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown. Bug fixes Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483). Flot 0.6 API changes Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed. Changes Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins. Bug fixes Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224) Flot 0.5 Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place). API changes Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas). Changes Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars. Bug fixes Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey) Flot 0.4 API changes Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize. Changes Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class. Bug fixes Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas. Flot 0.3 This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball. Changes Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot. Bug fixes Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides) Flot 0.2 The API should now be fully documented. API changes Moved labelMargin option to grid from x/yaxis. Changes Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser) Flot 0.1 First public release.","title":"NEWS"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-083","text":"","title":"Flot 0.8.3"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes","text":"Updated example code to avoid encouraging unnecessary re-plots. (patch by soenter, pull request #1221)","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes","text":"Added a work-around to disable the allocation of extra space for first and last axis ticks, allowing plots to span the full width of their container. A proper solution for this bug will be implemented in the 0.9 release. (reported by Josh Pigford and andig, issue #1212, pull request #1290) Fixed a regression introduced in 0.8.1, where the last tick label would sometimes wrap rather than extending the plot's offset to create space. (reported by Elite Gamer, issue #1283) Fixed a regression introduced in 0.8.2, where the resize plugin would use unexpectedly high amounts of CPU even when idle. (reported by tommie, issue #1277, pull request #1289) Fixed the selection example to work with jQuery 1.9.x and later. (reported by EGLadona and dmfalke, issue #1250, pull request #1285) Added a detach shim to fix support for jQuery versions earlier than 1.4.x. (reported by ngavard, issue #1240, pull request #1286) Fixed a rare 'Uncaught TypeError' when using the resize plugin in IE 7/8. (reported by tleish, issue #1265, pull request #1289) Fixed zoom constraints to apply only in the direction of the zoom. (patch by Neil Katin, issue #1204, pull request #1205) Markings lines are no longer blurry when drawn on pixel boundaries. (reported by btccointicker and Rouillard, issue #1210) Don't discard original pie data-series values when combining slices. (patch by Phil Tsarik, pull request #1238) Fixed broken auto-scale behavior when using deprecated [x|y]2axis options. (reported by jorese, issue #1228, pull request #1284) Exposed the dateGenerator function on the plot object, as it used to be before time-mode was moved into a separate plugin. (patch by Paolo Valleri, pull request #1028)","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-082","text":"","title":"Flot 0.8.2"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_1","text":"Added a plot.destroy method as a way to free memory when emptying the plot placeholder and then re-using it for some other purpose. (patch by Thodoris Greasidis, issue #1129, pull request #1130) Added a table of contents and PLUGINS link to the API documentation. (patches by Brian Peiris, pull requests #1064 and #1127) Added Ruby code examples for time conversion. (patch by Mike Po\u0142tyn, pull request #1182) Minor improvements to API.md and README.md. (patches by Patrik Ragnarsson, pull requests #1085 and #1086) Updated inlined jQuery Resize to the latest version to fix errors. (reported by Matthew Sabol and sloker, issues #997 ad #1081)","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_1","text":"Fixed an unexpected change in behavior that resulted in duplicate tick labels when using a plugin, like flot-tickrotor, that overrode tick labels. (patch by Mark Cote, pull request #1091) Fixed a regression from 0.7 where axis labels were given the wrong width, causing them to overlap at certain scales and ignore the labelWidth option. (patch by Benjamin Gram, pull request #1177) Fixed a bug where the second axis in an xaxes/yaxes array incorrectly had its 'innermost' property set to false or undefined, even if it was on the other side of the plot from the first axis. This resulted in the axis bar being visible when it shouldn't have been, which was especially obvious when the grid had a left/right border width of zero. (reported by Teq1, fix researched by ryleyb, issue #1056) Fixed an error when using a placeholder that has no font-size property. (patch by Craig Oldford, pull request #1135) Fixed a regression from 0.7 where nulls at the end of a series were ignored for purposes of determing the range of the x-axis. (reported by Munsifali Rashid, issue #1095) If a font size is provided, base the default lineHeight on that size rather that the font size of the plot placeholder, which may be very different. (reported by Daniel Hoffmann Bernardes, issue #1131, pull request #1199) Fix broken highlighting for right-aligned bars. (reported by BeWiBu and Mihai Stanciu, issues #975 and #1093, with further assistance by Eric Byers, pull request #1120) Prevent white circles from sometimes showing up inside of pie charts. (reported by Pierre Dubois and Jack Klink, issues #1128 and #1073) Label formatting no longer breaks when a page contains multiple pie charts. (reported by Brend Wanders, issue #1055) When using multiple axes on opposite sides of the plot, the innermost axis coming later in the list no longer has its bar drawn incorrectly. (reported by ryleyb, issue #1056) When removing series labels and redrawing the plot, the legend now updates correctly even when using an external container. (patch by Luis Silva, issue #1159, pull request #1160) The pie plugin no longer ignores the value of the left offset option. (reported by melanker, issue #1136) Fixed a regression from 0.7, where extra padding was added unnecessarily to sides of the plot where there was no last tick label. (reported by sknob001, issue #1048, pull request #1200) Fixed incorrect tooltip behavior in the interacting example. (patch by cleroux, issue #686, pull request #1074) Fixed an error in CSS color extraction with elements outside the DOM. (patch by execjosh, pull request #1084) Fixed :not selector error when using jQuery without Sizzle. (patch by Anthony Ryan, pull request #1180) Worked around a browser issue that caused bars to appear un-filled. (reported by irbian, issue #915)","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-081","text":"","title":"Flot 0.8.1"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_2","text":"Fixed a regression in the time plugin, introduced in 0.8, that caused dates to align to the minute rather than to the highest appropriate unit. This caused many x-axes in 0.8 to have different ticks than they did in 0.7. (reported by Tom Sheppard, patch by Daniel Shapiro, issue #1017, pull request #1023) Fixed a regression in text rendering, introduced in 0.8, that caused axis labels with the same text as another label on the same axis to disappear. More generally, it's again possible to have the same text in two locations. (issue #1032) Fixed a regression in text rendering, introduced in 0.8, where axis labels were no longer assigned an explicit width, and their text could not wrap. (reported by sabregreen, issue #1019) Fixed a regression in the pie plugin, introduced in 0.8, that prevented it from accepting data in the format '[[x, y]]'. (patch by Nicolas Morel, pull request #1024) The 'zero' series option and 'autoscale' format option are no longer ignored when the series contains a null value. (reported by Daniel Shapiro, issue #1033) Avoid triggering the time-mode plugin exception when there are zero series. (reported by Daniel Rothig, patch by Mark Raymond, issue #1016) When a custom color palette has fewer colors than the default palette, Flot no longer fills out the colors with the remainder of the default. (patch by goorpy, issue #1031, pull request #1034) Fixed missing update for bar highlights after a zoom or other redraw. (reported by Paolo Valleri, issue #1030) Fixed compatibility with jQuery versions earlier than 1.7. (patch by Lee Willis, issue #1027, pull request #1027) The mouse wheel no longer scrolls the page when using the navigate plugin. (patch by vird, pull request #1020) Fixed missing semicolons in the core library. (reported by Michal Zglinski)","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-080","text":"","title":"Flot 0.8.0"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes","text":"Support for time series has been moved into a plugin, jquery.flot.time.js. This results in less code if time series are not used. The functionality remains the same (plus timezone support, as described below); however, the plugin must be included if axis.mode is set to \"time\". When the axis mode is \"time\", the axis option \"timezone\" can be set to null, \"browser\", or a particular timezone (e.g. \"America/New_York\") to control how the dates are displayed. If null, the dates are displayed as UTC. If \"browser\", the dates are displayed in the time zone of the user's browser. Date/time formatting has changed and now follows a proper subset of the standard strftime specifiers, plus one nonstandard specifier for quarters. Additionally, if a strftime function is found in the Date object's prototype, it will be used instead of the built-in formatter. Axis tick labels now use the class 'flot-tick-label' instead of 'tickLabel'. The text containers for each axis now use the classes 'flot-[x|y]-axis' and 'flot-[x|y]#-axis' instead of '[x|y]Axis' and '[x|y]#Axis'. For compatibility with Flot 0.7 and earlier text will continue to use the old classes as well, but they are considered deprecated and will be removed in a future version. In previous versions the axis 'color' option was used to set the color of tick marks and their label text. It now controls the color of the axis line, which previously could not be changed separately, and continues to act as a default for the tick-mark color. The color of tick label text is now set either by overriding the 'flot-tick-label' CSS rule or via the axis 'font' option. A new plugin, jquery.flot.canvas.js, allows axis tick labels to be rendered directly to the canvas, rather than using HTML elements. This feature can be toggled with a simple option, making it easy to create interactive plots in the browser using HTML, then re-render them to canvas for export as an image. The plugin tries to remain as faithful as possible to the original HTML render, and goes so far as to automatically extract styles from CSS, to avoid having to provide a separate set of styles when rendering to canvas. Due to limitations of the canvas text API, the plugin cannot reproduce certain features, including HTML markup embedded in labels, and advanced text styles such as 'em' units. The plugin requires support for canvas text, which may not be present in some older browsers, even if they support the canvas tag itself. To use the plugin with these browsers try using a shim such as canvas-text or FlashCanvas. The base and overlay canvas are now using the CSS classes \"flot-base\" and \"flot-overlay\" to prevent accidental clashes (issue 540).","title":"API changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_2","text":"Addition of nonstandard %q specifier to date/time formatting. (patch by risicle, issue 49) Date/time formatting follows proper subset of strftime specifiers, and support added for Date.prototype.strftime, if found. (patch by Mark Cote, issues 419 and 558) Fixed display of year ticks. (patch by Mark Cote, issue 195) Support for time series moved to plugin. (patch by Mark Cote) Display time series in different time zones. (patch by Knut Forkalsrud, issue 141) Added a canvas plugin to enable rendering axis tick labels to the canvas. (sponsored by YCharts.com, implementation by Ole Laursen and David Schnur) Support for setting the interval between redraws of the overlay canvas with redrawOverlayInterval. (suggested in issue 185) Support for multiple thresholds in thresholds plugin. (patch by Arnaud Bellec, issue 523) Support for plotting categories/textual data directly with new categories plugin. Tick generators now get the whole axis rather than just min/max. Added processOffset and drawBackground hooks. (suggested in issue 639) Added a grid \"margin\" option to set the space between the canvas edge and the grid. Prevent the pie example page from generating single-slice pies. (patch by Shane Reustle) In addition to \"left\" and \"center\", bars now recognize \"right\" as an alignment option. (patch by Michael Mayer, issue 520) Switched from toFixed to a much faster default tickFormatter. (patch by Clemens Stolle) Added to a more helpful error when using a time-mode axis without including the flot.time plugin. (patch by Yael Elmatad) Added a legend \"sorted\" option to control sorting of legend entries independent of their series order. (patch by Tom Cleaveland) Added a series \"highlightColor\" option to control the color of the translucent overlay that identifies the dataset when the mouse hovers over it. (patch by Eric Wendelin and Nate Abele, issues 168 and 299) Added a plugin jquery.flot.errorbars, with an accompanying example, that adds the ability to plot error bars, commonly used in many kinds of statistical data visualizations. (patch by Rui Pereira, issue 215) The legend now omits entries whose labelFormatter returns null. (patch by Tom Cleaveland, Christopher Lambert, and Simon Strandgaard) Added support for high pixel density (retina) displays, resulting in much crisper charts on such devices. (patch by Olivier Guerriat, additional fixes by Julien Thomas, maimairel, and Lau Bech Lauritzen) Added the ability to control pie shadow position and alpha via a new pie 'shadow' option. (patch by Julien Thomas, pull request #78) Added the ability to set width and color for individual sides of the grid. (patch by Ara Anjargolian, additional fixes by Karl Swedberg, pull requests #855 and #880) The selection plugin's getSelection now returns null when the selection has been cleared. (patch by Nick Campbell, pull request #852) Added a new option called 'zero' to bars and filled lines series, to control whether the y-axis minimum is scaled to fit the data or set to zero. (patch by David Schnur, issues #316, #529, and #856, pull request #911) The plot function is now also a jQuery chainable property. (patch by David Schnur, issues #734 and #816, pull request #953) When only a single pie slice is beneath the combine threshold it is no longer replaced by an 'other' slice. (suggested by Devin Bayer, issue #638) Added lineJoin and minSize options to the selection plugin to control the corner style and minimum size of the selection, respectively. (patch by Ruth Linehan, pull request #963)","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_3","text":"Fix problem with null values and pie plugin. (patch by gcruxifix, issue 500) Fix problem with threshold plugin and bars. (based on patch by kaarlenkaski, issue 348) Fix axis box calculations so the boxes include the outermost part of the labels too. Fix problem with event clicking and hovering in IE 8 by updating Excanvas and removing previous work-around. (test case by Ara Anjargolian) Fix issues with blurry 1px border when some measures aren't integer. (reported by Ara Anjargolian) Fix bug with formats in the data processor. (reported by Peter Hull, issue 534) Prevent i from being declared global in extractRange. (reported by Alexander Obukhov, issue 627) Throw errors in a more cross-browser-compatible manner. (patch by Eddie Kay) Prevent pie slice outlines from being drawn when the stroke width is zero. (reported by Chris Minett, issue 585) Updated the navigate plugin's inline copy of jquery.mousewheel to fix Webkit zoom problems. (reported by Hau Nguyen, issue 685) Axis labels no longer appear as decimals rather than integers in certain cases. (patch by Clemens Stolle, issue 541) Automatic color generation no longer produces only whites and blacks when there are many series. (patch by David Schnur and Tom Cleaveland) Fixed an error when custom tick labels weren't provided as strings. (patch by Shad Downey) Prevented the local insertSteps and fmt variables from becoming global. (first reported by Marc Bennewitz and Szymon Barglowski, patch by Nick Campbell, issues #825 and #831, pull request #851) Prevented several threshold plugin variables from becoming global. (patch by Lasse Dahl Ebert) Fixed various jQuery 1.8 compatibility issues. (issues #814 and #819, pull request #877) Pie charts with a slice equal to or approaching 100% of the pie no longer appear invisible. (patch by David Schnur, issues #444, #658, #726, #824 and #850, pull request #879) Prevented several local variables from becoming global. (patch by aaa707) Ensure that the overlay and primary canvases remain aligned. (issue #670, pull request #901) Added support for jQuery 1.9 by removing and replacing uses of $.browser. (analysis and patch by Anthony Ryan, pull request #905) Pie charts no longer disappear when redrawn during a resize or update. (reported by Julien Bec, issue #656, pull request #910) Avoided floating-point precision errors when calculating pie percentages. (patch by James Ward, pull request #918) Fixed compatibility with jQuery 1.2.6, which has no 'mouseleave' shortcut. (reported by Bevan, original pull request #920, replaced by direct patch) Fixed sub-pixel rendering issues with crosshair and selection lines. (patches by alanayoub and Daniel Shapiro, pull requests #17 and #925) Fixed rendering issues when using the threshold plugin with several series. (patch by Ivan Novikov, pull request #934) Pie charts no longer disappear when redrawn after calling setData(). (reported by zengge1984 and pareeohnos, issues #810 and #945) Added a work-around for the problem where points with a lineWidth of zero still showed up with a visible line. (reported by SalvoSav, issue #842, patch by Jamie Hamel-Smith, pull request #937) Pie charts now accept values in string form, like other plot types. (reported by laerdal.no, issue #534) Avoid rounding errors in the threshold plugin. (reported by jerikojerk, issue #895) Fixed an error when using the navigate plugin with jQuery 1.9.x or later. (reported by Paolo Valleri, issue #964) Fixed inconsistencies between the highlight and unhighlight functions. (reported by djamshed, issue #987) Fixed recalculation of tickSize and tickDecimals on calls to setupGrid. (patch by thecountofzero, pull request #861, issues #860, #1000)","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-07","text":"","title":"Flot 0.7"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_1","text":"Multiple axes support. Code using dual axes should be changed from using x2axis/y2axis in the options to using an array (although backwards- compatibility hooks are in place). For instance, { xaxis : { ... }, x2axis : { ... }, yaxis : { ... }, y2axis : { ... } } becomes { xaxes : [ { ... }, { ... } ], yaxes : [ { ... }, { ... } ] } Note that if you're just using one axis, continue to use the xaxis/yaxis directly (it now sets the default settings for the arrays). Plugins touching the axes must be ported to take the extra axes into account, check the source to see some examples. A related change is that the visibility of axes is now auto-detected. So if you were relying on an axis to show up even without any data in the chart, you now need to set the axis \"show\" option explicitly. \"tickColor\" on the grid options is now deprecated in favour of a corresponding option on the axes, so: { grid : { tickColor : \"#000\" }} becomes { xaxis : { tickColor : \"#000\" }, yaxis : { tickColor : \"#000\" } } But if you just configure a base color Flot will now autogenerate a tick color by adding transparency. Backwards-compatibility hooks are in place. Final note: now that IE 9 is coming out with canvas support, you may want to adapt the excanvas include to skip loading it in IE 9 (the examples have been adapted thanks to Ryley Breiddal). An alternative to excanvas using Flash has also surfaced, if your graphs are slow in IE, you may want to give it a spin: http://code.google.com/p/flashcanvas/","title":"API changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_3","text":"Support for specifying a bottom for each point for line charts when filling them, this means that an arbitrary bottom can be used instead of just the x axis. (based on patches patiently provided by Roman V. Prikhodchenko) New fillbetween plugin that can compute a bottom for a series from another series, useful for filling areas between lines. See new example percentiles.html for a use case. More predictable handling of gaps for the stacking plugin, now all undefined ranges are skipped. Stacking plugin can stack horizontal bar charts. Navigate plugin now redraws the plot while panning instead of only after the fact. (raised by lastthemy, issue 235) Can be disabled by setting the pan.frameRate option to null. Date formatter now accepts %0m and %0d to get a zero-padded month or day. (issue raised by Maximillian Dornseif) Revamped internals to support an unlimited number of axes, not just dual. (sponsored by Flight Data Services, www.flightdataservices.com) New setting on axes, \"tickLength\", to control the size of ticks or turn them off without turning off the labels. Axis labels are now put in container divs with classes, for instance labels in the x axes can be reached via \".xAxis .tickLabel\". Support for setting the color of an axis. (sponsored by Flight Data Services, www.flightdataservices.com) Tick color is now auto-generated as the base color with some transparency, unless you override it. Support for aligning ticks in the axes with \"alignTicksWithAxis\" to ensure that they appear next to each other rather than in between, at the expense of possibly awkward tick steps. (sponsored by Flight Data Services, www.flightdataservices.com) Support for customizing the point type through a callback when plotting points and new symbol plugin with some predefined point types. (sponsored by Utility Data Corporation) Resize plugin for automatically redrawing when the placeholder changes size, e.g. on window resizes. (sponsored by Novus Partners) A resize() method has been added to plot object facilitate this. Support Infinity/-Infinity for plotting asymptotes by hacking it into +/-Number.MAX_VALUE. (reported by rabaea.mircea) Support for restricting navigate plugin to not pan/zoom an axis. (based on patch by kkaefer) Support for providing the drag cursor for the navigate plugin as an option. (based on patch by Kelly T. Moore) Options for controlling whether an axis is shown or not (suggestion by Timo Tuominen) and whether to reserve space for it even if it isn't shown. New attribute $.plot.version with the Flot version as a string. The version comment is now included in the minified jquery.flot.min.js. New options.grid.minBorderMargin for adjusting the minimum margin provided around the border (based on patch by corani, issue 188). Refactor replot behaviour so Flot tries to reuse the existing canvas, adding shutdown() methods to the plot. (based on patch by Ryley Breiddal, issue 269) This prevents a memory leak in Chrome and hopefully makes replotting faster for those who are using $.plot instead of .setData()/.draw(). Also update jQuery to 1.5.1 to prevent IE leaks fixed in jQuery. New real-time line chart example. New hooks: drawSeries, shutdown.","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_4","text":"Fixed problem with findNearbyItem and bars on top of each other. (reported by ragingchikn, issue 242) Fixed problem with ticks and the border. (based on patch from ultimatehustler69, issue 236) Fixed problem with plugins adding options to the series objects. Fixed a problem introduced in 0.6 with specifying a gradient with: {brightness: x, opacity: y } Don't use $.browser.msie, check for getContext on the created canvas element instead and try to use excanvas if it's not found. Fixes IE 9 compatibility. highlight(s, index) was looking up the point in the original s.data instead of in the computed datapoints array, which breaks with plugins that modify the datapoints, such as the stacking plugin. (reported by curlypaul924, issue 316) More robust handling of axis from data passed in from getData(). (reported) by Morgan) Fixed problem with turning off bar outline. (fix by Jordi Castells, issue 253) Check the selection passed into setSelection in the selection plugin, to guard against errors when synchronizing plots (fix by Lau Bech Lauritzen). Fix bug in crosshair code with mouseout resetting the crosshair even if it is locked (fix by Lau Bech Lauritzen and Banko Adam). Fix bug with points plotting using line width from lines rather than points. Fix bug with passing non-array 0 data (for plugins that don't expect arrays, patch by vpapp1). Fix errors in JSON in examples so they work with jQuery 1.4.2 (fix reported by honestbleeps, issue 357). Fix bug with tooltip in interacting.html, this makes the tooltip much smoother (fix by bdkahn). Fix related bug inside highlighting handler in Flot. Use closure trick to make inline colorhelpers plugin respect jQuery.noConflict(true), renaming the global jQuery object (reported by Nick Stielau). Listen for mouseleave events and fire a plothover event with empty item when it occurs to drop highlights when the mouse leaves the plot (reported by by outspirit). Fix bug with using aboveData with a background (reported by amitayd). Fix possible excanvas leak (report and suggested fix by tom9729). Fix bug with backwards compatibility for shadowSize = 0 (report and suggested fix by aspinak). Adapt examples to skip loading excanvas (fix by Ryley Breiddal). Fix bug that prevent a simple f(x) = -x transform from working correctly (fix by Mike, issue 263). Fix bug in restoring cursor in navigate plugin (reported by Matteo Gattanini, issue 395). Fix bug in picking items when transform/inverseTransform is in use (reported by Ofri Raviv, and patches and analysis by Jan and Tom Paton, issue 334 and 467). Fix problem with unaligned ticks and hover/click events caused by padding on the placeholder by hardcoding the placeholder padding to 0 (reported by adityadineshsaxena, Matt Sommer, Daniel Atos and some other people, issue 301). Update colorhelpers plugin to avoid dying when trying to parse an invalid string (reported by cadavor, issue 483).","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-06","text":"","title":"Flot 0.6"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_2","text":"Selection support has been moved to a plugin. Thus if you're passing selection: { mode: something }, you MUST include the file jquery.flot.selection.js after jquery.flot.js. This reduces the size of base Flot and makes it easier to customize the selection as well as improving code clarity. The change is based on a patch from andershol. In the global options specified in the $.plot command, \"lines\", \"points\", \"bars\" and \"shadowSize\" have been moved to a sub-object called \"series\": $ . plot ( placeholder , data , { lines : { show : true }}) should be changed to $ . plot ( placeholder , data , { series : { lines : { show : true }}}) All future series-specific options will go into this sub-object to simplify plugin writing. Backward-compatibility code is in place, so old code should not break. \"plothover\" no longer provides the original data point, but instead a normalized one, since there may be no corresponding original point. Due to a bug in previous versions of jQuery, you now need at least jQuery 1.2.6. But if you can, try jQuery 1.3.2 as it got some improvements in event handling speed.","title":"API changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_4","text":"Added support for disabling interactivity for specific data series. (request from Ronald Schouten and Steve Upton) Flot now calls $() on the placeholder and optional legend container passed in so you can specify DOM elements or CSS expressions to make it easier to use Flot with libraries like Prototype or Mootools or through raw JSON from Ajax responses. A new \"plotselecting\" event is now emitted while the user is making a selection. The \"plothover\" event is now emitted immediately instead of at most 10 times per second, you'll have to put in a setTimeout yourself if you're doing something really expensive on this event. The built-in date formatter can now be accessed as $.plot.formatDate(...) (suggestion by Matt Manela) and even replaced. Added \"borderColor\" option to the grid. (patches from Amaury Chamayou and Mike R. Williamson) Added support for gradient backgrounds for the grid. (based on patch from Amaury Chamayou, issue 90) The \"setting options\" example provides a demonstration. Gradient bars. (suggestion by stefpet) Added a \"plotunselected\" event which is triggered when the selection is removed, see \"selection\" example. (suggestion by Meda Ugo) The option legend.margin can now specify horizontal and vertical margins independently. (suggestion by someone who's annoyed) Data passed into Flot is now copied to a new canonical format to enable further processing before it hits the drawing routines. As a side-effect, this should make Flot more robust in the face of bad data. (issue 112) Step-wise charting: line charts have a new option \"steps\" that when set to true connects the points with horizontal/vertical steps instead of diagonal lines. The legend labelFormatter now passes the series in addition to just the label. (suggestion by Vincent Lemeltier) Horizontal bars (based on patch by Jason LeBrun). Support for partial bars by specifying a third coordinate, i.e. they don't have to start from the axis. This can be used to make stacked bars. New option to disable the (grid.show). Added pointOffset method for converting a point in data space to an offset within the placeholder. Plugin system: register an init method in the $.flot.plugins array to get started, see PLUGINS.txt for details on how to write plugins (it's easy). There are also some extra methods to enable access to internal state. Hooks: you can register functions that are called while Flot is crunching the data and doing the plot. This can be used to modify Flot without changing the source, useful for writing plugins. Some hooks are defined, more are likely to come. Threshold plugin: you can set a threshold and a color, and the data points below that threshold will then get the color. Useful for marking data below 0, for instance. Stack plugin: you can specify a stack key for each series to have them summed. This is useful for drawing additive/cumulative graphs with bars and (currently unfilled) lines. Crosshairs plugin: trace the mouse position on the axes, enable with crosshair: { mode: \"x\"} (see the new tracking example for a use). Image plugin: plot prerendered images. Navigation plugin for panning and zooming a plot. More configurable grid. Axis transformation support, useful for non-linear plots, e.g. log axes and compressed time axes (like omitting weekends). Support for twelve-hour date formatting (patch by Forrest Aldridge). The color parsing code in Flot has been cleaned up and split out so it's now available as a separate jQuery plugin. It's included inline in the Flot source to make dependency managing easier. This also makes it really easy to use the color helpers in Flot plugins.","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_5","text":"Fixed two corner-case bugs when drawing filled curves. (report and analysis by Joshua Varner) Fix auto-adjustment code when setting min to 0 for an axis where the dataset is completely flat on that axis. (report by chovy) Fixed a bug with passing in data from getData to setData when the secondary axes are used. (reported by nperelman, issue 65) Fixed so that it is possible to turn lines off when no other chart type is shown (based on problem reported by Glenn Vanderburg), and fixed so that setting lineWidth to 0 also hides the shadow. (based on problem reported by Sergio Nunes) Updated mousemove position expression to the latest from jQuery. (reported by meyuchas) Use CSS borders instead of background in legend. (issues 25 and 45) Explicitly convert axis min/max to numbers. Fixed a bug with drawing marking lines with different colors. (reported by Khurram) Fixed a bug with returning y2 values in the selection event. (fix by exists, issue 75) Only set position relative on placeholder if it hasn't already a position different from static. (reported by kyberneticist, issue 95) Don't round markings to prevent sub-pixel problems. (reported by Dan Lipsitt) Make the grid border act similarly to a regular CSS border, i.e. prevent it from overlapping the plot itself. This also fixes a problem with anti- aliasing when the width is 1 pixel. (reported by Anthony Ettinger) Imported version 3 of excanvas and fixed two issues with the newer version. Hopefully, this will make Flot work with IE8. (nudge by Fabien Menager, further analysis by Booink, issue 133) Changed the shadow code for lines to hopefully look a bit better with vertical lines. Round tick positions to avoid possible problems with fractions. (suggestion by Fred, issue 130) Made the heuristic for determining how many ticks to aim for a bit smarter. Fix for uneven axis margins (report and patch by Paul Kienzle) and snapping to ticks. (report and patch by lifthrasiir) Fixed bug with slicing in findNearbyItems. (patch by zollman) Make heuristic for x axis label widths more dynamic. (patch by rickinhethuis) Make sure points on top take precedence when finding nearby points when hovering. (reported by didroe, issue 224)","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-05","text":"Timestamps are now in UTC. Also \"selected\" event -> becomes \"plotselected\" with new data, the parameters for setSelection are now different (but backwards compatibility hooks are in place), coloredAreas becomes markings with a new interface (but backwards compatibility hooks are in place).","title":"Flot 0.5"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_3","text":"Timestamps in time mode are now displayed according to UTC instead of the time zone of the visitor. This affects the way the timestamps should be input; you'll probably have to offset the timestamps according to your local time zone. It also affects any custom date handling code (which basically now should use the equivalent UTC date mehods, e.g. .setUTCMonth() instead of .setMonth(). Markings, previously coloredAreas, are now specified as ranges on the axes, like { xaxis: { from: 0, to: 10 }} . Furthermore with markings you can now draw horizontal/vertical lines by setting from and to to the same coordinate. (idea from line support patch by by Ryan Funduk) Interactivity: added a new \"plothover\" event and this and the \"plotclick\" event now returns the closest data item (based on patch by /david, patch by Mark Byers for bar support). See the revamped \"interacting with the data\" example for some hints on what you can do. Highlighting: you can now highlight points and datapoints are autohighlighted when you hover over them (if hovering is turned on). Support for dual axis has been added (based on patch by someone who's annoyed and /david). For each data series you can specify which axes it belongs to, and there are two more axes, x2axis and y2axis, to customize. This affects the \"selected\" event which has been renamed to \"plotselected\" and spews out { xaxis: { from: -10, to: 20 } ... }, setSelection in which the parameters are on a new form (backwards compatible hooks are in place so old code shouldn't break) and markings (formerly coloredAreas).","title":"API changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_5","text":"Added support for specifying the size of tick labels (axis.labelWidth, axis.labelHeight). Useful for specifying a max label size to keep multiple plots aligned. The \"fill\" option can now be a number that specifies the opacity of the fill. You can now specify a coordinate as null (like [2, null]) and Flot will take the other coordinate into account when scaling the axes. (based on patch by joebno) New option for bars \"align\". Set it to \"center\" to center the bars on the value they represent. setSelection now takes a second parameter which you can use to prevent the method from firing the \"plotselected\" handler. Improved the handling of axis auto-scaling with bars.","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_6","text":"Fixed a bug in calculating spacing around the plot. (reported by timothytoe) Fixed a bug in finding max values for all-negative data sets. Prevent the possibility of eternal looping in tick calculations. Fixed a bug when borderWidth is set to 0. (reported by Rob/sanchothefat) Fixed a bug with drawing bars extending below 0. (reported by James Hewitt, patch by Ryan Funduk). Fixed a bug with line widths of bars. (reported by MikeM) Fixed a bug with 'nw' and 'sw' legend positions. Fixed a bug with multi-line x-axis tick labels. (reported by Luca Ciano, IE-fix help by Savage Zhang) Using the \"container\" option in legend now overwrites the container element instead of just appending to it, fixing the infinite legend bug. (reported by several people, fix by Brad Dewey)","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-04","text":"","title":"Flot 0.4"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_4","text":"Deprecated axis.noTicks in favor of just specifying the number as axis.ticks. So xaxis: { noTicks: 10 } becomes xaxis: { ticks: 10 } . Time series support. Specify axis.mode: \"time\", put in Javascript timestamps as data, and Flot will automatically spit out sensible ticks. Take a look at the two new examples. The format can be customized with axis.timeformat and axis.monthNames, or if that fails with axis.tickFormatter. Support for colored background areas via grid.coloredAreas. Specify an array of { x1, y1, x2, y2 } objects or a function that returns these given { xmin, xmax, ymin, ymax }. More members on the plot object (report by Chris Davies and others). \"getData\" for inspecting the assigned settings on data series (e.g. color) and \"setData\", \"setupGrid\" and \"draw\" for updating the contents without a total replot. The default number of ticks to aim for is now dependent on the size of the plot in pixels. Support for customizing tick interval sizes directly with axis.minTickSize and axis.tickSize. Cleaned up the automatic axis scaling algorithm and fixed how it interacts with ticks. Also fixed a couple of tick-related corner case bugs (one reported by mainstreetmark, another reported by timothytoe). The option axis.tickFormatter now takes a function with two parameters, the second parameter is an optional object with information about the axis. It has min, max, tickDecimals, tickSize.","title":"API changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_6","text":"Added support for segmented lines. (based on patch from Michael MacDonald) Added support for ignoring null and bad values. (suggestion from Nick Konidaris and joshwaihi) Added support for changing the border width. (thanks to joebno and safoo) Label colors can be changed via CSS by selecting the tickLabel class.","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_7","text":"Fixed a bug in handling single-item bar series. (reported by Emil Filipov) Fixed erratic behaviour when interacting with the plot with IE 7. (reported by Lau Bech Lauritzen). Prevent IE/Safari text selection when selecting stuff on the canvas.","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-03","text":"This is mostly a quick-fix release because jquery.js wasn't included in the previous zip/tarball.","title":"Flot 0.3"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_7","text":"Include jquery.js in the zip/tarball. Support clicking on the plot. Turn it on with grid: { clickable: true }, then you get a \"plotclick\" event on the graph placeholder with the position in units of the plot.","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#bug-fixes_8","text":"Fixed a bug in dealing with data where min = max. (thanks to Michael Messinides)","title":"Bug fixes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-02","text":"The API should now be fully documented.","title":"Flot 0.2"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#api-changes_5","text":"Moved labelMargin option to grid from x/yaxis.","title":"API changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#changes_8","text":"Added support for putting a background behind the default legend. The default is the partly transparent background color. Added backgroundColor and backgroundOpacity to the legend options to control this. The ticks options can now be a callback function that takes one parameter, an object with the attributes min and max. The function should return a ticks array. Added labelFormatter option in legend, useful for turning the legend labels into links. Reduced the size of the code. (patch by Guy Fraser)","title":"Changes"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/NEWS/#flot-01","text":"First public release.","title":"Flot 0.1"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/","text":"Writing plugins All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot. Complete example Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up. Shutting down a plugin Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot. Some hints on the options Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"PLUGINS"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#writing-plugins","text":"All you need to do to make a new plugin is creating an init function and a set of options (if needed), stuffing it into an object and putting it in the $.plot.plugins array. For example: function myCoolPluginInit ( plot ) { plot . coolstring = \"Hello!\" ; }; $ . plot . plugins . push ({ init : myCoolPluginInit , options : { ... } }); // if $.plot is called, it will return a plot object with the // attribute \"coolstring\" Now, given that the plugin might run in many different places, it's a good idea to avoid leaking names. The usual trick here is wrap the above lines in an anonymous function which is called immediately, like this: (function () { inner code ... })(). To make it even more robust in case $ is not bound to jQuery but some other Javascript library, we can write it as ( function ( $ ) { // plugin definition // ... })( jQuery ); There's a complete example below, but you should also check out the plugins bundled with Flot.","title":"Writing plugins"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#complete-example","text":"Here is a simple debug plugin which alerts each of the series in the plot. It has a single option that control whether it is enabled and how much info to output: ( function ( $ ) { function init ( plot ) { var debugLevel = 1 ; function checkDebugEnabled ( plot , options ) { if ( options . debug ) { debugLevel = options . debug ; plot . hooks . processDatapoints . push ( alertSeries ); } } function alertSeries ( plot , series , datapoints ) { var msg = \"series \" + series . label ; if ( debugLevel > 1 ) { msg += \" with \" + series . data . length + \" points\" ; alert ( msg ); } } plot . hooks . processOptions . push ( checkDebugEnabled ); } var options = { debug : 0 }; $ . plot . plugins . push ({ init : init , options : options , name : \"simpledebug\" , version : \"0.1\" }); })( jQuery ); We also define \"name\" and \"version\". It's not used by Flot, but might be helpful for other plugins in resolving dependencies. Put the above in a file named \"jquery.flot.debug.js\", include it in an HTML page and then it can be used with: $ . plot ( $ ( \"#placeholder\" ), [...], { debug : 2 }); This simple plugin illustrates a couple of points: It uses the anonymous function trick to avoid name pollution. It can be enabled/disabled through an option. Variables in the init function can be used to store plot-specific state between the hooks. The two last points are important because there may be multiple plots on the same page, and you'd want to make sure they are not mixed up.","title":"Complete example"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#shutting-down-a-plugin","text":"Each plot object has a shutdown hook which is run when plot.shutdown() is called. This usually mostly happens in case another plot is made on top of an existing one. The purpose of the hook is to give you a chance to unbind any event handlers you've registered and remove any extra DOM things you've inserted. The problem with event handlers is that you can have registered a handler which is run in some point in the future, e.g. with setTimeout(). Meanwhile, the plot may have been shutdown and removed, but because your event handler is still referencing it, it can't be garbage collected yet, and worse, if your handler eventually runs, it may overwrite stuff on a completely different plot.","title":"Shutting down a plugin"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot/PLUGINS/#some-hints-on-the-options","text":"Plugins should always support appropriate options to enable/disable them because the plugin user may have several plots on the same page where only one should use the plugin. In most cases it's probably a good idea if the plugin is turned off rather than on per default, just like most of the powerful features in Flot. If the plugin needs options that are specific to each series, like the points or lines options in core Flot, you can put them in \"series\" in the options object, e.g. var options = { series : { downsample : { algorithm : null , maxpoints : 1000 } } } Then they will be copied by Flot into each series, providing default values in case none are specified. Think hard and long about naming the options. These names are going to be public API, and code is going to depend on them if the plugin is successful.","title":"Some hints on the options"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/","text":"============================================ Originally written by Xuan Luo. Maintained by Mark Cote. Contributions: Xuan Luo Mark Cote stdexcept Clemens Stolle Michael Haddon andig Alex Pinkney flot-axislabels provides flot with the ability to label axes. It supports any number of axes. It can render the labels with CSS transforms, in canvas, or with traditional CSS positioning (\"HTML\" mode). flot-axislabels attempts a graceful fallback from CSS to canvas to HTML if some modes are not supported. You can also force a particular lesser mode (canvas or HTML). In both CSS and canvas modes, the y-axis labels are rotated to face the graph (90 degrees counter-clockwise for left-hand labels, and 90 degrees clockwise for right-hand labels). In HTML mode, y-axis labels are left horizontal (warning: this takes up a lot of space). In CSS and HTML modes, each axis label belongs to the classes \"axisLabels\" and \"[axisName]Label\" (e.g. .xaxisLabel, .y2axisLabel, etc). You can use standard CSS properties to customize their appearance. In canvas mode, you can set font size, family, and colour through flot options (see below). Example $(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); }); Usage flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black) Compatibility flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas. License flot-axislabels is released under the terms of the MIT License .","title":"Index"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#example","text":"$(function () { var options = { axisLabels: { show: true }, xaxes: [{ axisLabel: 'foo', }], yaxes: [{ position: 'left', axisLabel: 'bar', }, { position: 'right', axisLabel: 'bleem' }] }; $.plot($(\"#placeholder\"), yourData, options); ); });","title":"Example"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#usage","text":"flot-axislabel adds an axisLabels object to the global options object. It supports one option: show (bool): display all axis labels (default: true) There are also several options added to the axis objects. The two main ones are axisLabel (string): the text you want displayed as the label axisLabelPadding (int): padding, in pixels, between the tick labels and the axis label (default: 2) By default, if supported, flot-axislabels uses CSS transforms. You can force either canvas or HTML mode by setting axisLabelUseCanvas or axisLabelUseHtml, respectively, to true. Canvas mode supports several other options: axisLabelFontSizePixels (int): the size, in pixels, of the font (default: 14) axisLabelFontFamily (string): the font family of the font (default: sans-serif) axisLabelColour (string): the font colour (default: black)","title":"Usage"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#compatibility","text":"flot-axislabels should work with recent versions of Firefox, Chrome, Opera, and Safari. It also works with IE 8 and 9. The canvas option does not seem to work with IE 8, even with excanvas.","title":"Compatibility"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/flot-axislabels/#license","text":"flot-axislabels is released under the terms of the MIT License .","title":"License"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/","text":"metisMenu Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr Installation npm npm install metismenu Bower bower install metisMenu Download Usage Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu (); Options toggle Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false }); doubleTapToGo Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true }); DEMO Contains a simple HTML file to demonstrate metisMenu plugin. Release History DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9 Author metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f | License MIT License","title":"metisMenu [![Build Status](https://secure.travis-ci.org/onokumus/metisMenu.png?branch=master)](https://travis-ci.org/onokumus/metisMenu)"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#metismenu","text":"Easy menu jQuery plugin for Twitter Bootstrap 3 Now support cdnjs & jsdelivr","title":"metisMenu"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#installation","text":"npm npm install metismenu Bower bower install metisMenu Download","title":"Installation"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#usage","text":"Include Twitter Bootstrap StyleSheet < link rel = \"stylesheet\" href = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/css/bootstrap.min.css\" > Include metisMenu StyleSheet < link rel = \"stylesheet\" href = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/css/metismenu.min.css\" > Include jQuery < script src = \"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\" ></ script > Include Twitter Bootstrap Script < script src = \"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.0/js/bootstrap.min.js\" ></ script > Include metisMenu plugin's code < script src = \"//cdn.jsdelivr.net/bootstrap.metismenu/1.1.2/js/metismenu.min.js\" ></ script > Call the plugin: $ ( \"#menu\" ). metisMenu ();","title":"Usage"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#options","text":"","title":"Options"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#toggle","text":"Type: Boolean Default: true For auto collapse support. $ ( \"#menu\" ). metisMenu ({ toggle : false });","title":"toggle"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#doubletaptogo","text":"Type: Boolean Default: false For double tap support. $ ( \"#menu\" ). metisMenu ({ doubleTapToGo : true });","title":"doubleTapToGo"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#demo","text":"Contains a simple HTML file to demonstrate metisMenu plugin.","title":"DEMO"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#release-history","text":"DATE VERSION CHANGES * 2014-11-01 v1.1.3 Bootstrap 3.3.0 * 2014-07-07 v1.1.0 Add double tap functionality * 2014-06-24 v1.0.3 cdnjs support & rename plugin * 2014-06-18 v1.0.3 Create grunt task * 2014-06-10 v1.0.2 Fixed for IE8 & IE9","title":"Release History"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#author","text":"metisMenu was made with love by these folks and a bunch of awesome contributors . | --- | --- | --- | --- | --- | --- | --- Osman Nuri Okumu\u015f |","title":"Author"},{"location":"fromwatsons/t4-reports/sbadmin2-1.0.7/bower_components/metisMenu/#license","text":"MIT License","title":"License"}]}